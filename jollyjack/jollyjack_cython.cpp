/* Generated by Cython 3.0.11 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/_core/include/numpy/arrayobject.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/_core/include/numpy/arrayscalars.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/_core/include/numpy/halffloat.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/_core/include/numpy/ndarrayobject.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/_core/include/numpy/ndarraytypes.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/_core/include/numpy/ufuncobject.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/api.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/array/concatenate.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/builder.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/c/abi.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/c/bridge.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/c/dlpack.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/c/dlpack_abi.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/compute/api.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/compute/cast.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/compute/expression.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/config.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/csv/api.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/extension/fixed_shape_tensor.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/extension_type.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/io/api.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/ipc/api.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/json/options.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/json/reader.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/api.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/arrow_to_pandas.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/async.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/benchmark.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/common.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/csv.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/extension_type.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/gdb.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/helpers.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/inference.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/init.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/ipc.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/platform.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/pyarrow.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/python/udf.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/result.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/byte_size.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/cancel.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/compression.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/decimal.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/future.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/io_util.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/iterator.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/key_value_metadata.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/thread_pool.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/arrow/util/value_parsing.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/api/reader.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/api/schema.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/api/writer.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/arrow/reader.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/arrow/schema.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/arrow/writer.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/encryption/encryption.h",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include/parquet/properties.h"
        ],
        "extra_compile_args": [
            "-O0",
            "-DDEBUG",
            "-std=c++17"
        ],
        "extra_link_args": [
            "-debug:full"
        ],
        "include_dirs": [
            ".",
            "/workspace/JollyJack/vcpkg_installed/include",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow/include",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/_core/include"
        ],
        "language": "c++",
        "libraries": [
            "arrow",
            "parquet"
        ],
        "library_dirs": [
            "/workspace/JollyJack/vcpkg_installed/lib",
            "/tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/pyarrow",
            "/usr/local/lib"
        ],
        "name": "jollyjack.jollyjack_cython",
        "sources": [
            "jollyjack/jollyjack_cython.pyx",
            "jollyjack/jollyjack.cc"
        ]
    },
    "module_name": "jollyjack.jollyjack_cython"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__jollyjack__jollyjack_cython
#define __PYX_HAVE_API__jollyjack__jollyjack_cython
/* Early includes */
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string>
#include <memory>
#include <stdint.h>
#include <functional>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#include <stddef.h>
#include "pythread.h"
#include "datetime.h"

    /* Backport for Python 2.x */
    #if PY_MAJOR_VERSION < 3
        #ifndef PyDateTime_DELTA_GET_DAYS
            #define PyDateTime_DELTA_GET_DAYS(o) (((PyDateTime_Delta*)o)->days)
        #endif
        #ifndef PyDateTime_DELTA_GET_SECONDS
            #define PyDateTime_DELTA_GET_SECONDS(o) (((PyDateTime_Delta*)o)->seconds)
        #endif
        #ifndef PyDateTime_DELTA_GET_MICROSECONDS
            #define PyDateTime_DELTA_GET_MICROSECONDS(o) (((PyDateTime_Delta*)o)->microseconds)
        #endif
    #endif

    /* Backport for Python < 3.6 */
    #if PY_VERSION_HEX < 0x030600a4
        #ifndef PyDateTime_TIME_GET_FOLD
            #define PyDateTime_TIME_GET_FOLD(o) ((void)(o), 0)
        #endif
        #ifndef PyDateTime_DATE_GET_FOLD
            #define PyDateTime_DATE_GET_FOLD(o) ((void)(o), 0)
        #endif
    #endif

    /* Backport for Python < 3.6 */
    #if PY_VERSION_HEX < 0x030600a4
        #define __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)             ((void)(fold), PyDateTimeAPI->DateTime_FromDateAndTime(year, month, day, hour, minute, second,                 microsecond, tz, PyDateTimeAPI->DateTimeType))
        #define __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)             ((void)(fold), PyDateTimeAPI->Time_FromTime(hour, minute, second, microsecond, tz, PyDateTimeAPI->TimeType))
    #else /* For Python 3.6+ so that we can pass tz */
        #define __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)             PyDateTimeAPI->DateTime_FromDateAndTimeAndFold(year, month, day, hour, minute, second,                 microsecond, tz, fold, PyDateTimeAPI->DateTimeType)
        #define __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)             PyDateTimeAPI->Time_FromTimeAndFold(hour, minute, second, microsecond, tz, fold, PyDateTimeAPI->TimeType)
    #endif

    /* Backport for Python < 3.7 */
    #if PY_VERSION_HEX < 0x030700b1
        #define __Pyx_TimeZone_UTC NULL
        #define __Pyx_TimeZone_FromOffsetAndName(offset, name) ((void)(offset), (void)(name), (PyObject*)NULL)
    #else
        #define __Pyx_TimeZone_UTC PyDateTime_TimeZone_UTC
        #define __Pyx_TimeZone_FromOffsetAndName(offset, name) PyTimeZone_FromOffsetAndName(offset, name)
    #endif

    /* Backport for Python < 3.10 */
    #if PY_VERSION_HEX < 0x030a00a1
        #ifndef PyDateTime_TIME_GET_TZINFO
            #define PyDateTime_TIME_GET_TZINFO(o)                 ((((PyDateTime_Time*)o)->hastzinfo) ? ((PyDateTime_Time*)o)->tzinfo : Py_None)
        #endif
        #ifndef PyDateTime_DATE_GET_TZINFO
            #define PyDateTime_DATE_GET_TZINFO(o)                 ((((PyDateTime_DateTime*)o)->hastzinfo) ? ((PyDateTime_DateTime*)o)->tzinfo : Py_None)
        #endif
    #endif
    
#include <optional>

    #include <type_traits>
    #include <utility>
    namespace cymove {
    template <typename T>
    inline typename std::remove_reference<T>::type&& cymove(T& t) {
        return std::move(t);
    }
    template <typename T>
    inline typename std::remove_reference<T>::type&& cymove(T&& t) {
        return std::move(t);
    }
    }  // namespace cymove
    

    #include <memory>
    #include <utility>

    namespace arrow {
    namespace py {
    template <typename T>
    std::shared_ptr<T> to_shared(std::unique_ptr<T>& t) {
        return std::move(t);
    }
    template <typename T>
    std::shared_ptr<T> to_shared(std::unique_ptr<T>&& t) {
        return std::move(t);
    }
    }  // namespace py
    }  // namespace arrow
    
#include "arrow/python/platform.h"
#include <Python.h>
#include "numpy/halffloat.h"
#include "arrow/api.h"
#include "arrow/result.h"
#include "arrow/util/future.h"
#include "arrow/python/async.h"
#include "arrow/python/common.h"
#include "arrow/util/key_value_metadata.h"
#include "arrow/util/decimal.h"
#include "arrow/config.h"
#include "arrow/c/dlpack_abi.h"
#include "arrow/c/dlpack.h"
#include "arrow/builder.h"
#include "arrow/util/cancel.h"
#include "arrow/io/api.h"
#include "arrow/ipc/api.h"
#include "arrow/util/value_parsing.h"
#include "arrow/csv/api.h"
#include "arrow/json/options.h"
#include "arrow/json/reader.h"
#include "arrow/util/thread_pool.h"
#include "arrow/compute/api.h"

    #include "arrow/compute/function.h"
    namespace arrow {
    namespace compute {
    namespace internal {
    Result<std::unique_ptr<FunctionOptions>> DeserializeFunctionOptions(
        const Buffer& buffer);
    } //  namespace internal
    } //  namespace compute
    } //  namespace arrow
    

    #include <unordered_map>

    #include "arrow/type.h"
    #include "arrow/datum.h"

    namespace arrow {
    namespace compute {
    struct KnownFieldValues {
      std::unordered_map<FieldRef, Datum, FieldRef::Hash> map;
    };
    } //  namespace compute
    } //  namespace arrow
    
#include "arrow/compute/expression.h"
#include "arrow/extension_type.h"
#include "arrow/extension/fixed_shape_tensor.h"
#include "arrow/util/compression.h"
#include "arrow/util/io_util.h"
#include "arrow/util/iterator.h"
#include "arrow/array/concatenate.h"
#include "arrow/c/abi.h"
#include "arrow/c/bridge.h"
#include "arrow/util/byte_size.h"
#include "arrow/python/udf.h"
#include "arrow/compute/cast.h"
#include "arrow/python/csv.h"
#include "arrow/python/api.h"
#include "arrow/python/arrow_to_pandas.h"
#include "arrow/python/init.h"
#include "arrow/python/pyarrow.h"
#include "arrow/python/inference.h"
#include "arrow/python/ipc.h"
#include "arrow/python/extension_type.h"
#include "arrow/python/benchmark.h"
#include "arrow/python/gdb.h"
#include "arrow/python/helpers.h"
#include "parquet/api/schema.h"
#include "parquet/api/reader.h"
#include "parquet/api/writer.h"
#include "parquet/arrow/reader.h"
#include "parquet/arrow/schema.h"
#include "parquet/properties.h"
#include "parquet/arrow/writer.h"
#include "parquet/encryption/encryption.h"
#include "jollyjack.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "jollyjack/jollyjack_cython.pyx",
  "<stringsource>",
  "__init__.cython-30.pxd",
  "contextvars.pxd",
  "datetime.pxd",
  "_parquet.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "lib.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":769
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */

#line 769 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":770
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */

#line 770 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */

#line 771 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":772
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */

#line 772 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":776
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */

#line 776 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":777
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */

#line 777 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":778
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */

#line 778 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":779
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */

#line 779 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":783
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */

#line 783 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":784
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */

#line 784 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":791
 * ctypedef double complex complex128_t
 * 
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */

#line 791 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":792
 * 
 * ctypedef npy_longlong   longlong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */

#line 792 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":794
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */

#line 794 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":795
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */

#line 795 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":797
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */

#line 797 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":798
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */

#line 798 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":799
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef float complex       cfloat_t
 */

#line 799 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< long double > __pyx_t_long_double_complex;
  #else
    typedef long double _Complex __pyx_t_long_double_complex;
  #endif
#else
    typedef struct { long double real, imag; } __pyx_t_long_double_complex;
#endif
static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double, long double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_7pyarrow_3lib__Weakrefable;
struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions;
struct __pyx_obj_7pyarrow_3lib_IpcReadOptions;
struct __pyx_obj_7pyarrow_3lib_Message;
struct __pyx_obj_7pyarrow_3lib_MemoryPool;
struct __pyx_obj_7pyarrow_3lib_DataType;
struct __pyx_obj_7pyarrow_3lib_ListType;
struct __pyx_obj_7pyarrow_3lib_LargeListType;
struct __pyx_obj_7pyarrow_3lib_ListViewType;
struct __pyx_obj_7pyarrow_3lib_LargeListViewType;
struct __pyx_obj_7pyarrow_3lib_MapType;
struct __pyx_obj_7pyarrow_3lib_FixedSizeListType;
struct __pyx_obj_7pyarrow_3lib_StructType;
struct __pyx_obj_7pyarrow_3lib_DictionaryMemo;
struct __pyx_obj_7pyarrow_3lib_DictionaryType;
struct __pyx_obj_7pyarrow_3lib_TimestampType;
struct __pyx_obj_7pyarrow_3lib_Time32Type;
struct __pyx_obj_7pyarrow_3lib_Time64Type;
struct __pyx_obj_7pyarrow_3lib_DurationType;
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType;
struct __pyx_obj_7pyarrow_3lib_Decimal128Type;
struct __pyx_obj_7pyarrow_3lib_Decimal256Type;
struct __pyx_obj_7pyarrow_3lib_RunEndEncodedType;
struct __pyx_obj_7pyarrow_3lib_BaseExtensionType;
struct __pyx_obj_7pyarrow_3lib_ExtensionType;
struct __pyx_obj_7pyarrow_3lib_FixedShapeTensorType;
struct __pyx_obj_7pyarrow_3lib_PyExtensionType;
struct __pyx_obj_7pyarrow_3lib__Metadata;
struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata;
struct __pyx_obj_7pyarrow_3lib_Field;
struct __pyx_obj_7pyarrow_3lib_Schema;
struct __pyx_obj_7pyarrow_3lib_Scalar;
struct __pyx_obj_7pyarrow_3lib__PandasConvertible;
struct __pyx_obj_7pyarrow_3lib_Array;
struct __pyx_obj_7pyarrow_3lib_Tensor;
struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix;
struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix;
struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor;
struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor;
struct __pyx_obj_7pyarrow_3lib_NullArray;
struct __pyx_obj_7pyarrow_3lib_BooleanArray;
struct __pyx_obj_7pyarrow_3lib_NumericArray;
struct __pyx_obj_7pyarrow_3lib_IntegerArray;
struct __pyx_obj_7pyarrow_3lib_FloatingPointArray;
struct __pyx_obj_7pyarrow_3lib_Int8Array;
struct __pyx_obj_7pyarrow_3lib_UInt8Array;
struct __pyx_obj_7pyarrow_3lib_Int16Array;
struct __pyx_obj_7pyarrow_3lib_UInt16Array;
struct __pyx_obj_7pyarrow_3lib_Int32Array;
struct __pyx_obj_7pyarrow_3lib_UInt32Array;
struct __pyx_obj_7pyarrow_3lib_Int64Array;
struct __pyx_obj_7pyarrow_3lib_UInt64Array;
struct __pyx_obj_7pyarrow_3lib_HalfFloatArray;
struct __pyx_obj_7pyarrow_3lib_FloatArray;
struct __pyx_obj_7pyarrow_3lib_DoubleArray;
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray;
struct __pyx_obj_7pyarrow_3lib_Decimal128Array;
struct __pyx_obj_7pyarrow_3lib_Decimal256Array;
struct __pyx_obj_7pyarrow_3lib_StructArray;
struct __pyx_obj_7pyarrow_3lib_BaseListArray;
struct __pyx_obj_7pyarrow_3lib_ListArray;
struct __pyx_obj_7pyarrow_3lib_LargeListArray;
struct __pyx_obj_7pyarrow_3lib_ListViewArray;
struct __pyx_obj_7pyarrow_3lib_LargeListViewArray;
struct __pyx_obj_7pyarrow_3lib_MapArray;
struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray;
struct __pyx_obj_7pyarrow_3lib_UnionArray;
struct __pyx_obj_7pyarrow_3lib_StringArray;
struct __pyx_obj_7pyarrow_3lib_BinaryArray;
struct __pyx_obj_7pyarrow_3lib_StringViewArray;
struct __pyx_obj_7pyarrow_3lib_BinaryViewArray;
struct __pyx_obj_7pyarrow_3lib_DictionaryArray;
struct __pyx_obj_7pyarrow_3lib_ExtensionArray;
struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray;
struct __pyx_obj_7pyarrow_3lib_ChunkedArray;
struct __pyx_obj_7pyarrow_3lib__Tabular;
struct __pyx_obj_7pyarrow_3lib_Table;
struct __pyx_obj_7pyarrow_3lib_RecordBatch;
struct __pyx_obj_7pyarrow_3lib_Device;
struct __pyx_obj_7pyarrow_3lib_MemoryManager;
struct __pyx_obj_7pyarrow_3lib_Buffer;
struct __pyx_obj_7pyarrow_3lib_ResizableBuffer;
struct __pyx_obj_7pyarrow_3lib_NativeFile;
struct __pyx_obj_7pyarrow_3lib_BufferedInputStream;
struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream;
struct __pyx_obj_7pyarrow_3lib_CompressedInputStream;
struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream;
struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter;
struct __pyx_obj_7pyarrow_3lib_RecordBatchReader;
struct __pyx_obj_7pyarrow_3lib_CacheOptions;
struct __pyx_obj_7pyarrow_3lib_Codec;
struct __pyx_obj_7pyarrow_3lib_StopToken;
struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties;
struct __pyx_obj_7pyarrow_8_parquet_ParquetSchema;
struct __pyx_obj_7pyarrow_8_parquet_FileMetaData;
struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData;
struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData;
struct __pyx_obj_7pyarrow_8_parquet_Statistics;
struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

#line 112 "cpython/contextvars.pxd"
struct __pyx_opt_args_7cpython_11contextvars_get_value {

#line 112 "cpython/contextvars.pxd"
  int __pyx_n;

#line 112 "cpython/contextvars.pxd"
  PyObject *default_value;

#line 112 "cpython/contextvars.pxd"
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

#line 129 "cpython/contextvars.pxd"
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {

#line 129 "cpython/contextvars.pxd"
  int __pyx_n;

#line 129 "cpython/contextvars.pxd"
  PyObject *default_value;

#line 129 "cpython/contextvars.pxd"
};

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1095
 * 
 * # Iterator API added in v1.6
 * ctypedef int (*NpyIter_IterNextFunc)(NpyIter* it) noexcept nogil             # <<<<<<<<<<<<<<
 * ctypedef void (*NpyIter_GetMultiIndexFunc)(NpyIter* it, npy_intp* outcoords) noexcept nogil
 * 
 */

#line 1095 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef int (*__pyx_t_5numpy_NpyIter_IterNextFunc)(NpyIter *);

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1096
 * # Iterator API added in v1.6
 * ctypedef int (*NpyIter_IterNextFunc)(NpyIter* it) noexcept nogil
 * ctypedef void (*NpyIter_GetMultiIndexFunc)(NpyIter* it, npy_intp* outcoords) noexcept nogil             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "numpy/arrayobject.h":
 */

#line 1096 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
typedef void (*__pyx_t_5numpy_NpyIter_GetMultiIndexFunc)(NpyIter *, npy_intp *);

#line 1096 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
struct __pyx_opt_args_7cpython_8datetime_time_new;

#line 1096 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
struct __pyx_opt_args_7cpython_8datetime_datetime_new;

#line 1096 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
struct __pyx_opt_args_7cpython_8datetime_timezone_new;

#line 1096 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
struct __pyx_opt_args_7cpython_8datetime_datetime_from_timestamp;

/* "cpython/datetime.pxd":292
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)
 * 
 */

#line 292 "cpython/datetime.pxd"
struct __pyx_opt_args_7cpython_8datetime_time_new {

#line 292 "cpython/datetime.pxd"
  int __pyx_n;

#line 292 "cpython/datetime.pxd"
  int fold;

#line 292 "cpython/datetime.pxd"
};

/* "cpython/datetime.pxd":297
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)
 * 
 */

#line 297 "cpython/datetime.pxd"
struct __pyx_opt_args_7cpython_8datetime_datetime_new {

#line 297 "cpython/datetime.pxd"
  int __pyx_n;

#line 297 "cpython/datetime.pxd"
  int fold;

#line 297 "cpython/datetime.pxd"
};

/* "cpython/datetime.pxd":306
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

#line 306 "cpython/datetime.pxd"
struct __pyx_opt_args_7cpython_8datetime_timezone_new {

#line 306 "cpython/datetime.pxd"
  int __pyx_n;

#line 306 "cpython/datetime.pxd"
  PyObject *name;

#line 306 "cpython/datetime.pxd"
};

/* "cpython/datetime.pxd":312
 * 
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 */

#line 312 "cpython/datetime.pxd"
struct __pyx_opt_args_7cpython_8datetime_datetime_from_timestamp {

#line 312 "cpython/datetime.pxd"
  int __pyx_n;

#line 312 "cpython/datetime.pxd"
  PyObject *tz;

#line 312 "cpython/datetime.pxd"
};

/* "pyarrow/includes/libarrow.pxd":1473
 * 
 * # Use typedef to emulate syntax for std::function<void(..)>
 * ctypedef void CallbackTransform(object, const shared_ptr[CBuffer]& src,             # <<<<<<<<<<<<<<
 *                                 shared_ptr[CBuffer]* dest)
 * 
 */

#line 1473 "pyarrow/includes/libarrow.pxd"
typedef void __pyx_t_7pyarrow_8includes_8libarrow_CallbackTransform(PyObject *, std::shared_ptr< arrow::Buffer>  const &, std::shared_ptr< arrow::Buffer>  *);

/* "pyarrow/includes/libarrow.pxd":1476
 *                                 shared_ptr[CBuffer]* dest)
 * 
 * ctypedef CResult[shared_ptr[CInputStream]] StreamWrapFunc(             # <<<<<<<<<<<<<<
 *     shared_ptr[CInputStream])
 * 
 */

#line 1476 "pyarrow/includes/libarrow.pxd"
typedef arrow::Result<std::shared_ptr< arrow::io::InputStream> >  __pyx_t_7pyarrow_8includes_8libarrow_StreamWrapFunc(std::shared_ptr< arrow::io::InputStream> );

/* "pyarrow/includes/libarrow.pxd":3036
 *     int64_t TotalBufferSize(const CTable& table)
 * 
 * ctypedef PyObject* CallbackUdf(object user_function, const CUdfContext& context, object inputs)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 3036 "pyarrow/includes/libarrow.pxd"
typedef PyObject *__pyx_t_7pyarrow_8includes_8libarrow_CallbackUdf(PyObject *,  arrow::py::UdfContext const &, PyObject *);

/* "pyarrow/includes/libarrow_python.pxd":24
 * 
 * 
 * ctypedef CInvalidRowResult PyInvalidRowCallback(object,             # <<<<<<<<<<<<<<
 *                                                 const CCSVInvalidRow&)
 * 
 */

#line 24 "pyarrow/includes/libarrow_python.pxd"
typedef  arrow::csv::InvalidRowResult __pyx_t_7pyarrow_8includes_15libarrow_python_PyInvalidRowCallback(PyObject *,  arrow::csv::InvalidRow const &);

#line 24 "pyarrow/includes/libarrow_python.pxd"
struct __pyx_opt_args_7pyarrow_3lib_ensure_type;

/* "pyarrow/lib.pxd":655
 * 
 * # Default is allow_none=False
 * cpdef DataType ensure_type(object type, bint allow_none=*)             # <<<<<<<<<<<<<<
 * 
 * cdef timeunit_to_string(TimeUnit unit)
 */

#line 655 "pyarrow/lib.pxd"
struct __pyx_opt_args_7pyarrow_3lib_ensure_type {

#line 655 "pyarrow/lib.pxd"
  int __pyx_n;

#line 655 "pyarrow/lib.pxd"
  int allow_none;

#line 655 "pyarrow/lib.pxd"
};

#line 655 "pyarrow/lib.pxd"
struct __pyx_opt_args_7pyarrow_8_parquet__create_writer_properties;

#line 655 "pyarrow/lib.pxd"
struct __pyx_opt_args_7pyarrow_8_parquet__create_arrow_writer_properties;

/* "pyarrow/_parquet.pxd":584
 *         return self.properties
 * 
 * cdef shared_ptr[WriterProperties] _create_writer_properties(             # <<<<<<<<<<<<<<
 *     use_dictionary=*,
 *     compression=*,
 */

#line 584 "pyarrow/_parquet.pxd"
struct __pyx_opt_args_7pyarrow_8_parquet__create_writer_properties {

#line 584 "pyarrow/_parquet.pxd"
  int __pyx_n;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *use_dictionary;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *compression;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *version;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *write_statistics;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *data_page_size;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *compression_level;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *use_byte_stream_split;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *column_encoding;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *data_page_version;

#line 584 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *encryption_properties;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *write_batch_size;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *dictionary_pagesize_limit;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *write_page_index;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *write_page_checksum;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *sorting_columns;

#line 584 "pyarrow/_parquet.pxd"
  PyObject *store_decimal_as_integer;

#line 584 "pyarrow/_parquet.pxd"
};

/* "pyarrow/_parquet.pxd":604
 * 
 * 
 * cdef shared_ptr[ArrowWriterProperties] _create_arrow_writer_properties(             # <<<<<<<<<<<<<<
 *     use_deprecated_int96_timestamps=*,
 *     coerce_timestamps=*,
 */

#line 604 "pyarrow/_parquet.pxd"
struct __pyx_opt_args_7pyarrow_8_parquet__create_arrow_writer_properties {

#line 604 "pyarrow/_parquet.pxd"
  int __pyx_n;

#line 604 "pyarrow/_parquet.pxd"
  PyObject *use_deprecated_int96_timestamps;

#line 604 "pyarrow/_parquet.pxd"
  PyObject *coerce_timestamps;

#line 604 "pyarrow/_parquet.pxd"
  PyObject *allow_truncated_timestamps;

#line 604 "pyarrow/_parquet.pxd"
  PyObject *writer_engine_version;

#line 604 "pyarrow/_parquet.pxd"
  PyObject *use_compliant_nested_type;

#line 604 "pyarrow/_parquet.pxd"
  PyObject *store_schema;

#line 604 "pyarrow/_parquet.pxd"
};

#line 604 "pyarrow/_parquet.pxd"
struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_torch;

#line 604 "pyarrow/_parquet.pxd"
struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_numpy;

/* "jollyjack/jollyjack_cython.pyx":20
 * from cpython cimport PyCapsule_GetPointer, PyCapsule_Import
 * 
 * cpdef void read_into_torch (parquet_path, FileMetaData metadata, tensor, row_group_indices, column_indices, pre_buffer=False):             # <<<<<<<<<<<<<<
 * 
 *     import torch
 */

#line 20 "jollyjack/jollyjack_cython.pyx"
struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_torch {

#line 20 "jollyjack/jollyjack_cython.pyx"
  int __pyx_n;

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *pre_buffer;

#line 20 "jollyjack/jollyjack_cython.pyx"
};

/* "jollyjack/jollyjack_cython.pyx":34
 *     return
 * 
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):             # <<<<<<<<<<<<<<
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')
 *     cdef vector[int] crow_group_indices = row_group_indices
 */

#line 34 "jollyjack/jollyjack_cython.pyx"
struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_numpy {

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_n;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *pre_buffer;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *use_threads;

#line 34 "jollyjack/jollyjack_cython.pyx"
};

/* "pyarrow/lib.pxd":71
 * 
 * 
 * cdef class _Weakrefable:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 * 
 */

#line 71 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib__Weakrefable {

#line 71 "pyarrow/lib.pxd"
  PyObject_HEAD

#line 71 "pyarrow/lib.pxd"
  PyObject *__weakref__;

#line 71 "pyarrow/lib.pxd"
};

#line 71 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":75
 * 
 * 
 * cdef class IpcWriteOptions(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CIpcWriteOptions c_options
 */

#line 75 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions {

#line 75 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 75 "pyarrow/lib.pxd"
   arrow::ipc::IpcWriteOptions c_options;

#line 75 "pyarrow/lib.pxd"
};

#line 75 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":80
 * 
 * 
 * cdef class IpcReadOptions(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CIpcReadOptions c_options
 */

#line 80 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_IpcReadOptions {

#line 80 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 80 "pyarrow/lib.pxd"
   arrow::ipc::IpcReadOptions c_options;

#line 80 "pyarrow/lib.pxd"
};

#line 80 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":85
 * 
 * 
 * cdef class Message(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[CMessage] message
 */

#line 85 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Message {

#line 85 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 85 "pyarrow/lib.pxd"
  std::unique_ptr< arrow::ipc::Message>  message;

#line 85 "pyarrow/lib.pxd"
};

#line 85 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":90
 * 
 * 
 * cdef class MemoryPool(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CMemoryPool* pool
 */

#line 90 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_MemoryPool {

#line 90 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 90 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool *__pyx_vtab;

#line 90 "pyarrow/lib.pxd"
   arrow::MemoryPool *pool;

#line 90 "pyarrow/lib.pxd"
};

#line 90 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":103
 * 
 * 
 * cdef class DataType(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDataType] sp_type
 */

#line 103 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_DataType {

#line 103 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 103 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType *__pyx_vtab;

#line 103 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::DataType>  sp_type;

#line 103 "pyarrow/lib.pxd"
   arrow::DataType *type;

#line 103 "pyarrow/lib.pxd"
  PyObject *pep3118_format;

#line 103 "pyarrow/lib.pxd"
};

#line 103 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":113
 * 
 * 
 * cdef class ListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListType* list_type
 */

#line 113 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ListType {

#line 113 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 113 "pyarrow/lib.pxd"
   arrow::ListType const *list_type;

#line 113 "pyarrow/lib.pxd"
};

#line 113 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":118
 * 
 * 
 * cdef class LargeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListType* list_type
 */

#line 118 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_LargeListType {

#line 118 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 118 "pyarrow/lib.pxd"
   arrow::LargeListType const *list_type;

#line 118 "pyarrow/lib.pxd"
};

#line 118 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":123
 * 
 * 
 * cdef class ListViewType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListViewType* list_view_type
 */

#line 123 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ListViewType {

#line 123 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 123 "pyarrow/lib.pxd"
   arrow::ListViewType const *list_view_type;

#line 123 "pyarrow/lib.pxd"
};

#line 123 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":128
 * 
 * 
 * cdef class LargeListViewType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListViewType* list_view_type
 */

#line 128 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_LargeListViewType {

#line 128 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 128 "pyarrow/lib.pxd"
   arrow::LargeListViewType const *list_view_type;

#line 128 "pyarrow/lib.pxd"
};

#line 128 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":133
 * 
 * 
 * cdef class MapType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CMapType* map_type
 */

#line 133 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_MapType {

#line 133 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 133 "pyarrow/lib.pxd"
   arrow::MapType const *map_type;

#line 133 "pyarrow/lib.pxd"
};

#line 133 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":138
 * 
 * 
 * cdef class FixedSizeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeListType* list_type
 */

#line 138 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_FixedSizeListType {

#line 138 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 138 "pyarrow/lib.pxd"
   arrow::FixedSizeListType const *list_type;

#line 138 "pyarrow/lib.pxd"
};

#line 138 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":143
 * 
 * 
 * cdef class StructType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CStructType* struct_type
 */

#line 143 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_StructType {

#line 143 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 143 "pyarrow/lib.pxd"
   arrow::StructType const *struct_type;

#line 143 "pyarrow/lib.pxd"
};

#line 143 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":150
 * 
 * 
 * cdef class DictionaryMemo(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         # Even though the CDictionaryMemo instance is private, we allocate
 */

#line 150 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_DictionaryMemo {

#line 150 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 150 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::ipc::DictionaryMemo>  sp_memo;

#line 150 "pyarrow/lib.pxd"
   arrow::ipc::DictionaryMemo *memo;

#line 150 "pyarrow/lib.pxd"
};

#line 150 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":158
 * 
 * 
 * cdef class DictionaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDictionaryType* dict_type
 */

#line 158 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_DictionaryType {

#line 158 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 158 "pyarrow/lib.pxd"
   arrow::DictionaryType const *dict_type;

#line 158 "pyarrow/lib.pxd"
};

#line 158 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":163
 * 
 * 
 * cdef class TimestampType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTimestampType* ts_type
 */

#line 163 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_TimestampType {

#line 163 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 163 "pyarrow/lib.pxd"
   arrow::TimestampType const *ts_type;

#line 163 "pyarrow/lib.pxd"
};

#line 163 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":168
 * 
 * 
 * cdef class Time32Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime32Type* time_type
 */

#line 168 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Time32Type {

#line 168 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 168 "pyarrow/lib.pxd"
   arrow::Time32Type const *time_type;

#line 168 "pyarrow/lib.pxd"
};

#line 168 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":173
 * 
 * 
 * cdef class Time64Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime64Type* time_type
 */

#line 173 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Time64Type {

#line 173 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 173 "pyarrow/lib.pxd"
   arrow::Time64Type const *time_type;

#line 173 "pyarrow/lib.pxd"
};

#line 173 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":178
 * 
 * 
 * cdef class DurationType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDurationType* duration_type
 */

#line 178 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_DurationType {

#line 178 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 178 "pyarrow/lib.pxd"
   arrow::DurationType const *duration_type;

#line 178 "pyarrow/lib.pxd"
};

#line 178 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":183
 * 
 * 
 * cdef class FixedSizeBinaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeBinaryType* fixed_size_binary_type
 */

#line 183 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType {

#line 183 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 183 "pyarrow/lib.pxd"
   arrow::FixedSizeBinaryType const *fixed_size_binary_type;

#line 183 "pyarrow/lib.pxd"
};

#line 183 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":188
 * 
 * 
 * cdef class Decimal128Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal128Type* decimal128_type
 */

#line 188 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Decimal128Type {

#line 188 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;

#line 188 "pyarrow/lib.pxd"
   arrow::Decimal128Type const *decimal128_type;

#line 188 "pyarrow/lib.pxd"
};

#line 188 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":193
 * 
 * 
 * cdef class Decimal256Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal256Type* decimal256_type
 */

#line 193 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Decimal256Type {

#line 193 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;

#line 193 "pyarrow/lib.pxd"
   arrow::Decimal256Type const *decimal256_type;

#line 193 "pyarrow/lib.pxd"
};

#line 193 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":198
 * 
 * 
 * cdef class RunEndEncodedType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CRunEndEncodedType* run_end_encoded_type
 */

#line 198 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_RunEndEncodedType {

#line 198 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 198 "pyarrow/lib.pxd"
   arrow::RunEndEncodedType const *run_end_encoded_type;

#line 198 "pyarrow/lib.pxd"
};

#line 198 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":203
 * 
 * 
 * cdef class BaseExtensionType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CExtensionType* ext_type
 */

#line 203 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_BaseExtensionType {

#line 203 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType __pyx_base;

#line 203 "pyarrow/lib.pxd"
   arrow::ExtensionType const *ext_type;

#line 203 "pyarrow/lib.pxd"
};

#line 203 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":208
 * 
 * 
 * cdef class ExtensionType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CPyExtensionType* cpy_ext_type
 */

#line 208 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ExtensionType {

#line 208 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_BaseExtensionType __pyx_base;

#line 208 "pyarrow/lib.pxd"
   arrow::py::PyExtensionType const *cpy_ext_type;

#line 208 "pyarrow/lib.pxd"
};

#line 208 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":213
 * 
 * 
 * cdef class FixedShapeTensorType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedShapeTensorType* tensor_ext_type
 */

#line 213 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_FixedShapeTensorType {

#line 213 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_BaseExtensionType __pyx_base;

#line 213 "pyarrow/lib.pxd"
   arrow::extension::FixedShapeTensorType const *tensor_ext_type;

#line 213 "pyarrow/lib.pxd"
};

#line 213 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":218
 * 
 * 
 * cdef class PyExtensionType(ExtensionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 218 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_PyExtensionType {

#line 218 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_ExtensionType __pyx_base;

#line 218 "pyarrow/lib.pxd"
};

#line 218 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":222
 * 
 * 
 * cdef class _Metadata(_Weakrefable):             # <<<<<<<<<<<<<<
 *     # required because KeyValueMetadata also extends collections.abc.Mapping
 *     # and the first parent class must be an extension type
 */

#line 222 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib__Metadata {

#line 222 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 222 "pyarrow/lib.pxd"
};

#line 222 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":228
 * 
 * 
 * cdef class KeyValueMetadata(_Metadata):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[const CKeyValueMetadata] wrapped
 */

#line 228 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata {

#line 228 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Metadata __pyx_base;

#line 228 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata *__pyx_vtab;

#line 228 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::KeyValueMetadata const >  wrapped;

#line 228 "pyarrow/lib.pxd"
   arrow::KeyValueMetadata const *metadata;

#line 228 "pyarrow/lib.pxd"
};

#line 228 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":240
 * 
 * 
 * cdef class Field(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CField] sp_field
 */

#line 240 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Field {

#line 240 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 240 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Field *__pyx_vtab;

#line 240 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Field>  sp_field;

#line 240 "pyarrow/lib.pxd"
   arrow::Field *field;

#line 240 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType *type;

#line 240 "pyarrow/lib.pxd"
};

#line 240 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":251
 * 
 * 
 * cdef class Schema(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSchema] sp_schema
 */

#line 251 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Schema {

#line 251 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 251 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Schema *__pyx_vtab;

#line 251 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Schema>  sp_schema;

#line 251 "pyarrow/lib.pxd"
   arrow::Schema *schema;

#line 251 "pyarrow/lib.pxd"
};

#line 251 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":260
 * 
 * 
 * cdef class Scalar(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] wrapped
 */

#line 260 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Scalar {

#line 260 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 260 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Scalar *__pyx_vtab;

#line 260 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Scalar>  wrapped;

#line 260 "pyarrow/lib.pxd"
};

#line 260 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":272
 * 
 * 
 * cdef class _PandasConvertible(_Weakrefable):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 272 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib__PandasConvertible {

#line 272 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 272 "pyarrow/lib.pxd"
};

#line 272 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":276
 * 
 * 
 * cdef class Array(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */

#line 276 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Array {

#line 276 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;

#line 276 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array *__pyx_vtab;

#line 276 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Array>  sp_array;

#line 276 "pyarrow/lib.pxd"
   arrow::Array *ap;

#line 276 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType *type;

#line 276 "pyarrow/lib.pxd"
  PyObject *_name;

#line 276 "pyarrow/lib.pxd"
};

#line 276 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":292
 * 
 * 
 * cdef class Tensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTensor] sp_tensor
 */

#line 292 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Tensor {

#line 292 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 292 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Tensor *__pyx_vtab;

#line 292 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Tensor>  sp_tensor;

#line 292 "pyarrow/lib.pxd"
   arrow::Tensor *tp;

#line 292 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType *type;

#line 292 "pyarrow/lib.pxd"
  PyObject *_ssize_t_shape;

#line 292 "pyarrow/lib.pxd"
  PyObject *_ssize_t_strides;

#line 292 "pyarrow/lib.pxd"
};

#line 292 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":305
 * 
 * 
 * cdef class SparseCSRMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSRMatrix] sp_sparse_tensor
 */

#line 305 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix {

#line 305 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 305 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix *__pyx_vtab;

#line 305 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::SparseCSRMatrix>  sp_sparse_tensor;

#line 305 "pyarrow/lib.pxd"
   arrow::SparseCSRMatrix *stp;

#line 305 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType *type;

#line 305 "pyarrow/lib.pxd"
};

#line 305 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":316
 * 
 * 
 * cdef class SparseCSCMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSCMatrix] sp_sparse_tensor
 */

#line 316 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix {

#line 316 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 316 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix *__pyx_vtab;

#line 316 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::SparseCSCMatrix>  sp_sparse_tensor;

#line 316 "pyarrow/lib.pxd"
   arrow::SparseCSCMatrix *stp;

#line 316 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType *type;

#line 316 "pyarrow/lib.pxd"
};

#line 316 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":327
 * 
 * 
 * cdef class SparseCOOTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCOOTensor] sp_sparse_tensor
 */

#line 327 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor {

#line 327 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 327 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor *__pyx_vtab;

#line 327 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::SparseCOOTensor>  sp_sparse_tensor;

#line 327 "pyarrow/lib.pxd"
   arrow::SparseCOOTensor *stp;

#line 327 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType *type;

#line 327 "pyarrow/lib.pxd"
};

#line 327 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":338
 * 
 * 
 * cdef class SparseCSFTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSFTensor] sp_sparse_tensor
 */

#line 338 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor {

#line 338 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 338 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor *__pyx_vtab;

#line 338 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::SparseCSFTensor>  sp_sparse_tensor;

#line 338 "pyarrow/lib.pxd"
   arrow::SparseCSFTensor *stp;

#line 338 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_DataType *type;

#line 338 "pyarrow/lib.pxd"
};

#line 338 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":349
 * 
 * 
 * cdef class NullArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 349 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_NullArray {

#line 349 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 349 "pyarrow/lib.pxd"
};

#line 349 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":353
 * 
 * 
 * cdef class BooleanArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 353 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_BooleanArray {

#line 353 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 353 "pyarrow/lib.pxd"
};

#line 353 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":357
 * 
 * 
 * cdef class NumericArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 357 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_NumericArray {

#line 357 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 357 "pyarrow/lib.pxd"
};

#line 357 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":361
 * 
 * 
 * cdef class IntegerArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 361 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_IntegerArray {

#line 361 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_NumericArray __pyx_base;

#line 361 "pyarrow/lib.pxd"
};

#line 361 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":365
 * 
 * 
 * cdef class FloatingPointArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 365 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_FloatingPointArray {

#line 365 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_NumericArray __pyx_base;

#line 365 "pyarrow/lib.pxd"
};

#line 365 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":369
 * 
 * 
 * cdef class Int8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 369 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Int8Array {

#line 369 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 369 "pyarrow/lib.pxd"
};

#line 369 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":373
 * 
 * 
 * cdef class UInt8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 373 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_UInt8Array {

#line 373 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 373 "pyarrow/lib.pxd"
};

#line 373 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":377
 * 
 * 
 * cdef class Int16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 377 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Int16Array {

#line 377 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 377 "pyarrow/lib.pxd"
};

#line 377 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":381
 * 
 * 
 * cdef class UInt16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 381 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_UInt16Array {

#line 381 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 381 "pyarrow/lib.pxd"
};

#line 381 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":385
 * 
 * 
 * cdef class Int32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 385 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Int32Array {

#line 385 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 385 "pyarrow/lib.pxd"
};

#line 385 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":389
 * 
 * 
 * cdef class UInt32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 389 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_UInt32Array {

#line 389 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 389 "pyarrow/lib.pxd"
};

#line 389 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":393
 * 
 * 
 * cdef class Int64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 393 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Int64Array {

#line 393 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 393 "pyarrow/lib.pxd"
};

#line 393 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":397
 * 
 * 
 * cdef class UInt64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 397 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_UInt64Array {

#line 397 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_IntegerArray __pyx_base;

#line 397 "pyarrow/lib.pxd"
};

#line 397 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":401
 * 
 * 
 * cdef class HalfFloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 401 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_HalfFloatArray {

#line 401 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;

#line 401 "pyarrow/lib.pxd"
};

#line 401 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":405
 * 
 * 
 * cdef class FloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 405 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_FloatArray {

#line 405 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;

#line 405 "pyarrow/lib.pxd"
};

#line 405 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":409
 * 
 * 
 * cdef class DoubleArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 409 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_DoubleArray {

#line 409 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_FloatingPointArray __pyx_base;

#line 409 "pyarrow/lib.pxd"
};

#line 409 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":413
 * 
 * 
 * cdef class FixedSizeBinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 413 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray {

#line 413 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 413 "pyarrow/lib.pxd"
};

#line 413 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":417
 * 
 * 
 * cdef class Decimal128Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 417 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Decimal128Array {

#line 417 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;

#line 417 "pyarrow/lib.pxd"
};

#line 417 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":421
 * 
 * 
 * cdef class Decimal256Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 421 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Decimal256Array {

#line 421 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;

#line 421 "pyarrow/lib.pxd"
};

#line 421 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":425
 * 
 * 
 * cdef class StructArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 425 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_StructArray {

#line 425 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 425 "pyarrow/lib.pxd"
};

#line 425 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":429
 * 
 * 
 * cdef class BaseListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 429 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_BaseListArray {

#line 429 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 429 "pyarrow/lib.pxd"
};

#line 429 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":433
 * 
 * 
 * cdef class ListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 433 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ListArray {

#line 433 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_BaseListArray __pyx_base;

#line 433 "pyarrow/lib.pxd"
};

#line 433 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":437
 * 
 * 
 * cdef class LargeListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 437 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_LargeListArray {

#line 437 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_BaseListArray __pyx_base;

#line 437 "pyarrow/lib.pxd"
};

#line 437 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":441
 * 
 * 
 * cdef class ListViewArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 441 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ListViewArray {

#line 441 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_BaseListArray __pyx_base;

#line 441 "pyarrow/lib.pxd"
};

#line 441 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":445
 * 
 * 
 * cdef class LargeListViewArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 445 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_LargeListViewArray {

#line 445 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_BaseListArray __pyx_base;

#line 445 "pyarrow/lib.pxd"
};

#line 445 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":449
 * 
 * 
 * cdef class MapArray(ListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 449 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_MapArray {

#line 449 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_ListArray __pyx_base;

#line 449 "pyarrow/lib.pxd"
};

#line 449 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":453
 * 
 * 
 * cdef class FixedSizeListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 453 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray {

#line 453 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_BaseListArray __pyx_base;

#line 453 "pyarrow/lib.pxd"
};

#line 453 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":457
 * 
 * 
 * cdef class UnionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 457 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_UnionArray {

#line 457 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 457 "pyarrow/lib.pxd"
};

#line 457 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":461
 * 
 * 
 * cdef class StringArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 461 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_StringArray {

#line 461 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 461 "pyarrow/lib.pxd"
};

#line 461 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":465
 * 
 * 
 * cdef class BinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 465 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_BinaryArray {

#line 465 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 465 "pyarrow/lib.pxd"
};

#line 465 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":469
 * 
 * 
 * cdef class StringViewArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 469 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_StringViewArray {

#line 469 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 469 "pyarrow/lib.pxd"
};

#line 469 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":473
 * 
 * 
 * cdef class BinaryViewArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 473 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_BinaryViewArray {

#line 473 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 473 "pyarrow/lib.pxd"
};

#line 473 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":477
 * 
 * 
 * cdef class DictionaryArray(Array):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _indices, _dictionary
 */

#line 477 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_DictionaryArray {

#line 477 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 477 "pyarrow/lib.pxd"
  PyObject *_indices;

#line 477 "pyarrow/lib.pxd"
  PyObject *_dictionary;

#line 477 "pyarrow/lib.pxd"
};

#line 477 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":482
 * 
 * 
 * cdef class ExtensionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 482 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ExtensionArray {

#line 482 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 482 "pyarrow/lib.pxd"
};

#line 482 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":486
 * 
 * 
 * cdef class MonthDayNanoIntervalArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 486 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray {

#line 486 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Array __pyx_base;

#line 486 "pyarrow/lib.pxd"
};

#line 486 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":494
 * 
 * 
 * cdef class ChunkedArray(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CChunkedArray] sp_chunked_array
 */

#line 494 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ChunkedArray {

#line 494 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;

#line 494 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray *__pyx_vtab;

#line 494 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::ChunkedArray>  sp_chunked_array;

#line 494 "pyarrow/lib.pxd"
   arrow::ChunkedArray *chunked_array;

#line 494 "pyarrow/lib.pxd"
  PyObject *_name;

#line 494 "pyarrow/lib.pxd"
};

#line 494 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":507
 * 
 * 
 * cdef class _Tabular(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 507 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib__Tabular {

#line 507 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__PandasConvertible __pyx_base;

#line 507 "pyarrow/lib.pxd"
};

#line 507 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":511
 * 
 * 
 * cdef class Table(_Tabular):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTable] sp_table
 */

#line 511 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Table {

#line 511 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Tabular __pyx_base;

#line 511 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Table *__pyx_vtab;

#line 511 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Table>  sp_table;

#line 511 "pyarrow/lib.pxd"
   arrow::Table *table;

#line 511 "pyarrow/lib.pxd"
};

#line 511 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":519
 * 
 * 
 * cdef class RecordBatch(_Tabular):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatch] sp_batch
 */

#line 519 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_RecordBatch {

#line 519 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Tabular __pyx_base;

#line 519 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch *__pyx_vtab;

#line 519 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::RecordBatch>  sp_batch;

#line 519 "pyarrow/lib.pxd"
   arrow::RecordBatch *batch;

#line 519 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Schema *_schema;

#line 519 "pyarrow/lib.pxd"
};

#line 519 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":528
 * 
 * 
 * cdef class Device(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDevice] device
 */

#line 528 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Device {

#line 528 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 528 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Device *__pyx_vtab;

#line 528 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Device>  device;

#line 528 "pyarrow/lib.pxd"
};

#line 528 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":538
 * 
 * 
 * cdef class MemoryManager(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CMemoryManager] memory_manager
 */

#line 538 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_MemoryManager {

#line 538 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 538 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_MemoryManager *__pyx_vtab;

#line 538 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::MemoryManager>  memory_manager;

#line 538 "pyarrow/lib.pxd"
};

#line 538 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":548
 * 
 * 
 * cdef class Buffer(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBuffer] buffer
 */

#line 548 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Buffer {

#line 548 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 548 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer *__pyx_vtab;

#line 548 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Buffer>  buffer;

#line 548 "pyarrow/lib.pxd"
  Py_ssize_t shape[1];

#line 548 "pyarrow/lib.pxd"
  Py_ssize_t strides[1];

#line 548 "pyarrow/lib.pxd"
};

#line 548 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":558
 * 
 * 
 * cdef class ResizableBuffer(Buffer):             # <<<<<<<<<<<<<<
 * 
 *     cdef void init_rz(self, const shared_ptr[CResizableBuffer]& buffer)
 */

#line 558 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_ResizableBuffer {

#line 558 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Buffer __pyx_base;

#line 558 "pyarrow/lib.pxd"
};

#line 558 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":563
 * 
 * 
 * cdef class NativeFile(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CInputStream] input_stream
 */

#line 563 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_NativeFile {

#line 563 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 563 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile *__pyx_vtab;

#line 563 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::io::InputStream>  input_stream;

#line 563 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::io::RandomAccessFile>  random_access;

#line 563 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::io::OutputStream>  output_stream;

#line 563 "pyarrow/lib.pxd"
  int is_readable;

#line 563 "pyarrow/lib.pxd"
  int is_writable;

#line 563 "pyarrow/lib.pxd"
  int is_seekable;

#line 563 "pyarrow/lib.pxd"
  int _is_appending;

#line 563 "pyarrow/lib.pxd"
  int own_file;

#line 563 "pyarrow/lib.pxd"
};

#line 563 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":587
 * 
 * 
 * cdef class BufferedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 587 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_BufferedInputStream {

#line 587 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;

#line 587 "pyarrow/lib.pxd"
};

#line 587 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":591
 * 
 * 
 * cdef class BufferedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 591 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream {

#line 591 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;

#line 591 "pyarrow/lib.pxd"
};

#line 591 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":595
 * 
 * 
 * cdef class CompressedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 595 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_CompressedInputStream {

#line 595 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;

#line 595 "pyarrow/lib.pxd"
};

#line 595 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":599
 * 
 * 
 * cdef class CompressedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 599 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream {

#line 599 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_NativeFile __pyx_base;

#line 599 "pyarrow/lib.pxd"
};

#line 599 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":603
 * 
 * 
 * cdef class _CRecordBatchWriter(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         SharedPtrNoGIL[CRecordBatchWriter] writer
 */

#line 603 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter {

#line 603 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 603 "pyarrow/lib.pxd"
  arrow::py::SharedPtrNoGIL< arrow::ipc::RecordBatchWriter>  writer;

#line 603 "pyarrow/lib.pxd"
};

#line 603 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":608
 * 
 * 
 * cdef class RecordBatchReader(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         SharedPtrNoGIL[CRecordBatchReader] reader
 */

#line 608 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_RecordBatchReader {

#line 608 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 608 "pyarrow/lib.pxd"
  arrow::py::SharedPtrNoGIL< arrow::RecordBatchReader>  reader;

#line 608 "pyarrow/lib.pxd"
};

#line 608 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":613
 * 
 * 
 * cdef class CacheOptions(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCacheOptions wrapped
 */

#line 613 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_CacheOptions {

#line 613 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 613 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_CacheOptions *__pyx_vtab;

#line 613 "pyarrow/lib.pxd"
  arrow::io::CacheOptions wrapped;

#line 613 "pyarrow/lib.pxd"
};

#line 613 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":625
 * 
 * 
 * cdef class Codec(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCodec] wrapped
 */

#line 625 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_Codec {

#line 625 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 625 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Codec *__pyx_vtab;

#line 625 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::util::Codec>  wrapped;

#line 625 "pyarrow/lib.pxd"
};

#line 625 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":633
 * 
 * # This class is only used internally for now
 * cdef class StopToken:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CStopToken stop_token
 */

#line 633 "pyarrow/lib.pxd"
struct __pyx_obj_7pyarrow_3lib_StopToken {

#line 633 "pyarrow/lib.pxd"
  PyObject_HEAD

#line 633 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_StopToken *__pyx_vtab;

#line 633 "pyarrow/lib.pxd"
  arrow::StopToken stop_token;

#line 633 "pyarrow/lib.pxd"
};

#line 633 "pyarrow/lib.pxd"


/* "pyarrow/_parquet.pxd":568
 *         const COutputStream* sink)
 * 
 * cdef class FileEncryptionProperties:             # <<<<<<<<<<<<<<
 *     """File-level encryption properties for the low-level API"""
 *     cdef:
 */

#line 568 "pyarrow/_parquet.pxd"
struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties {

#line 568 "pyarrow/_parquet.pxd"
  PyObject_HEAD

#line 568 "pyarrow/_parquet.pxd"
  struct __pyx_vtabstruct_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_vtab;

#line 568 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::FileEncryptionProperties>  properties;

#line 568 "pyarrow/_parquet.pxd"
};

#line 568 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":613
 * ) except *
 * 
 * cdef class ParquetSchema(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         FileMetaData parent  # the FileMetaData owning the SchemaDescriptor
 */

#line 613 "pyarrow/_parquet.pxd"
struct __pyx_obj_7pyarrow_8_parquet_ParquetSchema {

#line 613 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 613 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *parent;

#line 613 "pyarrow/_parquet.pxd"
  parquet::SchemaDescriptor const *schema;

#line 613 "pyarrow/_parquet.pxd"
};

#line 613 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":618
 *         const SchemaDescriptor* schema
 * 
 * cdef class FileMetaData(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CFileMetaData] sp_metadata
 */

#line 618 "pyarrow/_parquet.pxd"
struct __pyx_obj_7pyarrow_8_parquet_FileMetaData {

#line 618 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 618 "pyarrow/_parquet.pxd"
  struct __pyx_vtabstruct_7pyarrow_8_parquet_FileMetaData *__pyx_vtab;

#line 618 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::FileMetaData>  sp_metadata;

#line 618 "pyarrow/_parquet.pxd"
   parquet::FileMetaData *_metadata;

#line 618 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_ParquetSchema *_schema;

#line 618 "pyarrow/_parquet.pxd"
};

#line 618 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":628
 *         self._metadata = metadata.get()
 * 
 * cdef class RowGroupMetaData(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int index  # for pickling support
 */

#line 628 "pyarrow/_parquet.pxd"
struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData {

#line 628 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 628 "pyarrow/_parquet.pxd"
  int index;

#line 628 "pyarrow/_parquet.pxd"
  std::unique_ptr< parquet::RowGroupMetaData>  up_metadata;

#line 628 "pyarrow/_parquet.pxd"
   parquet::RowGroupMetaData *metadata;

#line 628 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *parent;

#line 628 "pyarrow/_parquet.pxd"
};

#line 628 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":635
 *         FileMetaData parent
 * 
 * cdef class ColumnChunkMetaData(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[CColumnChunkMetaData] up_metadata
 */

#line 635 "pyarrow/_parquet.pxd"
struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData {

#line 635 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 635 "pyarrow/_parquet.pxd"
  struct __pyx_vtabstruct_7pyarrow_8_parquet_ColumnChunkMetaData *__pyx_vtab;

#line 635 "pyarrow/_parquet.pxd"
  std::unique_ptr< parquet::ColumnChunkMetaData>  up_metadata;

#line 635 "pyarrow/_parquet.pxd"
   parquet::ColumnChunkMetaData *metadata;

#line 635 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData *parent;

#line 635 "pyarrow/_parquet.pxd"
};

#line 635 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":646
 *         self.parent = parent
 * 
 * cdef class Statistics(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CStatistics] statistics
 */

#line 646 "pyarrow/_parquet.pxd"
struct __pyx_obj_7pyarrow_8_parquet_Statistics {

#line 646 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_3lib__Weakrefable __pyx_base;

#line 646 "pyarrow/_parquet.pxd"
  struct __pyx_vtabstruct_7pyarrow_8_parquet_Statistics *__pyx_vtab;

#line 646 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::Statistics>  statistics;

#line 646 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *parent;

#line 646 "pyarrow/_parquet.pxd"
};

#line 646 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":665
 *         pass
 * 
 * cdef class FileDecryptionProperties:             # <<<<<<<<<<<<<<
 *     """File-level decryption properties for the low-level API"""
 *     cdef:
 */

#line 665 "pyarrow/_parquet.pxd"
struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties {

#line 665 "pyarrow/_parquet.pxd"
  PyObject_HEAD

#line 665 "pyarrow/_parquet.pxd"
  struct __pyx_vtabstruct_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_vtab;

#line 665 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::FileDecryptionProperties>  properties;

#line 665 "pyarrow/_parquet.pxd"
};

#line 665 "pyarrow/_parquet.pxd"


#line 665 "pyarrow/_parquet.pxd"


/* "pyarrow/lib.pxd":90
 * 
 * 
 * cdef class MemoryPool(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CMemoryPool* pool
 */

#line 90 "pyarrow/lib.pxd"


#line 90 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool {

#line 90 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_MemoryPool *,  arrow::MemoryPool *);

#line 90 "pyarrow/lib.pxd"
};

#line 90 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool *__pyx_vtabptr_7pyarrow_3lib_MemoryPool;

#line 90 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":103
 * 
 * 
 * cdef class DataType(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDataType] sp_type
 */

#line 103 "pyarrow/lib.pxd"


#line 103 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_DataType {

#line 103 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_DataType *, std::shared_ptr< arrow::DataType>  const &);

#line 103 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Field *(*field)(struct __pyx_obj_7pyarrow_3lib_DataType *, PyObject *, int __pyx_skip_dispatch);

#line 103 "pyarrow/lib.pxd"
};

#line 103 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_DataType *__pyx_vtabptr_7pyarrow_3lib_DataType;

#line 103 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":113
 * 
 * 
 * cdef class ListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListType* list_type
 */

#line 113 "pyarrow/lib.pxd"


#line 113 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ListType {

#line 113 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 113 "pyarrow/lib.pxd"
};

#line 113 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ListType *__pyx_vtabptr_7pyarrow_3lib_ListType;

#line 113 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":118
 * 
 * 
 * cdef class LargeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListType* list_type
 */

#line 118 "pyarrow/lib.pxd"


#line 118 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType {

#line 118 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 118 "pyarrow/lib.pxd"
};

#line 118 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType *__pyx_vtabptr_7pyarrow_3lib_LargeListType;

#line 118 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":123
 * 
 * 
 * cdef class ListViewType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CListViewType* list_view_type
 */

#line 123 "pyarrow/lib.pxd"


#line 123 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ListViewType {

#line 123 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 123 "pyarrow/lib.pxd"
};

#line 123 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ListViewType *__pyx_vtabptr_7pyarrow_3lib_ListViewType;

#line 123 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":128
 * 
 * 
 * cdef class LargeListViewType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CLargeListViewType* list_view_type
 */

#line 128 "pyarrow/lib.pxd"


#line 128 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_LargeListViewType {

#line 128 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 128 "pyarrow/lib.pxd"
};

#line 128 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListViewType *__pyx_vtabptr_7pyarrow_3lib_LargeListViewType;

#line 128 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":133
 * 
 * 
 * cdef class MapType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CMapType* map_type
 */

#line 133 "pyarrow/lib.pxd"


#line 133 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_MapType {

#line 133 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 133 "pyarrow/lib.pxd"
};

#line 133 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_MapType *__pyx_vtabptr_7pyarrow_3lib_MapType;

#line 133 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":138
 * 
 * 
 * cdef class FixedSizeListType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeListType* list_type
 */

#line 138 "pyarrow/lib.pxd"


#line 138 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListType {

#line 138 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 138 "pyarrow/lib.pxd"
};

#line 138 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListType *__pyx_vtabptr_7pyarrow_3lib_FixedSizeListType;

#line 138 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":143
 * 
 * 
 * cdef class StructType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CStructType* struct_type
 */

#line 143 "pyarrow/lib.pxd"


#line 143 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_StructType {

#line 143 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 143 "pyarrow/lib.pxd"
  struct __pyx_obj_7pyarrow_3lib_Field *(*field_by_name)(struct __pyx_obj_7pyarrow_3lib_StructType *, PyObject *);

#line 143 "pyarrow/lib.pxd"
};

#line 143 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_StructType *__pyx_vtabptr_7pyarrow_3lib_StructType;

#line 143 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":158
 * 
 * 
 * cdef class DictionaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDictionaryType* dict_type
 */

#line 158 "pyarrow/lib.pxd"


#line 158 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType {

#line 158 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 158 "pyarrow/lib.pxd"
};

#line 158 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType *__pyx_vtabptr_7pyarrow_3lib_DictionaryType;

#line 158 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":163
 * 
 * 
 * cdef class TimestampType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTimestampType* ts_type
 */

#line 163 "pyarrow/lib.pxd"


#line 163 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType {

#line 163 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 163 "pyarrow/lib.pxd"
};

#line 163 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType *__pyx_vtabptr_7pyarrow_3lib_TimestampType;

#line 163 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":168
 * 
 * 
 * cdef class Time32Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime32Type* time_type
 */

#line 168 "pyarrow/lib.pxd"


#line 168 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type {

#line 168 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 168 "pyarrow/lib.pxd"
};

#line 168 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type *__pyx_vtabptr_7pyarrow_3lib_Time32Type;

#line 168 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":173
 * 
 * 
 * cdef class Time64Type(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CTime64Type* time_type
 */

#line 173 "pyarrow/lib.pxd"


#line 173 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type {

#line 173 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 173 "pyarrow/lib.pxd"
};

#line 173 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type *__pyx_vtabptr_7pyarrow_3lib_Time64Type;

#line 173 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":178
 * 
 * 
 * cdef class DurationType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDurationType* duration_type
 */

#line 178 "pyarrow/lib.pxd"


#line 178 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_DurationType {

#line 178 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 178 "pyarrow/lib.pxd"
};

#line 178 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_DurationType *__pyx_vtabptr_7pyarrow_3lib_DurationType;

#line 178 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":183
 * 
 * 
 * cdef class FixedSizeBinaryType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedSizeBinaryType* fixed_size_binary_type
 */

#line 183 "pyarrow/lib.pxd"


#line 183 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType {

#line 183 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 183 "pyarrow/lib.pxd"
};

#line 183 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType *__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType;

#line 183 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":188
 * 
 * 
 * cdef class Decimal128Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal128Type* decimal128_type
 */

#line 188 "pyarrow/lib.pxd"


#line 188 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type {

#line 188 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;

#line 188 "pyarrow/lib.pxd"
};

#line 188 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type *__pyx_vtabptr_7pyarrow_3lib_Decimal128Type;

#line 188 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":193
 * 
 * 
 * cdef class Decimal256Type(FixedSizeBinaryType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CDecimal256Type* decimal256_type
 */

#line 193 "pyarrow/lib.pxd"


#line 193 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Type {

#line 193 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType __pyx_base;

#line 193 "pyarrow/lib.pxd"
};

#line 193 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Type *__pyx_vtabptr_7pyarrow_3lib_Decimal256Type;

#line 193 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":198
 * 
 * 
 * cdef class RunEndEncodedType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CRunEndEncodedType* run_end_encoded_type
 */

#line 198 "pyarrow/lib.pxd"


#line 198 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_RunEndEncodedType {

#line 198 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 198 "pyarrow/lib.pxd"
};

#line 198 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_RunEndEncodedType *__pyx_vtabptr_7pyarrow_3lib_RunEndEncodedType;

#line 198 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":203
 * 
 * 
 * cdef class BaseExtensionType(DataType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CExtensionType* ext_type
 */

#line 203 "pyarrow/lib.pxd"


#line 203 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType {

#line 203 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_DataType __pyx_base;

#line 203 "pyarrow/lib.pxd"
};

#line 203 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType *__pyx_vtabptr_7pyarrow_3lib_BaseExtensionType;

#line 203 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":208
 * 
 * 
 * cdef class ExtensionType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CPyExtensionType* cpy_ext_type
 */

#line 208 "pyarrow/lib.pxd"


#line 208 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType {

#line 208 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType __pyx_base;

#line 208 "pyarrow/lib.pxd"
};

#line 208 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType *__pyx_vtabptr_7pyarrow_3lib_ExtensionType;

#line 208 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":213
 * 
 * 
 * cdef class FixedShapeTensorType(BaseExtensionType):             # <<<<<<<<<<<<<<
 *     cdef:
 *         const CFixedShapeTensorType* tensor_ext_type
 */

#line 213 "pyarrow/lib.pxd"


#line 213 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_FixedShapeTensorType {

#line 213 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType __pyx_base;

#line 213 "pyarrow/lib.pxd"
};

#line 213 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedShapeTensorType *__pyx_vtabptr_7pyarrow_3lib_FixedShapeTensorType;

#line 213 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":218
 * 
 * 
 * cdef class PyExtensionType(ExtensionType):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 218 "pyarrow/lib.pxd"


#line 218 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType {

#line 218 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType __pyx_base;

#line 218 "pyarrow/lib.pxd"
};

#line 218 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType *__pyx_vtabptr_7pyarrow_3lib_PyExtensionType;

#line 218 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":228
 * 
 * 
 * cdef class KeyValueMetadata(_Metadata):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[const CKeyValueMetadata] wrapped
 */

#line 228 "pyarrow/lib.pxd"


#line 228 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata {

#line 228 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata *, std::shared_ptr< arrow::KeyValueMetadata const >  const &);

#line 228 "pyarrow/lib.pxd"
  PyObject *(*wrap)(std::shared_ptr< arrow::KeyValueMetadata const >  const &);

#line 228 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::KeyValueMetadata const >  (*unwrap)(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata *);

#line 228 "pyarrow/lib.pxd"
};

#line 228 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata *__pyx_vtabptr_7pyarrow_3lib_KeyValueMetadata;

#line 228 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":240
 * 
 * 
 * cdef class Field(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CField] sp_field
 */

#line 240 "pyarrow/lib.pxd"


#line 240 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Field {

#line 240 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Field *, std::shared_ptr< arrow::Field>  const &);

#line 240 "pyarrow/lib.pxd"
};

#line 240 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Field *__pyx_vtabptr_7pyarrow_3lib_Field;

#line 240 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":251
 * 
 * 
 * cdef class Schema(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSchema] sp_schema
 */

#line 251 "pyarrow/lib.pxd"


#line 251 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Schema {

#line 251 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Schema *, std::vector<std::shared_ptr< arrow::Field> >  const &);

#line 251 "pyarrow/lib.pxd"
  void (*init_schema)(struct __pyx_obj_7pyarrow_3lib_Schema *, std::shared_ptr< arrow::Schema>  const &);

#line 251 "pyarrow/lib.pxd"
};

#line 251 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Schema *__pyx_vtabptr_7pyarrow_3lib_Schema;

#line 251 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":260
 * 
 * 
 * cdef class Scalar(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CScalar] wrapped
 */

#line 260 "pyarrow/lib.pxd"


#line 260 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Scalar {

#line 260 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Scalar *, std::shared_ptr< arrow::Scalar>  const &);

#line 260 "pyarrow/lib.pxd"
  PyObject *(*wrap)(std::shared_ptr< arrow::Scalar>  const &);

#line 260 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::Scalar>  (*unwrap)(struct __pyx_obj_7pyarrow_3lib_Scalar *);

#line 260 "pyarrow/lib.pxd"
};

#line 260 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Scalar *__pyx_vtabptr_7pyarrow_3lib_Scalar;

#line 260 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":276
 * 
 * 
 * cdef class Array(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CArray] sp_array
 */

#line 276 "pyarrow/lib.pxd"


#line 276 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Array {

#line 276 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Array *, std::shared_ptr< arrow::Array>  const &);

#line 276 "pyarrow/lib.pxd"
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_Array *, int64_t);

#line 276 "pyarrow/lib.pxd"
  int64_t (*length)(struct __pyx_obj_7pyarrow_3lib_Array *);

#line 276 "pyarrow/lib.pxd"
  void (*_assert_cpu)(struct __pyx_obj_7pyarrow_3lib_Array *);

#line 276 "pyarrow/lib.pxd"
};

#line 276 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Array *__pyx_vtabptr_7pyarrow_3lib_Array;

#line 276 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":292
 * 
 * 
 * cdef class Tensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTensor] sp_tensor
 */

#line 292 "pyarrow/lib.pxd"


#line 292 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Tensor {

#line 292 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Tensor *, std::shared_ptr< arrow::Tensor>  const &);

#line 292 "pyarrow/lib.pxd"
};

#line 292 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Tensor *__pyx_vtabptr_7pyarrow_3lib_Tensor;

#line 292 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":305
 * 
 * 
 * cdef class SparseCSRMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSRMatrix] sp_sparse_tensor
 */

#line 305 "pyarrow/lib.pxd"


#line 305 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix {

#line 305 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix *, std::shared_ptr< arrow::SparseCSRMatrix>  const &);

#line 305 "pyarrow/lib.pxd"
};

#line 305 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix *__pyx_vtabptr_7pyarrow_3lib_SparseCSRMatrix;

#line 305 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":316
 * 
 * 
 * cdef class SparseCSCMatrix(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSCMatrix] sp_sparse_tensor
 */

#line 316 "pyarrow/lib.pxd"


#line 316 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix {

#line 316 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix *, std::shared_ptr< arrow::SparseCSCMatrix>  const &);

#line 316 "pyarrow/lib.pxd"
};

#line 316 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix *__pyx_vtabptr_7pyarrow_3lib_SparseCSCMatrix;

#line 316 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":327
 * 
 * 
 * cdef class SparseCOOTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCOOTensor] sp_sparse_tensor
 */

#line 327 "pyarrow/lib.pxd"


#line 327 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor {

#line 327 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor *, std::shared_ptr< arrow::SparseCOOTensor>  const &);

#line 327 "pyarrow/lib.pxd"
};

#line 327 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor *__pyx_vtabptr_7pyarrow_3lib_SparseCOOTensor;

#line 327 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":338
 * 
 * 
 * cdef class SparseCSFTensor(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CSparseCSFTensor] sp_sparse_tensor
 */

#line 338 "pyarrow/lib.pxd"


#line 338 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor {

#line 338 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor *, std::shared_ptr< arrow::SparseCSFTensor>  const &);

#line 338 "pyarrow/lib.pxd"
};

#line 338 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor *__pyx_vtabptr_7pyarrow_3lib_SparseCSFTensor;

#line 338 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":349
 * 
 * 
 * cdef class NullArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 349 "pyarrow/lib.pxd"


#line 349 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_NullArray {

#line 349 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 349 "pyarrow/lib.pxd"
};

#line 349 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_NullArray *__pyx_vtabptr_7pyarrow_3lib_NullArray;

#line 349 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":353
 * 
 * 
 * cdef class BooleanArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 353 "pyarrow/lib.pxd"


#line 353 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray {

#line 353 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 353 "pyarrow/lib.pxd"
};

#line 353 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray *__pyx_vtabptr_7pyarrow_3lib_BooleanArray;

#line 353 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":357
 * 
 * 
 * cdef class NumericArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 357 "pyarrow/lib.pxd"


#line 357 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray {

#line 357 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 357 "pyarrow/lib.pxd"
};

#line 357 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray *__pyx_vtabptr_7pyarrow_3lib_NumericArray;

#line 357 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":361
 * 
 * 
 * cdef class IntegerArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 361 "pyarrow/lib.pxd"


#line 361 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray {

#line 361 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray __pyx_base;

#line 361 "pyarrow/lib.pxd"
};

#line 361 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray *__pyx_vtabptr_7pyarrow_3lib_IntegerArray;

#line 361 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":365
 * 
 * 
 * cdef class FloatingPointArray(NumericArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 365 "pyarrow/lib.pxd"


#line 365 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray {

#line 365 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray __pyx_base;

#line 365 "pyarrow/lib.pxd"
};

#line 365 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray *__pyx_vtabptr_7pyarrow_3lib_FloatingPointArray;

#line 365 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":369
 * 
 * 
 * cdef class Int8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 369 "pyarrow/lib.pxd"


#line 369 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array {

#line 369 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 369 "pyarrow/lib.pxd"
};

#line 369 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array *__pyx_vtabptr_7pyarrow_3lib_Int8Array;

#line 369 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":373
 * 
 * 
 * cdef class UInt8Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 373 "pyarrow/lib.pxd"


#line 373 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array {

#line 373 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 373 "pyarrow/lib.pxd"
};

#line 373 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array *__pyx_vtabptr_7pyarrow_3lib_UInt8Array;

#line 373 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":377
 * 
 * 
 * cdef class Int16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 377 "pyarrow/lib.pxd"


#line 377 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array {

#line 377 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 377 "pyarrow/lib.pxd"
};

#line 377 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array *__pyx_vtabptr_7pyarrow_3lib_Int16Array;

#line 377 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":381
 * 
 * 
 * cdef class UInt16Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 381 "pyarrow/lib.pxd"


#line 381 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array {

#line 381 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 381 "pyarrow/lib.pxd"
};

#line 381 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array *__pyx_vtabptr_7pyarrow_3lib_UInt16Array;

#line 381 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":385
 * 
 * 
 * cdef class Int32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 385 "pyarrow/lib.pxd"


#line 385 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array {

#line 385 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 385 "pyarrow/lib.pxd"
};

#line 385 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array *__pyx_vtabptr_7pyarrow_3lib_Int32Array;

#line 385 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":389
 * 
 * 
 * cdef class UInt32Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 389 "pyarrow/lib.pxd"


#line 389 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array {

#line 389 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 389 "pyarrow/lib.pxd"
};

#line 389 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array *__pyx_vtabptr_7pyarrow_3lib_UInt32Array;

#line 389 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":393
 * 
 * 
 * cdef class Int64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 393 "pyarrow/lib.pxd"


#line 393 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array {

#line 393 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 393 "pyarrow/lib.pxd"
};

#line 393 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array *__pyx_vtabptr_7pyarrow_3lib_Int64Array;

#line 393 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":397
 * 
 * 
 * cdef class UInt64Array(IntegerArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 397 "pyarrow/lib.pxd"


#line 397 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array {

#line 397 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray __pyx_base;

#line 397 "pyarrow/lib.pxd"
};

#line 397 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array *__pyx_vtabptr_7pyarrow_3lib_UInt64Array;

#line 397 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":401
 * 
 * 
 * cdef class HalfFloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 401 "pyarrow/lib.pxd"


#line 401 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray {

#line 401 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;

#line 401 "pyarrow/lib.pxd"
};

#line 401 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray *__pyx_vtabptr_7pyarrow_3lib_HalfFloatArray;

#line 401 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":405
 * 
 * 
 * cdef class FloatArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 405 "pyarrow/lib.pxd"


#line 405 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray {

#line 405 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;

#line 405 "pyarrow/lib.pxd"
};

#line 405 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray *__pyx_vtabptr_7pyarrow_3lib_FloatArray;

#line 405 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":409
 * 
 * 
 * cdef class DoubleArray(FloatingPointArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 409 "pyarrow/lib.pxd"


#line 409 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray {

#line 409 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray __pyx_base;

#line 409 "pyarrow/lib.pxd"
};

#line 409 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray *__pyx_vtabptr_7pyarrow_3lib_DoubleArray;

#line 409 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":413
 * 
 * 
 * cdef class FixedSizeBinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 413 "pyarrow/lib.pxd"


#line 413 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray {

#line 413 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 413 "pyarrow/lib.pxd"
};

#line 413 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray *__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray;

#line 413 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":417
 * 
 * 
 * cdef class Decimal128Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 417 "pyarrow/lib.pxd"


#line 417 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array {

#line 417 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;

#line 417 "pyarrow/lib.pxd"
};

#line 417 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array *__pyx_vtabptr_7pyarrow_3lib_Decimal128Array;

#line 417 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":421
 * 
 * 
 * cdef class Decimal256Array(FixedSizeBinaryArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 421 "pyarrow/lib.pxd"


#line 421 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Array {

#line 421 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray __pyx_base;

#line 421 "pyarrow/lib.pxd"
};

#line 421 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Array *__pyx_vtabptr_7pyarrow_3lib_Decimal256Array;

#line 421 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":425
 * 
 * 
 * cdef class StructArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 425 "pyarrow/lib.pxd"


#line 425 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_StructArray {

#line 425 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 425 "pyarrow/lib.pxd"
};

#line 425 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_StructArray *__pyx_vtabptr_7pyarrow_3lib_StructArray;

#line 425 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":429
 * 
 * 
 * cdef class BaseListArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 429 "pyarrow/lib.pxd"


#line 429 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray {

#line 429 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 429 "pyarrow/lib.pxd"
};

#line 429 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray *__pyx_vtabptr_7pyarrow_3lib_BaseListArray;

#line 429 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":433
 * 
 * 
 * cdef class ListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 433 "pyarrow/lib.pxd"


#line 433 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ListArray {

#line 433 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray __pyx_base;

#line 433 "pyarrow/lib.pxd"
};

#line 433 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ListArray *__pyx_vtabptr_7pyarrow_3lib_ListArray;

#line 433 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":437
 * 
 * 
 * cdef class LargeListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 437 "pyarrow/lib.pxd"


#line 437 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray {

#line 437 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray __pyx_base;

#line 437 "pyarrow/lib.pxd"
};

#line 437 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray *__pyx_vtabptr_7pyarrow_3lib_LargeListArray;

#line 437 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":441
 * 
 * 
 * cdef class ListViewArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 441 "pyarrow/lib.pxd"


#line 441 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ListViewArray {

#line 441 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray __pyx_base;

#line 441 "pyarrow/lib.pxd"
};

#line 441 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ListViewArray *__pyx_vtabptr_7pyarrow_3lib_ListViewArray;

#line 441 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":445
 * 
 * 
 * cdef class LargeListViewArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 445 "pyarrow/lib.pxd"


#line 445 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_LargeListViewArray {

#line 445 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray __pyx_base;

#line 445 "pyarrow/lib.pxd"
};

#line 445 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_LargeListViewArray *__pyx_vtabptr_7pyarrow_3lib_LargeListViewArray;

#line 445 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":449
 * 
 * 
 * cdef class MapArray(ListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 449 "pyarrow/lib.pxd"


#line 449 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_MapArray {

#line 449 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_ListArray __pyx_base;

#line 449 "pyarrow/lib.pxd"
};

#line 449 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_MapArray *__pyx_vtabptr_7pyarrow_3lib_MapArray;

#line 449 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":453
 * 
 * 
 * cdef class FixedSizeListArray(BaseListArray):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 453 "pyarrow/lib.pxd"


#line 453 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListArray {

#line 453 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray __pyx_base;

#line 453 "pyarrow/lib.pxd"
};

#line 453 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListArray *__pyx_vtabptr_7pyarrow_3lib_FixedSizeListArray;

#line 453 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":457
 * 
 * 
 * cdef class UnionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 457 "pyarrow/lib.pxd"


#line 457 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray {

#line 457 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 457 "pyarrow/lib.pxd"
};

#line 457 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray *__pyx_vtabptr_7pyarrow_3lib_UnionArray;

#line 457 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":461
 * 
 * 
 * cdef class StringArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 461 "pyarrow/lib.pxd"


#line 461 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_StringArray {

#line 461 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 461 "pyarrow/lib.pxd"
};

#line 461 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_StringArray *__pyx_vtabptr_7pyarrow_3lib_StringArray;

#line 461 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":465
 * 
 * 
 * cdef class BinaryArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 465 "pyarrow/lib.pxd"


#line 465 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray {

#line 465 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 465 "pyarrow/lib.pxd"
};

#line 465 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray *__pyx_vtabptr_7pyarrow_3lib_BinaryArray;

#line 465 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":469
 * 
 * 
 * cdef class StringViewArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 469 "pyarrow/lib.pxd"


#line 469 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_StringViewArray {

#line 469 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 469 "pyarrow/lib.pxd"
};

#line 469 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_StringViewArray *__pyx_vtabptr_7pyarrow_3lib_StringViewArray;

#line 469 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":473
 * 
 * 
 * cdef class BinaryViewArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 473 "pyarrow/lib.pxd"


#line 473 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_BinaryViewArray {

#line 473 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 473 "pyarrow/lib.pxd"
};

#line 473 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_BinaryViewArray *__pyx_vtabptr_7pyarrow_3lib_BinaryViewArray;

#line 473 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":477
 * 
 * 
 * cdef class DictionaryArray(Array):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _indices, _dictionary
 */

#line 477 "pyarrow/lib.pxd"


#line 477 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray {

#line 477 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 477 "pyarrow/lib.pxd"
};

#line 477 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray *__pyx_vtabptr_7pyarrow_3lib_DictionaryArray;

#line 477 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":482
 * 
 * 
 * cdef class ExtensionArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 482 "pyarrow/lib.pxd"


#line 482 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray {

#line 482 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 482 "pyarrow/lib.pxd"
};

#line 482 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray *__pyx_vtabptr_7pyarrow_3lib_ExtensionArray;

#line 482 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":486
 * 
 * 
 * cdef class MonthDayNanoIntervalArray(Array):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 486 "pyarrow/lib.pxd"


#line 486 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_MonthDayNanoIntervalArray {

#line 486 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Array __pyx_base;

#line 486 "pyarrow/lib.pxd"
};

#line 486 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_MonthDayNanoIntervalArray *__pyx_vtabptr_7pyarrow_3lib_MonthDayNanoIntervalArray;

#line 486 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":494
 * 
 * 
 * cdef class ChunkedArray(_PandasConvertible):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CChunkedArray] sp_chunked_array
 */

#line 494 "pyarrow/lib.pxd"


#line 494 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray {

#line 494 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_ChunkedArray *, std::shared_ptr< arrow::ChunkedArray>  const &);

#line 494 "pyarrow/lib.pxd"
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_ChunkedArray *, int64_t);

#line 494 "pyarrow/lib.pxd"
};

#line 494 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray *__pyx_vtabptr_7pyarrow_3lib_ChunkedArray;

#line 494 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":511
 * 
 * 
 * cdef class Table(_Tabular):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CTable] sp_table
 */

#line 511 "pyarrow/lib.pxd"


#line 511 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Table {

#line 511 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Table *, std::shared_ptr< arrow::Table>  const &);

#line 511 "pyarrow/lib.pxd"
};

#line 511 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Table *__pyx_vtabptr_7pyarrow_3lib_Table;

#line 511 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":519
 * 
 * 
 * cdef class RecordBatch(_Tabular):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CRecordBatch] sp_batch
 */

#line 519 "pyarrow/lib.pxd"


#line 519 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch {

#line 519 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_RecordBatch *, std::shared_ptr< arrow::RecordBatch>  const &);

#line 519 "pyarrow/lib.pxd"
};

#line 519 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch *__pyx_vtabptr_7pyarrow_3lib_RecordBatch;

#line 519 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":528
 * 
 * 
 * cdef class Device(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CDevice] device
 */

#line 528 "pyarrow/lib.pxd"


#line 528 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Device {

#line 528 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Device *, std::shared_ptr< arrow::Device>  const &);

#line 528 "pyarrow/lib.pxd"
  PyObject *(*wrap)(std::shared_ptr< arrow::Device>  const &);

#line 528 "pyarrow/lib.pxd"
};

#line 528 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Device *__pyx_vtabptr_7pyarrow_3lib_Device;

#line 528 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":538
 * 
 * 
 * cdef class MemoryManager(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CMemoryManager] memory_manager
 */

#line 538 "pyarrow/lib.pxd"


#line 538 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_MemoryManager {

#line 538 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_MemoryManager *, std::shared_ptr< arrow::MemoryManager>  const &);

#line 538 "pyarrow/lib.pxd"
  PyObject *(*wrap)(std::shared_ptr< arrow::MemoryManager>  const &);

#line 538 "pyarrow/lib.pxd"
};

#line 538 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_MemoryManager *__pyx_vtabptr_7pyarrow_3lib_MemoryManager;

#line 538 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":548
 * 
 * 
 * cdef class Buffer(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CBuffer] buffer
 */

#line 548 "pyarrow/lib.pxd"


#line 548 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Buffer {

#line 548 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_Buffer *, std::shared_ptr< arrow::Buffer>  const &);

#line 548 "pyarrow/lib.pxd"
  PyObject *(*getitem)(struct __pyx_obj_7pyarrow_3lib_Buffer *, int64_t);

#line 548 "pyarrow/lib.pxd"
};

#line 548 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Buffer *__pyx_vtabptr_7pyarrow_3lib_Buffer;

#line 548 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":558
 * 
 * 
 * cdef class ResizableBuffer(Buffer):             # <<<<<<<<<<<<<<
 * 
 *     cdef void init_rz(self, const shared_ptr[CResizableBuffer]& buffer)
 */

#line 558 "pyarrow/lib.pxd"


#line 558 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer {

#line 558 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_Buffer __pyx_base;

#line 558 "pyarrow/lib.pxd"
  void (*init_rz)(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer *, std::shared_ptr< arrow::ResizableBuffer>  const &);

#line 558 "pyarrow/lib.pxd"
};

#line 558 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer *__pyx_vtabptr_7pyarrow_3lib_ResizableBuffer;

#line 558 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":563
 * 
 * 
 * cdef class NativeFile(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CInputStream] input_stream
 */

#line 563 "pyarrow/lib.pxd"


#line 563 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile {

#line 563 "pyarrow/lib.pxd"
  PyObject *(*set_random_access_file)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr< arrow::io::RandomAccessFile> );

#line 563 "pyarrow/lib.pxd"
  PyObject *(*set_input_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr< arrow::io::InputStream> );

#line 563 "pyarrow/lib.pxd"
  PyObject *(*set_output_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *, std::shared_ptr< arrow::io::OutputStream> );

#line 563 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::io::RandomAccessFile>  (*get_random_access_file)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);

#line 563 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::io::InputStream>  (*get_input_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);

#line 563 "pyarrow/lib.pxd"
  std::shared_ptr< arrow::io::OutputStream>  (*get_output_stream)(struct __pyx_obj_7pyarrow_3lib_NativeFile *);

#line 563 "pyarrow/lib.pxd"
};

#line 563 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile *__pyx_vtabptr_7pyarrow_3lib_NativeFile;

#line 563 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":587
 * 
 * 
 * cdef class BufferedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 587 "pyarrow/lib.pxd"


#line 587 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream {

#line 587 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;

#line 587 "pyarrow/lib.pxd"
};

#line 587 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream *__pyx_vtabptr_7pyarrow_3lib_BufferedInputStream;

#line 587 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":591
 * 
 * 
 * cdef class BufferedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 591 "pyarrow/lib.pxd"


#line 591 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream {

#line 591 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;

#line 591 "pyarrow/lib.pxd"
};

#line 591 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream *__pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream;

#line 591 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":595
 * 
 * 
 * cdef class CompressedInputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 595 "pyarrow/lib.pxd"


#line 595 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream {

#line 595 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;

#line 595 "pyarrow/lib.pxd"
};

#line 595 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream *__pyx_vtabptr_7pyarrow_3lib_CompressedInputStream;

#line 595 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":599
 * 
 * 
 * cdef class CompressedOutputStream(NativeFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

#line 599 "pyarrow/lib.pxd"


#line 599 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream {

#line 599 "pyarrow/lib.pxd"
  struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile __pyx_base;

#line 599 "pyarrow/lib.pxd"
};

#line 599 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream *__pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream;

#line 599 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":613
 * 
 * 
 * cdef class CacheOptions(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         CCacheOptions wrapped
 */

#line 613 "pyarrow/lib.pxd"


#line 613 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_CacheOptions {

#line 613 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_CacheOptions *, arrow::io::CacheOptions);

#line 613 "pyarrow/lib.pxd"
  arrow::io::CacheOptions (*unwrap)(struct __pyx_obj_7pyarrow_3lib_CacheOptions *);

#line 613 "pyarrow/lib.pxd"
  PyObject *(*wrap)(arrow::io::CacheOptions const );

#line 613 "pyarrow/lib.pxd"
};

#line 613 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_CacheOptions *__pyx_vtabptr_7pyarrow_3lib_CacheOptions;

#line 613 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":625
 * 
 * 
 * cdef class Codec(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CCodec] wrapped
 */

#line 625 "pyarrow/lib.pxd"


#line 625 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_Codec {

#line 625 "pyarrow/lib.pxd"
   arrow::util::Codec *(*unwrap)(struct __pyx_obj_7pyarrow_3lib_Codec *);

#line 625 "pyarrow/lib.pxd"
};

#line 625 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_Codec *__pyx_vtabptr_7pyarrow_3lib_Codec;

#line 625 "pyarrow/lib.pxd"


/* "pyarrow/lib.pxd":633
 * 
 * # This class is only used internally for now
 * cdef class StopToken:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CStopToken stop_token
 */

#line 633 "pyarrow/lib.pxd"


#line 633 "pyarrow/lib.pxd"
struct __pyx_vtabstruct_7pyarrow_3lib_StopToken {

#line 633 "pyarrow/lib.pxd"
  void (*init)(struct __pyx_obj_7pyarrow_3lib_StopToken *, arrow::StopToken);

#line 633 "pyarrow/lib.pxd"
};

#line 633 "pyarrow/lib.pxd"
static struct __pyx_vtabstruct_7pyarrow_3lib_StopToken *__pyx_vtabptr_7pyarrow_3lib_StopToken;

#line 633 "pyarrow/lib.pxd"


/* "pyarrow/_parquet.pxd":568
 *         const COutputStream* sink)
 * 
 * cdef class FileEncryptionProperties:             # <<<<<<<<<<<<<<
 *     """File-level encryption properties for the low-level API"""
 *     cdef:
 */

#line 568 "pyarrow/_parquet.pxd"


#line 568 "pyarrow/_parquet.pxd"
struct __pyx_vtabstruct_7pyarrow_8_parquet_FileEncryptionProperties {

#line 568 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *(*wrap)(std::shared_ptr< parquet::FileEncryptionProperties> );

#line 568 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::FileEncryptionProperties>  (*unwrap)(struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *);

#line 568 "pyarrow/_parquet.pxd"
};

#line 568 "pyarrow/_parquet.pxd"
static struct __pyx_vtabstruct_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_vtabptr_7pyarrow_8_parquet_FileEncryptionProperties;

#line 568 "pyarrow/_parquet.pxd"
static CYTHON_INLINE struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_f_7pyarrow_8_parquet_24FileEncryptionProperties_wrap(std::shared_ptr< parquet::FileEncryptionProperties> );

#line 568 "pyarrow/_parquet.pxd"
static CYTHON_INLINE std::shared_ptr< parquet::FileEncryptionProperties>  __pyx_f_7pyarrow_8_parquet_24FileEncryptionProperties_unwrap(struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *);

#line 568 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":618
 *         const SchemaDescriptor* schema
 * 
 * cdef class FileMetaData(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CFileMetaData] sp_metadata
 */

#line 618 "pyarrow/_parquet.pxd"


#line 618 "pyarrow/_parquet.pxd"
struct __pyx_vtabstruct_7pyarrow_8_parquet_FileMetaData {

#line 618 "pyarrow/_parquet.pxd"
  PyObject *(*init)(struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *, std::shared_ptr< parquet::FileMetaData>  const &);

#line 618 "pyarrow/_parquet.pxd"
};

#line 618 "pyarrow/_parquet.pxd"
static struct __pyx_vtabstruct_7pyarrow_8_parquet_FileMetaData *__pyx_vtabptr_7pyarrow_8_parquet_FileMetaData;

#line 618 "pyarrow/_parquet.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_12FileMetaData_init(struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *, std::shared_ptr< parquet::FileMetaData>  const &);

#line 618 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":635
 *         FileMetaData parent
 * 
 * cdef class ColumnChunkMetaData(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[CColumnChunkMetaData] up_metadata
 */

#line 635 "pyarrow/_parquet.pxd"


#line 635 "pyarrow/_parquet.pxd"
struct __pyx_vtabstruct_7pyarrow_8_parquet_ColumnChunkMetaData {

#line 635 "pyarrow/_parquet.pxd"
  PyObject *(*init)(struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *, struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData *, int);

#line 635 "pyarrow/_parquet.pxd"
};

#line 635 "pyarrow/_parquet.pxd"
static struct __pyx_vtabstruct_7pyarrow_8_parquet_ColumnChunkMetaData *__pyx_vtabptr_7pyarrow_8_parquet_ColumnChunkMetaData;

#line 635 "pyarrow/_parquet.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_19ColumnChunkMetaData_init(struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *, struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData *, int);

#line 635 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":646
 *         self.parent = parent
 * 
 * cdef class Statistics(_Weakrefable):             # <<<<<<<<<<<<<<
 *     cdef:
 *         shared_ptr[CStatistics] statistics
 */

#line 646 "pyarrow/_parquet.pxd"


#line 646 "pyarrow/_parquet.pxd"
struct __pyx_vtabstruct_7pyarrow_8_parquet_Statistics {

#line 646 "pyarrow/_parquet.pxd"
  PyObject *(*init)(struct __pyx_obj_7pyarrow_8_parquet_Statistics *, std::shared_ptr< parquet::Statistics>  const &, struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *);

#line 646 "pyarrow/_parquet.pxd"
};

#line 646 "pyarrow/_parquet.pxd"
static struct __pyx_vtabstruct_7pyarrow_8_parquet_Statistics *__pyx_vtabptr_7pyarrow_8_parquet_Statistics;

#line 646 "pyarrow/_parquet.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_10Statistics_init(struct __pyx_obj_7pyarrow_8_parquet_Statistics *, std::shared_ptr< parquet::Statistics>  const &, struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *);

#line 646 "pyarrow/_parquet.pxd"


/* "pyarrow/_parquet.pxd":665
 *         pass
 * 
 * cdef class FileDecryptionProperties:             # <<<<<<<<<<<<<<
 *     """File-level decryption properties for the low-level API"""
 *     cdef:
 */

#line 665 "pyarrow/_parquet.pxd"


#line 665 "pyarrow/_parquet.pxd"
struct __pyx_vtabstruct_7pyarrow_8_parquet_FileDecryptionProperties {

#line 665 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *(*wrap)(std::shared_ptr< parquet::FileDecryptionProperties> );

#line 665 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::FileDecryptionProperties>  (*unwrap)(struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *);

#line 665 "pyarrow/_parquet.pxd"
};

#line 665 "pyarrow/_parquet.pxd"
static struct __pyx_vtabstruct_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_vtabptr_7pyarrow_8_parquet_FileDecryptionProperties;

#line 665 "pyarrow/_parquet.pxd"
static CYTHON_INLINE struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_f_7pyarrow_8_parquet_24FileDecryptionProperties_wrap(std::shared_ptr< parquet::FileDecryptionProperties> );

#line 665 "pyarrow/_parquet.pxd"
static CYTHON_INLINE std::shared_ptr< parquet::FileDecryptionProperties>  __pyx_f_7pyarrow_8_parquet_24FileDecryptionProperties_unwrap(struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *);
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* IncludeStringH.proto */
#include <string.h>

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (1)
#elif CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_11
#define __PYX_HAVE_RT_ImportType_proto_3_0_11
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_11 {
   __Pyx_ImportType_CheckSize_Error_3_0_11 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_11 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_11 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_long__double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_long__double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_long__double(a, b) ((a)-(b))
    #define __Pyx_c_prod_long__double(a, b) ((a)*(b))
    #define __Pyx_c_quot_long__double(a, b) ((a)/(b))
    #define __Pyx_c_neg_long__double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_long__double(z) ((z)==(long double)0)
    #define __Pyx_c_conj_long__double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (::std::abs(z))
        #define __Pyx_c_pow_long__double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_long__double(z) ((z)==0)
    #define __Pyx_c_conj_long__double(z)    (conjl(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (cabsl(z))
        #define __Pyx_c_pow_long__double(a, b)  (cpowl(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex);
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex);
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    #endif
#endif

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_intp(npy_intp value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_4year_year(PyDateTime_Date *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_5month_month(PyDateTime_Date *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_3day_day(PyDateTime_Date *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4hour_hour(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6minute_minute(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6second_second(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_11microsecond_microsecond(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_4time_6tzinfo_tzinfo(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4fold_fold(PyDateTime_Time *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4year_year(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_5month_month(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_3day_day(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4hour_hour(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6minute_minute(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6second_second(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_11microsecond_microsecond(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_8datetime_6tzinfo_tzinfo(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4fold_fold(PyDateTime_DateTime *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_3day_day(PyDateTime_Delta *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_6second_second(PyDateTime_Delta *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_11microsecond_microsecond(PyDateTime_Delta *__pyx_v_self); /* proto*/
static CYTHON_INLINE struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_f_7pyarrow_8_parquet_24FileEncryptionProperties_wrap(std::shared_ptr< parquet::FileEncryptionProperties>  __pyx_v_properties); /* proto*/
static CYTHON_INLINE std::shared_ptr< parquet::FileEncryptionProperties>  __pyx_f_7pyarrow_8_parquet_24FileEncryptionProperties_unwrap(struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_12FileMetaData_init(struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_self, std::shared_ptr< parquet::FileMetaData>  const &__pyx_v_metadata); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_19ColumnChunkMetaData_init(struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *__pyx_v_self, struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData *__pyx_v_parent, int __pyx_v_i); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_10Statistics_init(struct __pyx_obj_7pyarrow_8_parquet_Statistics *__pyx_v_self, std::shared_ptr< parquet::Statistics>  const &__pyx_v_statistics, struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *__pyx_v_parent); /* proto*/
static CYTHON_INLINE struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_f_7pyarrow_8_parquet_24FileDecryptionProperties_wrap(std::shared_ptr< parquet::FileDecryptionProperties>  __pyx_v_properties); /* proto*/
static CYTHON_INLINE std::shared_ptr< parquet::FileDecryptionProperties>  __pyx_f_7pyarrow_8_parquet_24FileDecryptionProperties_unwrap(struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_v_self); /* proto*/

/* Module declarations from "cython" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython.version" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "jollyjack" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "libcpp.functional" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "libcpp.unordered_set" */

/* Module declarations from "datetime" */

/* Module declarations from "cpython.datetime" */

/* Module declarations from "pyarrow.includes.common" */

/* Module declarations from "pyarrow.includes.libarrow" */

/* Module declarations from "libcpp.cast" */

/* Module declarations from "pyarrow.includes.libarrow_python" */

/* Module declarations from "pyarrow.lib" */
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_buffer)(std::shared_ptr< arrow::Buffer>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_resizable_buffer)(std::shared_ptr< arrow::ResizableBuffer>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_data_type)(std::shared_ptr< arrow::DataType>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_field)(std::shared_ptr< arrow::Field>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_schema)(std::shared_ptr< arrow::Schema>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_scalar)(std::shared_ptr< arrow::Scalar>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_array)(std::shared_ptr< arrow::Array>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_chunked_array)(std::shared_ptr< arrow::ChunkedArray>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_coo_tensor)(std::shared_ptr< arrow::SparseCOOTensor>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_csc_matrix)(std::shared_ptr< arrow::SparseCSCMatrix>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_csf_tensor)(std::shared_ptr< arrow::SparseCSFTensor>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_sparse_csr_matrix)(std::shared_ptr< arrow::SparseCSRMatrix>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_tensor)(std::shared_ptr< arrow::Tensor>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_batch)(std::shared_ptr< arrow::RecordBatch>  const &); /*proto*/
static PyObject *(*__pyx_f_7pyarrow_3lib_pyarrow_wrap_table)(std::shared_ptr< arrow::Table>  const &); /*proto*/
static std::shared_ptr< arrow::Buffer>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_buffer)(PyObject *); /*proto*/
static std::shared_ptr< arrow::DataType>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_data_type)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Field>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_field)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Schema>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_schema)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Scalar>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_scalar)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Array>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_array)(PyObject *); /*proto*/
static std::shared_ptr< arrow::ChunkedArray>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_chunked_array)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCOOTensor>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_coo_tensor)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCSCMatrix>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_csc_matrix)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCSFTensor>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_csf_tensor)(PyObject *); /*proto*/
static std::shared_ptr< arrow::SparseCSRMatrix>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_sparse_csr_matrix)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Tensor>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_tensor)(PyObject *); /*proto*/
static std::shared_ptr< arrow::RecordBatch>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_batch)(PyObject *); /*proto*/
static std::shared_ptr< arrow::Table>  (*__pyx_f_7pyarrow_3lib_pyarrow_unwrap_table)(PyObject *); /*proto*/

/* Module declarations from "pyarrow._parquet" */

/* Module declarations from "jollyjack.cjollyjack" */

/* Module declarations from "jollyjack.jollyjack_cython" */
static void __pyx_f_9jollyjack_16jollyjack_cython_read_into_torch(PyObject *, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_torch *__pyx_optional_args); /*proto*/
static void __pyx_f_9jollyjack_16jollyjack_cython_read_into_numpy(PyObject *, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *, PyArrayObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_numpy *__pyx_optional_args); /*proto*/
static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "jollyjack.jollyjack_cython"
extern int __pyx_module_is_main_jollyjack__jollyjack_cython;
int __pyx_module_is_main_jollyjack__jollyjack_cython = 0;

/* Implementation of "jollyjack.jollyjack_cython" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_RuntimeError;
/* #### Code section: string_decls ### */
static const char __pyx_k_2[] = " != 2";
static const char __pyx_k__4[] = "*";
static const char __pyx_k__5[] = "";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pa[] = "pa";
static const char __pyx_k_pq[] = "pq";
static const char __pyx_k__13[] = "?";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_torch[] = "torch";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_tensor[] = "tensor";
static const char __pyx_k_parquet[] = "parquet";
static const char __pyx_k_pyarrow[] = "pyarrow";
static const char __pyx_k_metadata[] = "metadata";
static const char __pyx_k_np_array[] = "np_array";
static const char __pyx_k_pre_buffer[] = "pre_buffer";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_use_threads[] = "use_threads";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_parquet_path[] = "parquet_path";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_column_indices[] = "column_indices";
static const char __pyx_k_pyarrow_parquet[] = "pyarrow.parquet";
static const char __pyx_k_read_into_numpy[] = "read_into_numpy";
static const char __pyx_k_read_into_torch[] = "read_into_torch";
static const char __pyx_k_Requested_to_read[] = "Requested to read ";
static const char __pyx_k_row_group_indices[] = "row_group_indices";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Unexpected_np_array_ndim[] = "Unexpected np_array.ndim, ";
static const char __pyx_k_jollyjack_jollyjack_cython[] = "jollyjack.jollyjack_cython";
static const char __pyx_k_jollyjack_jollyjack_cython_pyx[] = "jollyjack/jollyjack_cython.pyx";
static const char __pyx_k_columns_but_the_number_of_colum[] = " columns, but the number of columns in numpy array is ";
static const char __pyx_k_Expected_array_in_a_Fortran_styl[] = "Expected array in a Fortran-style (column-major) order";
static const char __pyx_k_Time_zones_are_not_available_fro[] = "Time zones are not available from the C-API.";
static const char __pyx_k_numpy__core_multiarray_failed_to[] = "numpy._core.multiarray failed to import";
static const char __pyx_k_numpy__core_umath_failed_to_impo[] = "numpy._core.umath failed to import";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_9jollyjack_16jollyjack_cython_read_into_torch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parquet_path, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata, PyObject *__pyx_v_tensor, PyObject *__pyx_v_row_group_indices, PyObject *__pyx_v_column_indices, PyObject *__pyx_v_pre_buffer); /* proto */
static PyObject *__pyx_pf_9jollyjack_16jollyjack_cython_2read_into_numpy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parquet_path, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata, PyArrayObject *__pyx_v_np_array, PyObject *__pyx_v_row_group_indices, PyObject *__pyx_v_column_indices, PyObject *__pyx_v_pre_buffer, PyObject *__pyx_v_use_threads); /* proto */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_8datetime_date;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_time;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_datetime;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_timedelta;
  PyTypeObject *__pyx_ptype_7cpython_8datetime_tzinfo;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7pyarrow_3lib__Weakrefable;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_IpcWriteOptions;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_IpcReadOptions;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Message;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_MemoryPool;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_DataType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListViewType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListViewType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_MapType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeListType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_StructType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryMemo;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_TimestampType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Time32Type;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Time64Type;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_DurationType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal128Type;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal256Type;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_RunEndEncodedType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_BaseExtensionType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ExtensionType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedShapeTensorType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_PyExtensionType;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib__Metadata;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_KeyValueMetadata;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Field;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Schema;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Scalar;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib__PandasConvertible;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Tensor;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCOOTensor;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_SparseCSFTensor;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_NullArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_BooleanArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_NumericArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_IntegerArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_FloatingPointArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int8Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt8Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int16Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt16Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int32Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt32Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Int64Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_UInt64Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_HalfFloatArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_FloatArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_DoubleArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal128Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Decimal256Array;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_StructArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_BaseListArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ListViewArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_LargeListViewArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_MapArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_FixedSizeListArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_UnionArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_StringArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_BinaryArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_StringViewArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_BinaryViewArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_DictionaryArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ExtensionArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ChunkedArray;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib__Tabular;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Table;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_RecordBatch;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Device;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_MemoryManager;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Buffer;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_ResizableBuffer;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_NativeFile;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_BufferedInputStream;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_BufferedOutputStream;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_CompressedInputStream;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_CompressedOutputStream;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_RecordBatchReader;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_CacheOptions;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_Codec;
  PyTypeObject *__pyx_ptype_7pyarrow_3lib_StopToken;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties;
  PyTypeObject *__pyx_ptype_7pyarrow_8_parquet_ParquetSchema;
  PyTypeObject *__pyx_ptype_7pyarrow_8_parquet_FileMetaData;
  PyTypeObject *__pyx_ptype_7pyarrow_8_parquet_RowGroupMetaData;
  PyTypeObject *__pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData;
  PyTypeObject *__pyx_ptype_7pyarrow_8_parquet_Statistics;
  PyTypeObject *__pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_kp_u_2;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_kp_u_Expected_array_in_a_Fortran_styl;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_u_Requested_to_read;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_kp_u_Time_zones_are_not_available_fro;
  PyObject *__pyx_kp_u_Unexpected_np_array_ndim;
  PyObject *__pyx_n_s__13;
  PyObject *__pyx_n_s__4;
  PyObject *__pyx_kp_b__5;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_column_indices;
  PyObject *__pyx_kp_u_columns_but_the_number_of_colum;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_jollyjack_jollyjack_cython;
  PyObject *__pyx_kp_s_jollyjack_jollyjack_cython_pyx;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_metadata;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_np_array;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_u_numpy__core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy__core_umath_failed_to_impo;
  PyObject *__pyx_n_s_pa;
  PyObject *__pyx_n_s_parquet;
  PyObject *__pyx_n_s_parquet_path;
  PyObject *__pyx_n_s_pq;
  PyObject *__pyx_n_s_pre_buffer;
  PyObject *__pyx_n_s_pyarrow;
  PyObject *__pyx_n_s_pyarrow_parquet;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_read_into_numpy;
  PyObject *__pyx_n_s_read_into_torch;
  PyObject *__pyx_n_s_row_group_indices;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_tensor;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_torch;
  PyObject *__pyx_n_s_use_threads;
  PyObject *__pyx_n_u_utf8;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_codeobj__11;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_date);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_time);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_datetime);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_timedelta);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_8datetime_tzinfo);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib__Weakrefable);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_IpcWriteOptions);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_IpcReadOptions);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Message);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_MemoryPool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_DataType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ListType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_LargeListType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ListViewType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_LargeListViewType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_MapType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeListType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_StructType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_DictionaryMemo);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_DictionaryType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_TimestampType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Time32Type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Time64Type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_DurationType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Decimal128Type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Decimal256Type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_RunEndEncodedType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_BaseExtensionType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ExtensionType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_FixedShapeTensorType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_PyExtensionType);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib__Metadata);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_KeyValueMetadata);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Field);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Schema);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Scalar);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib__PandasConvertible);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Tensor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_SparseCOOTensor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_SparseCSFTensor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_NullArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_BooleanArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_NumericArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_IntegerArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_FloatingPointArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Int8Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_UInt8Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Int16Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_UInt16Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Int32Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_UInt32Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Int64Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_UInt64Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_HalfFloatArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_FloatArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_DoubleArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Decimal128Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Decimal256Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_StructArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_BaseListArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ListArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_LargeListArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ListViewArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_LargeListViewArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_MapArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeListArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_UnionArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_StringArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_BinaryArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_StringViewArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_BinaryViewArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_DictionaryArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ExtensionArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ChunkedArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib__Tabular);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Table);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_RecordBatch);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Device);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_MemoryManager);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Buffer);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_ResizableBuffer);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_NativeFile);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_BufferedInputStream);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_BufferedOutputStream);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_CompressedInputStream);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_CompressedOutputStream);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_RecordBatchReader);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_CacheOptions);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_Codec);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_3lib_StopToken);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_8_parquet_ParquetSchema);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_8_parquet_FileMetaData);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_8_parquet_RowGroupMetaData);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_8_parquet_Statistics);
  Py_CLEAR(clear_module_state->__pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties);
  Py_CLEAR(clear_module_state->__pyx_kp_u_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_array_in_a_Fortran_styl);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Requested_to_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Time_zones_are_not_available_fro);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_np_array_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s__13);
  Py_CLEAR(clear_module_state->__pyx_n_s__4);
  Py_CLEAR(clear_module_state->__pyx_kp_b__5);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_column_indices);
  Py_CLEAR(clear_module_state->__pyx_kp_u_columns_but_the_number_of_colum);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_jollyjack_jollyjack_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_s_jollyjack_jollyjack_cython_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_metadata);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_np_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy__core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy__core_umath_failed_to_impo);
  Py_CLEAR(clear_module_state->__pyx_n_s_pa);
  Py_CLEAR(clear_module_state->__pyx_n_s_parquet);
  Py_CLEAR(clear_module_state->__pyx_n_s_parquet_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_pq);
  Py_CLEAR(clear_module_state->__pyx_n_s_pre_buffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyarrow);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyarrow_parquet);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_into_numpy);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_into_torch);
  Py_CLEAR(clear_module_state->__pyx_n_s_row_group_indices);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_tensor);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_torch);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_threads);
  Py_CLEAR(clear_module_state->__pyx_n_u_utf8);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_codeobj__11);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_date);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_time);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_datetime);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_timedelta);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_8datetime_tzinfo);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib__Weakrefable);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_IpcWriteOptions);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_IpcReadOptions);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Message);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_MemoryPool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_DataType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ListType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_LargeListType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ListViewType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_LargeListViewType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_MapType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeListType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_StructType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_DictionaryMemo);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_DictionaryType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_TimestampType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Time32Type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Time64Type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_DurationType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Decimal128Type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Decimal256Type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_RunEndEncodedType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_BaseExtensionType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ExtensionType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_FixedShapeTensorType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_PyExtensionType);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib__Metadata);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_KeyValueMetadata);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Field);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Schema);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Scalar);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib__PandasConvertible);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Tensor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_SparseCOOTensor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_SparseCSFTensor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_NullArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_BooleanArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_NumericArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_IntegerArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_FloatingPointArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Int8Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_UInt8Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Int16Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_UInt16Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Int32Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_UInt32Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Int64Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_UInt64Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_HalfFloatArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_FloatArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_DoubleArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Decimal128Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Decimal256Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_StructArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_BaseListArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ListArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_LargeListArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ListViewArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_LargeListViewArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_MapArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_FixedSizeListArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_UnionArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_StringArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_BinaryArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_StringViewArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_BinaryViewArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_DictionaryArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ExtensionArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ChunkedArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib__Tabular);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Table);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_RecordBatch);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Device);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_MemoryManager);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Buffer);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_ResizableBuffer);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_NativeFile);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_BufferedInputStream);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_BufferedOutputStream);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_CompressedInputStream);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_CompressedOutputStream);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_RecordBatchReader);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_CacheOptions);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_Codec);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_3lib_StopToken);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_8_parquet_ParquetSchema);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_8_parquet_FileMetaData);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_8_parquet_RowGroupMetaData);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_8_parquet_Statistics);
  Py_VISIT(traverse_module_state->__pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties);
  Py_VISIT(traverse_module_state->__pyx_kp_u_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_array_in_a_Fortran_styl);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Requested_to_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Time_zones_are_not_available_fro);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_np_array_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s__13);
  Py_VISIT(traverse_module_state->__pyx_n_s__4);
  Py_VISIT(traverse_module_state->__pyx_kp_b__5);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_column_indices);
  Py_VISIT(traverse_module_state->__pyx_kp_u_columns_but_the_number_of_colum);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_jollyjack_jollyjack_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_s_jollyjack_jollyjack_cython_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_metadata);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_np_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy__core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy__core_umath_failed_to_impo);
  Py_VISIT(traverse_module_state->__pyx_n_s_pa);
  Py_VISIT(traverse_module_state->__pyx_n_s_parquet);
  Py_VISIT(traverse_module_state->__pyx_n_s_parquet_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_pq);
  Py_VISIT(traverse_module_state->__pyx_n_s_pre_buffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyarrow);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyarrow_parquet);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_into_numpy);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_into_torch);
  Py_VISIT(traverse_module_state->__pyx_n_s_row_group_indices);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_tensor);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_torch);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_threads);
  Py_VISIT(traverse_module_state->__pyx_n_u_utf8);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_codeobj__11);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_8datetime_date __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_date
#define __pyx_ptype_7cpython_8datetime_time __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_time
#define __pyx_ptype_7cpython_8datetime_datetime __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_datetime
#define __pyx_ptype_7cpython_8datetime_timedelta __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_timedelta
#define __pyx_ptype_7cpython_8datetime_tzinfo __pyx_mstate_global->__pyx_ptype_7cpython_8datetime_tzinfo
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7pyarrow_3lib__Weakrefable __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib__Weakrefable
#define __pyx_ptype_7pyarrow_3lib_IpcWriteOptions __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_IpcWriteOptions
#define __pyx_ptype_7pyarrow_3lib_IpcReadOptions __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_IpcReadOptions
#define __pyx_ptype_7pyarrow_3lib_Message __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Message
#define __pyx_ptype_7pyarrow_3lib_MemoryPool __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_MemoryPool
#define __pyx_ptype_7pyarrow_3lib_DataType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_DataType
#define __pyx_ptype_7pyarrow_3lib_ListType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ListType
#define __pyx_ptype_7pyarrow_3lib_LargeListType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_LargeListType
#define __pyx_ptype_7pyarrow_3lib_ListViewType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ListViewType
#define __pyx_ptype_7pyarrow_3lib_LargeListViewType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_LargeListViewType
#define __pyx_ptype_7pyarrow_3lib_MapType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_MapType
#define __pyx_ptype_7pyarrow_3lib_FixedSizeListType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_FixedSizeListType
#define __pyx_ptype_7pyarrow_3lib_StructType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_StructType
#define __pyx_ptype_7pyarrow_3lib_DictionaryMemo __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_DictionaryMemo
#define __pyx_ptype_7pyarrow_3lib_DictionaryType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_DictionaryType
#define __pyx_ptype_7pyarrow_3lib_TimestampType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_TimestampType
#define __pyx_ptype_7pyarrow_3lib_Time32Type __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Time32Type
#define __pyx_ptype_7pyarrow_3lib_Time64Type __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Time64Type
#define __pyx_ptype_7pyarrow_3lib_DurationType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_DurationType
#define __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType
#define __pyx_ptype_7pyarrow_3lib_Decimal128Type __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Decimal128Type
#define __pyx_ptype_7pyarrow_3lib_Decimal256Type __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Decimal256Type
#define __pyx_ptype_7pyarrow_3lib_RunEndEncodedType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_RunEndEncodedType
#define __pyx_ptype_7pyarrow_3lib_BaseExtensionType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_BaseExtensionType
#define __pyx_ptype_7pyarrow_3lib_ExtensionType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ExtensionType
#define __pyx_ptype_7pyarrow_3lib_FixedShapeTensorType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_FixedShapeTensorType
#define __pyx_ptype_7pyarrow_3lib_PyExtensionType __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_PyExtensionType
#define __pyx_ptype_7pyarrow_3lib__Metadata __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib__Metadata
#define __pyx_ptype_7pyarrow_3lib_KeyValueMetadata __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_KeyValueMetadata
#define __pyx_ptype_7pyarrow_3lib_Field __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Field
#define __pyx_ptype_7pyarrow_3lib_Schema __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Schema
#define __pyx_ptype_7pyarrow_3lib_Scalar __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Scalar
#define __pyx_ptype_7pyarrow_3lib__PandasConvertible __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib__PandasConvertible
#define __pyx_ptype_7pyarrow_3lib_Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Array
#define __pyx_ptype_7pyarrow_3lib_Tensor __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Tensor
#define __pyx_ptype_7pyarrow_3lib_SparseCSRMatrix __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix
#define __pyx_ptype_7pyarrow_3lib_SparseCSCMatrix __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix
#define __pyx_ptype_7pyarrow_3lib_SparseCOOTensor __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_SparseCOOTensor
#define __pyx_ptype_7pyarrow_3lib_SparseCSFTensor __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_SparseCSFTensor
#define __pyx_ptype_7pyarrow_3lib_NullArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_NullArray
#define __pyx_ptype_7pyarrow_3lib_BooleanArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_BooleanArray
#define __pyx_ptype_7pyarrow_3lib_NumericArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_NumericArray
#define __pyx_ptype_7pyarrow_3lib_IntegerArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_IntegerArray
#define __pyx_ptype_7pyarrow_3lib_FloatingPointArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_FloatingPointArray
#define __pyx_ptype_7pyarrow_3lib_Int8Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Int8Array
#define __pyx_ptype_7pyarrow_3lib_UInt8Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_UInt8Array
#define __pyx_ptype_7pyarrow_3lib_Int16Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Int16Array
#define __pyx_ptype_7pyarrow_3lib_UInt16Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_UInt16Array
#define __pyx_ptype_7pyarrow_3lib_Int32Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Int32Array
#define __pyx_ptype_7pyarrow_3lib_UInt32Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_UInt32Array
#define __pyx_ptype_7pyarrow_3lib_Int64Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Int64Array
#define __pyx_ptype_7pyarrow_3lib_UInt64Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_UInt64Array
#define __pyx_ptype_7pyarrow_3lib_HalfFloatArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_HalfFloatArray
#define __pyx_ptype_7pyarrow_3lib_FloatArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_FloatArray
#define __pyx_ptype_7pyarrow_3lib_DoubleArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_DoubleArray
#define __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray
#define __pyx_ptype_7pyarrow_3lib_Decimal128Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Decimal128Array
#define __pyx_ptype_7pyarrow_3lib_Decimal256Array __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Decimal256Array
#define __pyx_ptype_7pyarrow_3lib_StructArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_StructArray
#define __pyx_ptype_7pyarrow_3lib_BaseListArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_BaseListArray
#define __pyx_ptype_7pyarrow_3lib_ListArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ListArray
#define __pyx_ptype_7pyarrow_3lib_LargeListArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_LargeListArray
#define __pyx_ptype_7pyarrow_3lib_ListViewArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ListViewArray
#define __pyx_ptype_7pyarrow_3lib_LargeListViewArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_LargeListViewArray
#define __pyx_ptype_7pyarrow_3lib_MapArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_MapArray
#define __pyx_ptype_7pyarrow_3lib_FixedSizeListArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_FixedSizeListArray
#define __pyx_ptype_7pyarrow_3lib_UnionArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_UnionArray
#define __pyx_ptype_7pyarrow_3lib_StringArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_StringArray
#define __pyx_ptype_7pyarrow_3lib_BinaryArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_BinaryArray
#define __pyx_ptype_7pyarrow_3lib_StringViewArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_StringViewArray
#define __pyx_ptype_7pyarrow_3lib_BinaryViewArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_BinaryViewArray
#define __pyx_ptype_7pyarrow_3lib_DictionaryArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_DictionaryArray
#define __pyx_ptype_7pyarrow_3lib_ExtensionArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ExtensionArray
#define __pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray
#define __pyx_ptype_7pyarrow_3lib_ChunkedArray __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ChunkedArray
#define __pyx_ptype_7pyarrow_3lib__Tabular __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib__Tabular
#define __pyx_ptype_7pyarrow_3lib_Table __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Table
#define __pyx_ptype_7pyarrow_3lib_RecordBatch __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_RecordBatch
#define __pyx_ptype_7pyarrow_3lib_Device __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Device
#define __pyx_ptype_7pyarrow_3lib_MemoryManager __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_MemoryManager
#define __pyx_ptype_7pyarrow_3lib_Buffer __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Buffer
#define __pyx_ptype_7pyarrow_3lib_ResizableBuffer __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_ResizableBuffer
#define __pyx_ptype_7pyarrow_3lib_NativeFile __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_NativeFile
#define __pyx_ptype_7pyarrow_3lib_BufferedInputStream __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_BufferedInputStream
#define __pyx_ptype_7pyarrow_3lib_BufferedOutputStream __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_BufferedOutputStream
#define __pyx_ptype_7pyarrow_3lib_CompressedInputStream __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_CompressedInputStream
#define __pyx_ptype_7pyarrow_3lib_CompressedOutputStream __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_CompressedOutputStream
#define __pyx_ptype_7pyarrow_3lib__CRecordBatchWriter __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter
#define __pyx_ptype_7pyarrow_3lib_RecordBatchReader __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_RecordBatchReader
#define __pyx_ptype_7pyarrow_3lib_CacheOptions __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_CacheOptions
#define __pyx_ptype_7pyarrow_3lib_Codec __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_Codec
#define __pyx_ptype_7pyarrow_3lib_StopToken __pyx_mstate_global->__pyx_ptype_7pyarrow_3lib_StopToken
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties __pyx_mstate_global->__pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties
#define __pyx_ptype_7pyarrow_8_parquet_ParquetSchema __pyx_mstate_global->__pyx_ptype_7pyarrow_8_parquet_ParquetSchema
#define __pyx_ptype_7pyarrow_8_parquet_FileMetaData __pyx_mstate_global->__pyx_ptype_7pyarrow_8_parquet_FileMetaData
#define __pyx_ptype_7pyarrow_8_parquet_RowGroupMetaData __pyx_mstate_global->__pyx_ptype_7pyarrow_8_parquet_RowGroupMetaData
#define __pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData __pyx_mstate_global->__pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData
#define __pyx_ptype_7pyarrow_8_parquet_Statistics __pyx_mstate_global->__pyx_ptype_7pyarrow_8_parquet_Statistics
#define __pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties __pyx_mstate_global->__pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_kp_u_2 __pyx_mstate_global->__pyx_kp_u_2
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_kp_u_Expected_array_in_a_Fortran_styl __pyx_mstate_global->__pyx_kp_u_Expected_array_in_a_Fortran_styl
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_u_Requested_to_read __pyx_mstate_global->__pyx_kp_u_Requested_to_read
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_kp_u_Time_zones_are_not_available_fro __pyx_mstate_global->__pyx_kp_u_Time_zones_are_not_available_fro
#define __pyx_kp_u_Unexpected_np_array_ndim __pyx_mstate_global->__pyx_kp_u_Unexpected_np_array_ndim
#define __pyx_n_s__13 __pyx_mstate_global->__pyx_n_s__13
#define __pyx_n_s__4 __pyx_mstate_global->__pyx_n_s__4
#define __pyx_kp_b__5 __pyx_mstate_global->__pyx_kp_b__5
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_column_indices __pyx_mstate_global->__pyx_n_s_column_indices
#define __pyx_kp_u_columns_but_the_number_of_colum __pyx_mstate_global->__pyx_kp_u_columns_but_the_number_of_colum
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_jollyjack_jollyjack_cython __pyx_mstate_global->__pyx_n_s_jollyjack_jollyjack_cython
#define __pyx_kp_s_jollyjack_jollyjack_cython_pyx __pyx_mstate_global->__pyx_kp_s_jollyjack_jollyjack_cython_pyx
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_metadata __pyx_mstate_global->__pyx_n_s_metadata
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_np_array __pyx_mstate_global->__pyx_n_s_np_array
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_u_numpy__core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy__core_multiarray_failed_to
#define __pyx_kp_u_numpy__core_umath_failed_to_impo __pyx_mstate_global->__pyx_kp_u_numpy__core_umath_failed_to_impo
#define __pyx_n_s_pa __pyx_mstate_global->__pyx_n_s_pa
#define __pyx_n_s_parquet __pyx_mstate_global->__pyx_n_s_parquet
#define __pyx_n_s_parquet_path __pyx_mstate_global->__pyx_n_s_parquet_path
#define __pyx_n_s_pq __pyx_mstate_global->__pyx_n_s_pq
#define __pyx_n_s_pre_buffer __pyx_mstate_global->__pyx_n_s_pre_buffer
#define __pyx_n_s_pyarrow __pyx_mstate_global->__pyx_n_s_pyarrow
#define __pyx_n_s_pyarrow_parquet __pyx_mstate_global->__pyx_n_s_pyarrow_parquet
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_read_into_numpy __pyx_mstate_global->__pyx_n_s_read_into_numpy
#define __pyx_n_s_read_into_torch __pyx_mstate_global->__pyx_n_s_read_into_torch
#define __pyx_n_s_row_group_indices __pyx_mstate_global->__pyx_n_s_row_group_indices
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_tensor __pyx_mstate_global->__pyx_n_s_tensor
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_torch __pyx_mstate_global->__pyx_n_s_torch
#define __pyx_n_s_use_threads __pyx_mstate_global->__pyx_n_s_use_threads
#define __pyx_n_u_utf8 __pyx_mstate_global->__pyx_n_u_utf8
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_codeobj__11 __pyx_mstate_global->__pyx_codeobj__11
/* #### Code section: module_code ### */

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
static std::string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length
#line 13 "string.from_py"
;
  char const *__pyx_v_data
#line 13 "string.from_py"
;

#line 13 "string.from_py"
  std::string __pyx_r;

#line 13 "string.from_py"
  char const *__pyx_t_1;

#line 13 "string.from_py"
  std::string __pyx_t_2;

#line 13 "string.from_py"
  int __pyx_lineno = 0;

#line 13 "string.from_py"
  const char *__pyx_filename = NULL;

#line 13 "string.from_py"
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */

#line 14 "string.from_py"
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */

#line 15 "string.from_py"
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "string.from_py"
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 16 "string.from_py"
  try {

#line 16 "string.from_py"
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);

#line 16 "string.from_py"
  } catch(...) {

#line 16 "string.from_py"
    __Pyx_CppExn2PyErr();

#line 16 "string.from_py"
    __PYX_ERR(1, 16, __pyx_L1_error)

#line 16 "string.from_py"
  }

#line 16 "string.from_py"
  __pyx_r = __pyx_t_2;

#line 16 "string.from_py"
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_6libcpp_6string_std__in_string")
 * cdef string __pyx_convert_string_from_py_6libcpp_6string_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
  /* function exit code */

#line 13 "string.from_py"
  __pyx_L1_error:;

#line 13 "string.from_py"
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "string.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 13 "string.from_py"
  __pyx_L0:;

#line 13 "string.from_py"
  return __pyx_r;

#line 13 "string.from_py"
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v
#line 45 "vector.from_py"
;
  PyObject *__pyx_v_item = NULL
#line 45 "vector.from_py"
;

#line 45 "vector.from_py"
  std::vector<int>  __pyx_r;

#line 45 "vector.from_py"
  __Pyx_RefNannyDeclarations

#line 45 "vector.from_py"
  PyObject *__pyx_t_1 = NULL;

#line 45 "vector.from_py"
  Py_ssize_t __pyx_t_2;

#line 45 "vector.from_py"
  PyObject *(*__pyx_t_3)(PyObject *);

#line 45 "vector.from_py"
  PyObject *__pyx_t_4 = NULL;

#line 45 "vector.from_py"
  int __pyx_t_5;

#line 45 "vector.from_py"
  int __pyx_lineno = 0;

#line 45 "vector.from_py"
  const char *__pyx_filename = NULL;

#line 45 "vector.from_py"
  int __pyx_clineno = 0;

#line 45 "vector.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 1);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {

#line 47 "vector.from_py"
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1);

#line 47 "vector.from_py"
    __pyx_t_2 = 0;

#line 47 "vector.from_py"
    __pyx_t_3 = NULL;

#line 47 "vector.from_py"
  } else {
    __pyx_t_2 = -1; 
#line 47 "vector.from_py"
__pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
    __Pyx_GOTREF(__pyx_t_1);

#line 47 "vector.from_py"
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  for (;;) {

#line 47 "vector.from_py"
    if (likely(!__pyx_t_3)) {

#line 47 "vector.from_py"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 47 "vector.from_py"
        {

#line 47 "vector.from_py"
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);

#line 47 "vector.from_py"
          #if !CYTHON_ASSUME_SAFE_MACROS

#line 47 "vector.from_py"
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
          #endif

#line 47 "vector.from_py"
          if (__pyx_t_2 >= __pyx_temp) break;

#line 47 "vector.from_py"
        }

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      } else {

#line 47 "vector.from_py"
        {

#line 47 "vector.from_py"
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);

#line 47 "vector.from_py"
          #if !CYTHON_ASSUME_SAFE_MACROS

#line 47 "vector.from_py"
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
          #endif

#line 47 "vector.from_py"
          if (__pyx_t_2 >= __pyx_temp) break;

#line 47 "vector.from_py"
        }

#line 47 "vector.from_py"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 47 "vector.from_py"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        #else

#line 47 "vector.from_py"
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
        #endif

#line 47 "vector.from_py"
      }
    } else 
#line 47 "vector.from_py"
{

#line 47 "vector.from_py"
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);

#line 47 "vector.from_py"
      if (unlikely(!__pyx_t_4)) {

#line 47 "vector.from_py"
        PyObject* exc_type = PyErr_Occurred();

#line 47 "vector.from_py"
        if (exc_type) {

#line 47 "vector.from_py"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 47 "vector.from_py"
          else __PYX_ERR(1, 47, __pyx_L1_error)

#line 47 "vector.from_py"
        }

#line 47 "vector.from_py"
        break;

#line 47 "vector.from_py"
      }

#line 47 "vector.from_py"
      __Pyx_GOTREF(__pyx_t_4);

#line 47 "vector.from_py"
    }

#line 47 "vector.from_py"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);

#line 47 "vector.from_py"
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */

#line 48 "vector.from_py"
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)

#line 48 "vector.from_py"
    try {

#line 48 "vector.from_py"
      __pyx_v_v.push_back(((int)__pyx_t_5));

#line 48 "vector.from_py"
    } catch(...) {

#line 48 "vector.from_py"
      __Pyx_CppExn2PyErr();

#line 48 "vector.from_py"
      __PYX_ERR(1, 48, __pyx_L1_error)

#line 48 "vector.from_py"
    }

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */

#line 47 "vector.from_py"
  }

#line 47 "vector.from_py"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 49 "vector.from_py"
  __pyx_r = __pyx_v_v;

#line 49 "vector.from_py"
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

#line 45 "vector.from_py"


#line 45 "vector.from_py"
  /* function exit code */

#line 45 "vector.from_py"
  __pyx_L1_error:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_t_4);

#line 45 "vector.from_py"
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "vector.from_py"
  __Pyx_pretend_to_initialize(&__pyx_r);

#line 45 "vector.from_py"
  __pyx_L0:;

#line 45 "vector.from_py"
  __Pyx_XDECREF(__pyx_v_item);

#line 45 "vector.from_py"
  __Pyx_RefNannyFinishContext();

#line 45 "vector.from_py"
  return __pyx_r;

#line 45 "vector.from_py"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":286
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self) {

#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":287
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 287 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyDataType_ELSIZE(__pyx_v_self);

#line 287 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":286
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 286 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":290
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self) {

#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":291
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use fields/names with care as they may be NULL.  You must check
 */

#line 291 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyDataType_ALIGNMENT(__pyx_v_self);

#line 291 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":290
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 290 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":296
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self) {

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1;

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("fields", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":297
 *         @property
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 297 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 297 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyDataType_FIELDS(__pyx_v_self);

#line 297 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_t_1));

#line 297 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 297 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":296
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 296 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":300
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self) {

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1;

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("names", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":301
 *         @property
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use PyDataType_HASSUBARRAY to test whether this field is
 */

#line 301 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 301 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyDataType_NAMES(__pyx_v_self);

#line 301 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_INCREF(((PyObject*)__pyx_t_1));

#line 301 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = ((PyObject*)__pyx_t_1);

#line 301 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":300
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 300 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":307
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self) {

#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyArray_ArrayDescr *__pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":308
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 308 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyDataType_SUBARRAY(__pyx_v_self);

#line 308 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":307
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 307 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":311
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self) {

#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_uint64 __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":313
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 313 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyDataType_FLAGS(__pyx_v_self);

#line 313 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":311
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 311 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":323
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self) {

#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":325
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 325 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_MultiIter_NUMITER(__pyx_v_self);

#line 325 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":323
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 323 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":328
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self) {

#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":330
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 330 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_MultiIter_SIZE(__pyx_v_self);

#line 330 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":328
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 328 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":333
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self) {

#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":335
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 335 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_MultiIter_INDEX(__pyx_v_self);

#line 335 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":333
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 333 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":338
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self) {

#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":340
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 340 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_MultiIter_NDIM(__pyx_v_self);

#line 340 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":338
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 338 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":343
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self) {

#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp *__pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":345
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 345 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_MultiIter_DIMS(__pyx_v_self);

#line 345 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":343
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 343 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":348
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self) {

#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  void **__pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":351
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 *             return PyArray_MultiIter_ITERS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 351 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_MultiIter_ITERS(__pyx_v_self);

#line 351 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":348
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 348 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":366
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {

#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":369
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 369 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_BASE(__pyx_v_self);

#line 369 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":366
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 366 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":372
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyArray_Descr *__pyx_r = NULL;

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyArray_Descr *__pyx_t_1;

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("descr", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":375
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 375 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 375 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);

#line 375 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));

#line 375 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);

#line 375 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":372
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 372 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":378
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {

#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":381
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 381 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_NDIM(__pyx_v_self);

#line 381 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":378
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 378 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":384
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {

#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp *__pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":389
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 389 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_DIMS(__pyx_v_self);

#line 389 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":384
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 384 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":392
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {

#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp *__pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":396
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 396 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_STRIDES(__pyx_v_self);

#line 396 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":392
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 392 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":399
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {

#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_intp __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":402
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 402 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_SIZE(__pyx_v_self);

#line 402 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":399
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 399 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":405
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {

#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  char *__pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":411
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 411 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyArray_BYTES(__pyx_v_self);

#line 411 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":405
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 405 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":806
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":807
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */

#line 807 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 807 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 807, __pyx_L1_error)

#line 807 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 807 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = __pyx_t_1;

#line 807 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = 0;

#line 807 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":806
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 806 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":809
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":810
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */

#line 810 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 810 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 810, __pyx_L1_error)

#line 810 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 810 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = __pyx_t_1;

#line 810 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = 0;

#line 810 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":809
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 809 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":812
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":813
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */

#line 813 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 813 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 813, __pyx_L1_error)

#line 813 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 813 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = __pyx_t_1;

#line 813 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = 0;

#line 813 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":812
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 812 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":815
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":816
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */

#line 816 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 816 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 816, __pyx_L1_error)

#line 816 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 816 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = __pyx_t_1;

#line 816 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = 0;

#line 816 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":815
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 815 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":818
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":819
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */

#line 819 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 819 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 819, __pyx_L1_error)

#line 819 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 819 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = __pyx_t_1;

#line 819 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = 0;

#line 819 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":818
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 818 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":821
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_t_1;

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_2;

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":822
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */

#line 822 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);

#line 822 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  if (__pyx_t_1) {

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":823
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */

#line 823 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 823 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_t_2 = __pyx_f_5numpy_5dtype_8subarray_subarray(__pyx_v_d)->shape;

#line 823 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_INCREF(((PyObject*)__pyx_t_2));

#line 823 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_r = ((PyObject*)__pyx_t_2);

#line 823 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L0;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":822
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */

#line 822 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  }

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":825
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 825 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /*else*/ {

#line 825 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 825 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_INCREF(__pyx_empty_tuple);

#line 825 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_r = __pyx_empty_tuple;

#line 825 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L0;

#line 825 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  }

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":821
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 821 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1009
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_t_1;

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1010
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */

#line 1010 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  Py_INCREF(__pyx_v_base);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1011
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */

#line 1011 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 1011, __pyx_L1_error)

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1009
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1009 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1013
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base
#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
;

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_r = NULL;

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_t_1;

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("get_array_base", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1014
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */

#line 1014 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1015
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */

#line 1015 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_t_1 = (__pyx_v_base == NULL);

#line 1015 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  if (__pyx_t_1) {

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1016
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */

#line 1016 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 1016 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1016 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L0;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1015
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */

#line 1015 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  }

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1017
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */

#line 1017 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 1017 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_base));

#line 1017 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = ((PyObject *)__pyx_v_base);

#line 1017 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1013
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1013 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1021
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_t_4;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_5 = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_7 = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_8 = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("import_array", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1022
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  {

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_PyThreadState_declare

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_PyThreadState_assign

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_1);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_2);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_3);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    /*try:*/ {

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1023
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")
 */

#line 1023 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1023, __pyx_L3_error)

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1022
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    }

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L8_try_end;

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L3_error:;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1024
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 */

#line 1024 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 1024 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    if (__pyx_t_4) {

#line 1024 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1024 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1024, __pyx_L5_except_error)

#line 1024 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_5);

#line 1024 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_6);

#line 1024 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1025
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1025, __pyx_L5_except_error)

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __PYX_ERR(2, 1025, __pyx_L5_except_error)

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    }

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L5_except_error;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1022
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L5_except_error:;

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L1_error;

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L8_try_end:;

#line 1022 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  }

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1021
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_7);

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = -1;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1021 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1027
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_t_4;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_5 = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_7 = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_8 = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("import_umath", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1028
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  {

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_PyThreadState_declare

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_PyThreadState_assign

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_1);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_2);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_3);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    /*try:*/ {

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1029
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */

#line 1029 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1029, __pyx_L3_error)

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1028
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    }

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L8_try_end;

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L3_error:;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1030
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */

#line 1030 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 1030 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    if (__pyx_t_4) {

#line 1030 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1030 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1030, __pyx_L5_except_error)

#line 1030 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_5);

#line 1030 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_6);

#line 1030 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1031
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1031, __pyx_L5_except_error)

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __PYX_ERR(2, 1031, __pyx_L5_except_error)

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    }

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L5_except_error;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1028
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L5_except_error:;

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L1_error;

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L8_try_end:;

#line 1028 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  }

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1027
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_7);

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = -1;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1027 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1033
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyDeclarations

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_t_4;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_5 = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_6 = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_7 = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  PyObject *__pyx_t_8 = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_lineno = 0;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  const char *__pyx_filename = NULL;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_clineno = 0;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannySetupContext("import_ufunc", 1);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  {

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_PyThreadState_declare

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_PyThreadState_assign

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_1);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_2);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGOTREF(__pyx_t_3);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    /*try:*/ {

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1035
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */

#line 1035 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1035, __pyx_L3_error)

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    }

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L8_try_end;

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L3_error:;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1036
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */

#line 1036 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));

#line 1036 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    if (__pyx_t_4) {

#line 1036 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1036 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1036, __pyx_L5_except_error)

#line 1036 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_5);

#line 1036 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_6);

#line 1036 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1037
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1037 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1037, __pyx_L5_except_error)

#line 1037 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 1037 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 1037 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1037 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
      __PYX_ERR(2, 1037, __pyx_L5_except_error)

#line 1037 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    }

#line 1037 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L5_except_error;

    /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L5_except_error:;

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_1);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    goto __pyx_L1_error;

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
    __pyx_L8_try_end:;

#line 1034 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  }

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1033
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = 0;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L1_error:;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_7);

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = -1;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_RefNannyFinishContext();

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1033 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1040
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {

#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1052
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1052 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));

#line 1052 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1040
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1040 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1055
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {

#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  int __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1067
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1067 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));

#line 1067 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1055
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1055 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1070
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {

#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_datetime __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1077
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1077 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;

#line 1077 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1070
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1070 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1080
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {

#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  npy_timedelta __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1084
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1084 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;

#line 1084 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1080
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1080 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1087
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {

#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1091
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1091 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);

#line 1091 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  goto __pyx_L0;

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1087
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"


#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  /* function exit code */

#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_L0:;

#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  return __pyx_r;

#line 1087 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
}

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

#line 19 "cpython/complex.pxd"


#line 19 "cpython/complex.pxd"
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {

#line 19 "cpython/complex.pxd"
  double __pyx_r;

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self) noexcept:
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 20 "cpython/complex.pxd"
  __pyx_r = __pyx_v_self->cval.real;

#line 20 "cpython/complex.pxd"
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

#line 19 "cpython/complex.pxd"


#line 19 "cpython/complex.pxd"
  /* function exit code */

#line 19 "cpython/complex.pxd"
  __pyx_L0:;

#line 19 "cpython/complex.pxd"
  return __pyx_r;

#line 19 "cpython/complex.pxd"
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

#line 23 "cpython/complex.pxd"


#line 23 "cpython/complex.pxd"
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {

#line 23 "cpython/complex.pxd"
  double __pyx_r;

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self) noexcept:
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */

#line 24 "cpython/complex.pxd"
  __pyx_r = __pyx_v_self->cval.imag;

#line 24 "cpython/complex.pxd"
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

#line 23 "cpython/complex.pxd"


#line 23 "cpython/complex.pxd"
  /* function exit code */

#line 23 "cpython/complex.pxd"
  __pyx_L0:;

#line 23 "cpython/complex.pxd"
  return __pyx_r;

#line 23 "cpython/complex.pxd"
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

#line 112 "cpython/contextvars.pxd"


#line 112 "cpython/contextvars.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {

#line 112 "cpython/contextvars.pxd"
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value
#line 112 "cpython/contextvars.pxd"
;
  PyObject *__pyx_v_pyvalue = NULL
#line 112 "cpython/contextvars.pxd"
;

#line 112 "cpython/contextvars.pxd"
  PyObject *__pyx_r = NULL;

#line 112 "cpython/contextvars.pxd"
  __Pyx_RefNannyDeclarations

#line 112 "cpython/contextvars.pxd"
  int __pyx_t_1;

#line 112 "cpython/contextvars.pxd"
  int __pyx_t_2;

#line 112 "cpython/contextvars.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 112 "cpython/contextvars.pxd"
  int __pyx_lineno = 0;

#line 112 "cpython/contextvars.pxd"
  const char *__pyx_filename = NULL;

#line 112 "cpython/contextvars.pxd"
  int __pyx_clineno = 0;

#line 112 "cpython/contextvars.pxd"
  __Pyx_RefNannySetupContext("get_value", 1);

#line 112 "cpython/contextvars.pxd"
  if (__pyx_optional_args) {

#line 112 "cpython/contextvars.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 112 "cpython/contextvars.pxd"
      __pyx_v_default_value = __pyx_optional_args->default_value;

#line 112 "cpython/contextvars.pxd"
    }

#line 112 "cpython/contextvars.pxd"
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */

#line 117 "cpython/contextvars.pxd"
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */

#line 118 "cpython/contextvars.pxd"
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */

#line 119 "cpython/contextvars.pxd"
  __pyx_t_2 = (__pyx_v_value == NULL);

#line 119 "cpython/contextvars.pxd"
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */

#line 121 "cpython/contextvars.pxd"
    __Pyx_INCREF(__pyx_v_default_value);

#line 121 "cpython/contextvars.pxd"
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */

#line 119 "cpython/contextvars.pxd"
    goto __pyx_L3;

#line 119 "cpython/contextvars.pxd"
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */

#line 124 "cpython/contextvars.pxd"
  /*else*/ {

#line 124 "cpython/contextvars.pxd"
    __pyx_t_3 = ((PyObject *)__pyx_v_value);

#line 124 "cpython/contextvars.pxd"
    __Pyx_INCREF(__pyx_t_3);

#line 124 "cpython/contextvars.pxd"
    __pyx_v_pyvalue = __pyx_t_3;

#line 124 "cpython/contextvars.pxd"
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */

#line 125 "cpython/contextvars.pxd"
    Py_XDECREF(__pyx_v_value);

#line 125 "cpython/contextvars.pxd"
  }

#line 125 "cpython/contextvars.pxd"
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 126 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 126 "cpython/contextvars.pxd"
  __Pyx_INCREF(__pyx_v_pyvalue);

#line 126 "cpython/contextvars.pxd"
  __pyx_r = __pyx_v_pyvalue;

#line 126 "cpython/contextvars.pxd"
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

#line 112 "cpython/contextvars.pxd"


#line 112 "cpython/contextvars.pxd"
  /* function exit code */

#line 112 "cpython/contextvars.pxd"
  __pyx_L1_error:;

#line 112 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 112 "cpython/contextvars.pxd"
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 112 "cpython/contextvars.pxd"
  __pyx_r = 0;

#line 112 "cpython/contextvars.pxd"
  __pyx_L0:;

#line 112 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_v_pyvalue);

#line 112 "cpython/contextvars.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 112 "cpython/contextvars.pxd"
  __Pyx_RefNannyFinishContext();

#line 112 "cpython/contextvars.pxd"
  return __pyx_r;

#line 112 "cpython/contextvars.pxd"
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

#line 129 "cpython/contextvars.pxd"


#line 129 "cpython/contextvars.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {

#line 129 "cpython/contextvars.pxd"
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value
#line 129 "cpython/contextvars.pxd"
;
  PyObject *__pyx_v_pyvalue = NULL
#line 129 "cpython/contextvars.pxd"
;

#line 129 "cpython/contextvars.pxd"
  PyObject *__pyx_r = NULL;

#line 129 "cpython/contextvars.pxd"
  __Pyx_RefNannyDeclarations

#line 129 "cpython/contextvars.pxd"
  int __pyx_t_1;

#line 129 "cpython/contextvars.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 129 "cpython/contextvars.pxd"
  int __pyx_lineno = 0;

#line 129 "cpython/contextvars.pxd"
  const char *__pyx_filename = NULL;

#line 129 "cpython/contextvars.pxd"
  int __pyx_clineno = 0;

#line 129 "cpython/contextvars.pxd"
  __Pyx_RefNannySetupContext("get_value_no_default", 1);

#line 129 "cpython/contextvars.pxd"
  if (__pyx_optional_args) {

#line 129 "cpython/contextvars.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 129 "cpython/contextvars.pxd"
      __pyx_v_default_value = __pyx_optional_args->default_value;

#line 129 "cpython/contextvars.pxd"
    }

#line 129 "cpython/contextvars.pxd"
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */

#line 135 "cpython/contextvars.pxd"
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */

#line 136 "cpython/contextvars.pxd"
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */

#line 138 "cpython/contextvars.pxd"
  __pyx_t_2 = ((PyObject *)__pyx_v_value);

#line 138 "cpython/contextvars.pxd"
  __Pyx_INCREF(__pyx_t_2);

#line 138 "cpython/contextvars.pxd"
  __pyx_v_pyvalue = __pyx_t_2;

#line 138 "cpython/contextvars.pxd"
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */

#line 139 "cpython/contextvars.pxd"
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */

#line 140 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 140 "cpython/contextvars.pxd"
  __Pyx_INCREF(__pyx_v_pyvalue);

#line 140 "cpython/contextvars.pxd"
  __pyx_r = __pyx_v_pyvalue;

#line 140 "cpython/contextvars.pxd"
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

#line 129 "cpython/contextvars.pxd"


#line 129 "cpython/contextvars.pxd"
  /* function exit code */

#line 129 "cpython/contextvars.pxd"
  __pyx_L1_error:;

#line 129 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_t_2);

#line 129 "cpython/contextvars.pxd"
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 129 "cpython/contextvars.pxd"
  __pyx_r = 0;

#line 129 "cpython/contextvars.pxd"
  __pyx_L0:;

#line 129 "cpython/contextvars.pxd"
  __Pyx_XDECREF(__pyx_v_pyvalue);

#line 129 "cpython/contextvars.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 129 "cpython/contextvars.pxd"
  __Pyx_RefNannyFinishContext();

#line 129 "cpython/contextvars.pxd"
  return __pyx_r;

#line 129 "cpython/contextvars.pxd"
}

/* "cpython/datetime.pxd":72
 *     ctypedef extern class datetime.date[object PyDateTime_Date]:
 *         @property
 *         cdef inline int year(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

#line 72 "cpython/datetime.pxd"


#line 72 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_4year_year(PyDateTime_Date *__pyx_v_self) {

#line 72 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":73
 *         @property
 *         cdef inline int year(self) noexcept:
 *             return PyDateTime_GET_YEAR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 73 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_YEAR(((PyObject *)__pyx_v_self));

#line 73 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":72
 *     ctypedef extern class datetime.date[object PyDateTime_Date]:
 *         @property
 *         cdef inline int year(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

#line 72 "cpython/datetime.pxd"


#line 72 "cpython/datetime.pxd"
  /* function exit code */

#line 72 "cpython/datetime.pxd"
  __pyx_L0:;

#line 72 "cpython/datetime.pxd"
  return __pyx_r;

#line 72 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":76
 * 
 *         @property
 *         cdef inline int month(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

#line 76 "cpython/datetime.pxd"


#line 76 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_5month_month(PyDateTime_Date *__pyx_v_self) {

#line 76 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":77
 *         @property
 *         cdef inline int month(self) noexcept:
 *             return PyDateTime_GET_MONTH(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 77 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_MONTH(((PyObject *)__pyx_v_self));

#line 77 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":76
 * 
 *         @property
 *         cdef inline int month(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

#line 76 "cpython/datetime.pxd"


#line 76 "cpython/datetime.pxd"
  /* function exit code */

#line 76 "cpython/datetime.pxd"
  __pyx_L0:;

#line 76 "cpython/datetime.pxd"
  return __pyx_r;

#line 76 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":80
 * 
 *         @property
 *         cdef inline int day(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

#line 80 "cpython/datetime.pxd"


#line 80 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4date_3day_day(PyDateTime_Date *__pyx_v_self) {

#line 80 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":81
 *         @property
 *         cdef inline int day(self) noexcept:
 *             return PyDateTime_GET_DAY(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.time[object PyDateTime_Time]:
 */

#line 81 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_DAY(((PyObject *)__pyx_v_self));

#line 81 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":80
 * 
 *         @property
 *         cdef inline int day(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

#line 80 "cpython/datetime.pxd"


#line 80 "cpython/datetime.pxd"
  /* function exit code */

#line 80 "cpython/datetime.pxd"
  __pyx_L0:;

#line 80 "cpython/datetime.pxd"
  return __pyx_r;

#line 80 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":85
 *     ctypedef extern class datetime.time[object PyDateTime_Time]:
 *         @property
 *         cdef inline int hour(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_HOUR(self)
 * 
 */

#line 85 "cpython/datetime.pxd"


#line 85 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4hour_hour(PyDateTime_Time *__pyx_v_self) {

#line 85 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":86
 *         @property
 *         cdef inline int hour(self) noexcept:
 *             return PyDateTime_TIME_GET_HOUR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 86 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_HOUR(((PyObject *)__pyx_v_self));

#line 86 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":85
 *     ctypedef extern class datetime.time[object PyDateTime_Time]:
 *         @property
 *         cdef inline int hour(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_HOUR(self)
 * 
 */

#line 85 "cpython/datetime.pxd"


#line 85 "cpython/datetime.pxd"
  /* function exit code */

#line 85 "cpython/datetime.pxd"
  __pyx_L0:;

#line 85 "cpython/datetime.pxd"
  return __pyx_r;

#line 85 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":89
 * 
 *         @property
 *         cdef inline int minute(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MINUTE(self)
 * 
 */

#line 89 "cpython/datetime.pxd"


#line 89 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6minute_minute(PyDateTime_Time *__pyx_v_self) {

#line 89 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":90
 *         @property
 *         cdef inline int minute(self) noexcept:
 *             return PyDateTime_TIME_GET_MINUTE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 90 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_MINUTE(((PyObject *)__pyx_v_self));

#line 90 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":89
 * 
 *         @property
 *         cdef inline int minute(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MINUTE(self)
 * 
 */

#line 89 "cpython/datetime.pxd"


#line 89 "cpython/datetime.pxd"
  /* function exit code */

#line 89 "cpython/datetime.pxd"
  __pyx_L0:;

#line 89 "cpython/datetime.pxd"
  return __pyx_r;

#line 89 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":93
 * 
 *         @property
 *         cdef inline int second(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_SECOND(self)
 * 
 */

#line 93 "cpython/datetime.pxd"


#line 93 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_6second_second(PyDateTime_Time *__pyx_v_self) {

#line 93 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":94
 *         @property
 *         cdef inline int second(self) noexcept:
 *             return PyDateTime_TIME_GET_SECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 94 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_SECOND(((PyObject *)__pyx_v_self));

#line 94 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":93
 * 
 *         @property
 *         cdef inline int second(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_SECOND(self)
 * 
 */

#line 93 "cpython/datetime.pxd"


#line 93 "cpython/datetime.pxd"
  /* function exit code */

#line 93 "cpython/datetime.pxd"
  __pyx_L0:;

#line 93 "cpython/datetime.pxd"
  return __pyx_r;

#line 93 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":97
 * 
 *         @property
 *         cdef inline int microsecond(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MICROSECOND(self)
 * 
 */

#line 97 "cpython/datetime.pxd"


#line 97 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_11microsecond_microsecond(PyDateTime_Time *__pyx_v_self) {

#line 97 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":98
 *         @property
 *         cdef inline int microsecond(self) noexcept:
 *             return PyDateTime_TIME_GET_MICROSECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 98 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_MICROSECOND(((PyObject *)__pyx_v_self));

#line 98 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":97
 * 
 *         @property
 *         cdef inline int microsecond(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_TIME_GET_MICROSECOND(self)
 * 
 */

#line 97 "cpython/datetime.pxd"


#line 97 "cpython/datetime.pxd"
  /* function exit code */

#line 97 "cpython/datetime.pxd"
  __pyx_L0:;

#line 97 "cpython/datetime.pxd"
  return __pyx_r;

#line 97 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":101
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_TIME_GET_TZINFO(self)
 * 
 */

#line 101 "cpython/datetime.pxd"


#line 101 "cpython/datetime.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_4time_6tzinfo_tzinfo(PyDateTime_Time *__pyx_v_self) {

#line 101 "cpython/datetime.pxd"
  PyObject *__pyx_r = NULL;

#line 101 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 101 "cpython/datetime.pxd"
  PyObject *__pyx_t_1;

#line 101 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("tzinfo", 1);

  /* "cpython/datetime.pxd":102
 *         @property
 *         cdef inline object tzinfo(self):
 *             return <object>PyDateTime_TIME_GET_TZINFO(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 102 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 102 "cpython/datetime.pxd"
  __pyx_t_1 = PyDateTime_TIME_GET_TZINFO(((PyObject *)__pyx_v_self));

#line 102 "cpython/datetime.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_t_1));

#line 102 "cpython/datetime.pxd"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 102 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":101
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_TIME_GET_TZINFO(self)
 * 
 */

#line 101 "cpython/datetime.pxd"


#line 101 "cpython/datetime.pxd"
  /* function exit code */

#line 101 "cpython/datetime.pxd"
  __pyx_L0:;

#line 101 "cpython/datetime.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 101 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 101 "cpython/datetime.pxd"
  return __pyx_r;

#line 101 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":105
 * 
 *         @property
 *         cdef inline int fold(self) noexcept:             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_TIME_GET_FOLD(self)
 */

#line 105 "cpython/datetime.pxd"


#line 105 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_4time_4fold_fold(PyDateTime_Time *__pyx_v_self) {

#line 105 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":107
 *         cdef inline int fold(self) noexcept:
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_TIME_GET_FOLD(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.datetime[object PyDateTime_DateTime]:
 */

#line 107 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_FOLD(((PyObject *)__pyx_v_self));

#line 107 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":105
 * 
 *         @property
 *         cdef inline int fold(self) noexcept:             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_TIME_GET_FOLD(self)
 */

#line 105 "cpython/datetime.pxd"


#line 105 "cpython/datetime.pxd"
  /* function exit code */

#line 105 "cpython/datetime.pxd"
  __pyx_L0:;

#line 105 "cpython/datetime.pxd"
  return __pyx_r;

#line 105 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":111
 *     ctypedef extern class datetime.datetime[object PyDateTime_DateTime]:
 *         @property
 *         cdef inline int year(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

#line 111 "cpython/datetime.pxd"


#line 111 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4year_year(PyDateTime_DateTime *__pyx_v_self) {

#line 111 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":112
 *         @property
 *         cdef inline int year(self) noexcept:
 *             return PyDateTime_GET_YEAR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 112 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_YEAR(((PyObject *)__pyx_v_self));

#line 112 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":111
 *     ctypedef extern class datetime.datetime[object PyDateTime_DateTime]:
 *         @property
 *         cdef inline int year(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_YEAR(self)
 * 
 */

#line 111 "cpython/datetime.pxd"


#line 111 "cpython/datetime.pxd"
  /* function exit code */

#line 111 "cpython/datetime.pxd"
  __pyx_L0:;

#line 111 "cpython/datetime.pxd"
  return __pyx_r;

#line 111 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":115
 * 
 *         @property
 *         cdef inline int month(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

#line 115 "cpython/datetime.pxd"


#line 115 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_5month_month(PyDateTime_DateTime *__pyx_v_self) {

#line 115 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":116
 *         @property
 *         cdef inline int month(self) noexcept:
 *             return PyDateTime_GET_MONTH(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 116 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_MONTH(((PyObject *)__pyx_v_self));

#line 116 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":115
 * 
 *         @property
 *         cdef inline int month(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_MONTH(self)
 * 
 */

#line 115 "cpython/datetime.pxd"


#line 115 "cpython/datetime.pxd"
  /* function exit code */

#line 115 "cpython/datetime.pxd"
  __pyx_L0:;

#line 115 "cpython/datetime.pxd"
  return __pyx_r;

#line 115 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":119
 * 
 *         @property
 *         cdef inline int day(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

#line 119 "cpython/datetime.pxd"


#line 119 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_3day_day(PyDateTime_DateTime *__pyx_v_self) {

#line 119 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":120
 *         @property
 *         cdef inline int day(self) noexcept:
 *             return PyDateTime_GET_DAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 120 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_DAY(((PyObject *)__pyx_v_self));

#line 120 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":119
 * 
 *         @property
 *         cdef inline int day(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_GET_DAY(self)
 * 
 */

#line 119 "cpython/datetime.pxd"


#line 119 "cpython/datetime.pxd"
  /* function exit code */

#line 119 "cpython/datetime.pxd"
  __pyx_L0:;

#line 119 "cpython/datetime.pxd"
  return __pyx_r;

#line 119 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":123
 * 
 *         @property
 *         cdef inline int hour(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_HOUR(self)
 * 
 */

#line 123 "cpython/datetime.pxd"


#line 123 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4hour_hour(PyDateTime_DateTime *__pyx_v_self) {

#line 123 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":124
 *         @property
 *         cdef inline int hour(self) noexcept:
 *             return PyDateTime_DATE_GET_HOUR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 124 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_HOUR(((PyObject *)__pyx_v_self));

#line 124 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":123
 * 
 *         @property
 *         cdef inline int hour(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_HOUR(self)
 * 
 */

#line 123 "cpython/datetime.pxd"


#line 123 "cpython/datetime.pxd"
  /* function exit code */

#line 123 "cpython/datetime.pxd"
  __pyx_L0:;

#line 123 "cpython/datetime.pxd"
  return __pyx_r;

#line 123 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":127
 * 
 *         @property
 *         cdef inline int minute(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MINUTE(self)
 * 
 */

#line 127 "cpython/datetime.pxd"


#line 127 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6minute_minute(PyDateTime_DateTime *__pyx_v_self) {

#line 127 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":128
 *         @property
 *         cdef inline int minute(self) noexcept:
 *             return PyDateTime_DATE_GET_MINUTE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 128 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_MINUTE(((PyObject *)__pyx_v_self));

#line 128 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":127
 * 
 *         @property
 *         cdef inline int minute(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MINUTE(self)
 * 
 */

#line 127 "cpython/datetime.pxd"


#line 127 "cpython/datetime.pxd"
  /* function exit code */

#line 127 "cpython/datetime.pxd"
  __pyx_L0:;

#line 127 "cpython/datetime.pxd"
  return __pyx_r;

#line 127 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":131
 * 
 *         @property
 *         cdef inline int second(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_SECOND(self)
 * 
 */

#line 131 "cpython/datetime.pxd"


#line 131 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_6second_second(PyDateTime_DateTime *__pyx_v_self) {

#line 131 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":132
 *         @property
 *         cdef inline int second(self) noexcept:
 *             return PyDateTime_DATE_GET_SECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 132 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_SECOND(((PyObject *)__pyx_v_self));

#line 132 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":131
 * 
 *         @property
 *         cdef inline int second(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_SECOND(self)
 * 
 */

#line 131 "cpython/datetime.pxd"


#line 131 "cpython/datetime.pxd"
  /* function exit code */

#line 131 "cpython/datetime.pxd"
  __pyx_L0:;

#line 131 "cpython/datetime.pxd"
  return __pyx_r;

#line 131 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":135
 * 
 *         @property
 *         cdef inline int microsecond(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MICROSECOND(self)
 * 
 */

#line 135 "cpython/datetime.pxd"


#line 135 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_11microsecond_microsecond(PyDateTime_DateTime *__pyx_v_self) {

#line 135 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":136
 *         @property
 *         cdef inline int microsecond(self) noexcept:
 *             return PyDateTime_DATE_GET_MICROSECOND(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 136 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_MICROSECOND(((PyObject *)__pyx_v_self));

#line 136 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":135
 * 
 *         @property
 *         cdef inline int microsecond(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DATE_GET_MICROSECOND(self)
 * 
 */

#line 135 "cpython/datetime.pxd"


#line 135 "cpython/datetime.pxd"
  /* function exit code */

#line 135 "cpython/datetime.pxd"
  __pyx_L0:;

#line 135 "cpython/datetime.pxd"
  return __pyx_r;

#line 135 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":139
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_DATE_GET_TZINFO(self)
 * 
 */

#line 139 "cpython/datetime.pxd"


#line 139 "cpython/datetime.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_8datetime_6tzinfo_tzinfo(PyDateTime_DateTime *__pyx_v_self) {

#line 139 "cpython/datetime.pxd"
  PyObject *__pyx_r = NULL;

#line 139 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 139 "cpython/datetime.pxd"
  PyObject *__pyx_t_1;

#line 139 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("tzinfo", 1);

  /* "cpython/datetime.pxd":140
 *         @property
 *         cdef inline object tzinfo(self):
 *             return <object>PyDateTime_DATE_GET_TZINFO(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 140 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 140 "cpython/datetime.pxd"
  __pyx_t_1 = PyDateTime_DATE_GET_TZINFO(((PyObject *)__pyx_v_self));

#line 140 "cpython/datetime.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_t_1));

#line 140 "cpython/datetime.pxd"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 140 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":139
 * 
 *         @property
 *         cdef inline object tzinfo(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDateTime_DATE_GET_TZINFO(self)
 * 
 */

#line 139 "cpython/datetime.pxd"


#line 139 "cpython/datetime.pxd"
  /* function exit code */

#line 139 "cpython/datetime.pxd"
  __pyx_L0:;

#line 139 "cpython/datetime.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 139 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 139 "cpython/datetime.pxd"
  return __pyx_r;

#line 139 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":143
 * 
 *         @property
 *         cdef inline int fold(self) noexcept:             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_DATE_GET_FOLD(self)
 */

#line 143 "cpython/datetime.pxd"


#line 143 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_8datetime_4fold_fold(PyDateTime_DateTime *__pyx_v_self) {

#line 143 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":145
 *         cdef inline int fold(self) noexcept:
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_DATE_GET_FOLD(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.timedelta[object PyDateTime_Delta]:
 */

#line 145 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_FOLD(((PyObject *)__pyx_v_self));

#line 145 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":143
 * 
 *         @property
 *         cdef inline int fold(self) noexcept:             # <<<<<<<<<<<<<<
 *             # For Python < 3.6 this returns 0 no matter what
 *             return PyDateTime_DATE_GET_FOLD(self)
 */

#line 143 "cpython/datetime.pxd"


#line 143 "cpython/datetime.pxd"
  /* function exit code */

#line 143 "cpython/datetime.pxd"
  __pyx_L0:;

#line 143 "cpython/datetime.pxd"
  return __pyx_r;

#line 143 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":149
 *     ctypedef extern class datetime.timedelta[object PyDateTime_Delta]:
 *         @property
 *         cdef inline int day(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_DAYS(self)
 * 
 */

#line 149 "cpython/datetime.pxd"


#line 149 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_3day_day(PyDateTime_Delta *__pyx_v_self) {

#line 149 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":150
 *         @property
 *         cdef inline int day(self) noexcept:
 *             return PyDateTime_DELTA_GET_DAYS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 150 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DELTA_GET_DAYS(((PyObject *)__pyx_v_self));

#line 150 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":149
 *     ctypedef extern class datetime.timedelta[object PyDateTime_Delta]:
 *         @property
 *         cdef inline int day(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_DAYS(self)
 * 
 */

#line 149 "cpython/datetime.pxd"


#line 149 "cpython/datetime.pxd"
  /* function exit code */

#line 149 "cpython/datetime.pxd"
  __pyx_L0:;

#line 149 "cpython/datetime.pxd"
  return __pyx_r;

#line 149 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":153
 * 
 *         @property
 *         cdef inline int second(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_SECONDS(self)
 * 
 */

#line 153 "cpython/datetime.pxd"


#line 153 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_6second_second(PyDateTime_Delta *__pyx_v_self) {

#line 153 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":154
 *         @property
 *         cdef inline int second(self) noexcept:
 *             return PyDateTime_DELTA_GET_SECONDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */

#line 154 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DELTA_GET_SECONDS(((PyObject *)__pyx_v_self));

#line 154 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":153
 * 
 *         @property
 *         cdef inline int second(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_SECONDS(self)
 * 
 */

#line 153 "cpython/datetime.pxd"


#line 153 "cpython/datetime.pxd"
  /* function exit code */

#line 153 "cpython/datetime.pxd"
  __pyx_L0:;

#line 153 "cpython/datetime.pxd"
  return __pyx_r;

#line 153 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":157
 * 
 *         @property
 *         cdef inline int microsecond(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_MICROSECONDS(self)
 * 
 */

#line 157 "cpython/datetime.pxd"


#line 157 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_9timedelta_11microsecond_microsecond(PyDateTime_Delta *__pyx_v_self) {

#line 157 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":158
 *         @property
 *         cdef inline int microsecond(self) noexcept:
 *             return PyDateTime_DELTA_GET_MICROSECONDS(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef extern class datetime.tzinfo[object PyDateTime_TZInfo]:
 */

#line 158 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DELTA_GET_MICROSECONDS(((PyObject *)__pyx_v_self));

#line 158 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":157
 * 
 *         @property
 *         cdef inline int microsecond(self) noexcept:             # <<<<<<<<<<<<<<
 *             return PyDateTime_DELTA_GET_MICROSECONDS(self)
 * 
 */

#line 157 "cpython/datetime.pxd"


#line 157 "cpython/datetime.pxd"
  /* function exit code */

#line 157 "cpython/datetime.pxd"
  __pyx_L0:;

#line 157 "cpython/datetime.pxd"
  return __pyx_r;

#line 157 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":282
 * # Datetime C API initialization function.
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime() noexcept:             # <<<<<<<<<<<<<<
 *     PyDateTime_IMPORT
 * 
 */

#line 282 "cpython/datetime.pxd"


#line 282 "cpython/datetime.pxd"
static CYTHON_INLINE void __pyx_f_7cpython_8datetime_import_datetime(void) {

  /* "cpython/datetime.pxd":283
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime() noexcept:
 *     PyDateTime_IMPORT             # <<<<<<<<<<<<<<
 * 
 * # Create date object using DateTime CAPI factory function.
 */

#line 283 "cpython/datetime.pxd"
  (void)(PyDateTime_IMPORT);

  /* "cpython/datetime.pxd":282
 * # Datetime C API initialization function.
 * # You have to call it before any usage of DateTime CAPI functions.
 * cdef inline void import_datetime() noexcept:             # <<<<<<<<<<<<<<
 *     PyDateTime_IMPORT
 * 
 */

#line 282 "cpython/datetime.pxd"


#line 282 "cpython/datetime.pxd"
  /* function exit code */

#line 282 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":287
 * # Create date object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline date date_new(int year, int month, int day):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)
 * 
 */

#line 287 "cpython/datetime.pxd"


#line 287 "cpython/datetime.pxd"
static CYTHON_INLINE PyDateTime_Date *__pyx_f_7cpython_8datetime_date_new(int __pyx_v_year, int __pyx_v_month, int __pyx_v_day) {

#line 287 "cpython/datetime.pxd"
  PyDateTime_Date *__pyx_r = NULL;

#line 287 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 287 "cpython/datetime.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 287 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 287 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 287 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 287 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("date_new", 1);

  /* "cpython/datetime.pxd":288
 * # Note, there are no range checks for any of the arguments.
 * cdef inline date date_new(int year, int month, int day):
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)             # <<<<<<<<<<<<<<
 * 
 * # Create time object using DateTime CAPI factory function
 */

#line 288 "cpython/datetime.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 288 "cpython/datetime.pxd"
  __pyx_t_1 = ((PyObject *)PyDateTimeAPI->Date_FromDate(__pyx_v_year, __pyx_v_month, __pyx_v_day, PyDateTimeAPI->DateType)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 288, __pyx_L1_error)

#line 288 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 288 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_Date *)__pyx_t_1);

#line 288 "cpython/datetime.pxd"
  __pyx_t_1 = 0;

#line 288 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":287
 * # Create date object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline date date_new(int year, int month, int day):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromDate(year, month, day, PyDateTimeAPI.DateType)
 * 
 */

#line 287 "cpython/datetime.pxd"


#line 287 "cpython/datetime.pxd"
  /* function exit code */

#line 287 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 287 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 287 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.date_new", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 287 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 287 "cpython/datetime.pxd"
  __pyx_L0:;

#line 287 "cpython/datetime.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 287 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 287 "cpython/datetime.pxd"
  return __pyx_r;

#line 287 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":292
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)
 * 
 */

#line 292 "cpython/datetime.pxd"


#line 292 "cpython/datetime.pxd"
static CYTHON_INLINE PyDateTime_Time *__pyx_f_7cpython_8datetime_time_new(int __pyx_v_hour, int __pyx_v_minute, int __pyx_v_second, int __pyx_v_microsecond, PyObject *__pyx_v_tz, struct __pyx_opt_args_7cpython_8datetime_time_new *__pyx_optional_args) {

#line 292 "cpython/datetime.pxd"
  int __pyx_v_fold = ((int)0);

#line 292 "cpython/datetime.pxd"
  PyDateTime_Time *__pyx_r = NULL;

#line 292 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 292 "cpython/datetime.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 292 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 292 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 292 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 292 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("time_new", 1);

#line 292 "cpython/datetime.pxd"
  if (__pyx_optional_args) {

#line 292 "cpython/datetime.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 292 "cpython/datetime.pxd"
      __pyx_v_fold = __pyx_optional_args->fold;

#line 292 "cpython/datetime.pxd"
    }

#line 292 "cpython/datetime.pxd"
  }

  /* "cpython/datetime.pxd":293
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)             # <<<<<<<<<<<<<<
 * 
 * # Create datetime object using DateTime CAPI factory function.
 */

#line 293 "cpython/datetime.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 293 "cpython/datetime.pxd"
  __pyx_t_1 = ((PyObject *)__Pyx_DateTime_TimeWithFold(__pyx_v_hour, __pyx_v_minute, __pyx_v_second, __pyx_v_microsecond, __pyx_v_tz, __pyx_v_fold)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 293, __pyx_L1_error)

#line 293 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 293 "cpython/datetime.pxd"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7cpython_8datetime_time))))) __PYX_ERR(4, 293, __pyx_L1_error)

#line 293 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_Time *)__pyx_t_1);

#line 293 "cpython/datetime.pxd"
  __pyx_t_1 = 0;

#line 293 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":292
 * # Create time object using DateTime CAPI factory function
 * # Note, there are no range checks for any of the arguments.
 * cdef inline time time_new(int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_TimeWithFold(hour, minute, second, microsecond, tz, fold)
 * 
 */

#line 292 "cpython/datetime.pxd"


#line 292 "cpython/datetime.pxd"
  /* function exit code */

#line 292 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 292 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 292 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.time_new", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 292 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 292 "cpython/datetime.pxd"
  __pyx_L0:;

#line 292 "cpython/datetime.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 292 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 292 "cpython/datetime.pxd"
  return __pyx_r;

#line 292 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":297
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)
 * 
 */

#line 297 "cpython/datetime.pxd"


#line 297 "cpython/datetime.pxd"
static CYTHON_INLINE PyDateTime_DateTime *__pyx_f_7cpython_8datetime_datetime_new(int __pyx_v_year, int __pyx_v_month, int __pyx_v_day, int __pyx_v_hour, int __pyx_v_minute, int __pyx_v_second, int __pyx_v_microsecond, PyObject *__pyx_v_tz, struct __pyx_opt_args_7cpython_8datetime_datetime_new *__pyx_optional_args) {

#line 297 "cpython/datetime.pxd"
  int __pyx_v_fold = ((int)0);

#line 297 "cpython/datetime.pxd"
  PyDateTime_DateTime *__pyx_r = NULL;

#line 297 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 297 "cpython/datetime.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 297 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 297 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 297 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 297 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("datetime_new", 1);

#line 297 "cpython/datetime.pxd"
  if (__pyx_optional_args) {

#line 297 "cpython/datetime.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 297 "cpython/datetime.pxd"
      __pyx_v_fold = __pyx_optional_args->fold;

#line 297 "cpython/datetime.pxd"
    }

#line 297 "cpython/datetime.pxd"
  }

  /* "cpython/datetime.pxd":298
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)             # <<<<<<<<<<<<<<
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 */

#line 298 "cpython/datetime.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 298 "cpython/datetime.pxd"
  __pyx_t_1 = ((PyObject *)__Pyx_DateTime_DateTimeWithFold(__pyx_v_year, __pyx_v_month, __pyx_v_day, __pyx_v_hour, __pyx_v_minute, __pyx_v_second, __pyx_v_microsecond, __pyx_v_tz, __pyx_v_fold)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 298, __pyx_L1_error)

#line 298 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 298 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_DateTime *)__pyx_t_1);

#line 298 "cpython/datetime.pxd"
  __pyx_t_1 = 0;

#line 298 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":297
 * # Create datetime object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline datetime datetime_new(int year, int month, int day, int hour, int minute, int second, int microsecond, object tz, int fold=0):             # <<<<<<<<<<<<<<
 *     return __Pyx_DateTime_DateTimeWithFold(year, month, day, hour, minute, second, microsecond, tz, fold)
 * 
 */

#line 297 "cpython/datetime.pxd"


#line 297 "cpython/datetime.pxd"
  /* function exit code */

#line 297 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 297 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 297 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.datetime_new", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 297 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 297 "cpython/datetime.pxd"
  __pyx_L0:;

#line 297 "cpython/datetime.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 297 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 297 "cpython/datetime.pxd"
  return __pyx_r;

#line 297 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":302
 * # Create timedelta object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline timedelta timedelta_new(int days, int seconds, int useconds):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)
 * 
 */

#line 302 "cpython/datetime.pxd"


#line 302 "cpython/datetime.pxd"
static CYTHON_INLINE PyDateTime_Delta *__pyx_f_7cpython_8datetime_timedelta_new(int __pyx_v_days, int __pyx_v_seconds, int __pyx_v_useconds) {

#line 302 "cpython/datetime.pxd"
  PyDateTime_Delta *__pyx_r = NULL;

#line 302 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 302 "cpython/datetime.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 302 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 302 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 302 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 302 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("timedelta_new", 1);

  /* "cpython/datetime.pxd":303
 * # Note, there are no range checks for any of the arguments.
 * cdef inline timedelta timedelta_new(int days, int seconds, int useconds):
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)             # <<<<<<<<<<<<<<
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 */

#line 303 "cpython/datetime.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 303 "cpython/datetime.pxd"
  __pyx_t_1 = ((PyObject *)PyDateTimeAPI->Delta_FromDelta(__pyx_v_days, __pyx_v_seconds, __pyx_v_useconds, 1, PyDateTimeAPI->DeltaType)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 303, __pyx_L1_error)

#line 303 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 303 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_Delta *)__pyx_t_1);

#line 303 "cpython/datetime.pxd"
  __pyx_t_1 = 0;

#line 303 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":302
 * # Create timedelta object using DateTime CAPI factory function.
 * # Note, there are no range checks for any of the arguments.
 * cdef inline timedelta timedelta_new(int days, int seconds, int useconds):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Delta_FromDelta(days, seconds, useconds, 1, PyDateTimeAPI.DeltaType)
 * 
 */

#line 302 "cpython/datetime.pxd"


#line 302 "cpython/datetime.pxd"
  /* function exit code */

#line 302 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 302 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 302 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.timedelta_new", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 302 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 302 "cpython/datetime.pxd"
  __pyx_L0:;

#line 302 "cpython/datetime.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 302 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 302 "cpython/datetime.pxd"
  return __pyx_r;

#line 302 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":306
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

#line 306 "cpython/datetime.pxd"


#line 306 "cpython/datetime.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_timezone_new(PyObject *__pyx_v_offset, struct __pyx_opt_args_7cpython_8datetime_timezone_new *__pyx_optional_args) {

#line 306 "cpython/datetime.pxd"
  PyObject *__pyx_v_name = ((PyObject *)Py_None);

#line 306 "cpython/datetime.pxd"
  PyObject *__pyx_r = NULL;

#line 306 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 306 "cpython/datetime.pxd"
  int __pyx_t_1;

#line 306 "cpython/datetime.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 306 "cpython/datetime.pxd"
  PyObject *__pyx_t_3;

#line 306 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 306 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 306 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 306 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("timezone_new", 1);

#line 306 "cpython/datetime.pxd"
  if (__pyx_optional_args) {

#line 306 "cpython/datetime.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 306 "cpython/datetime.pxd"
      __pyx_v_name = __pyx_optional_args->name;

#line 306 "cpython/datetime.pxd"
    }

#line 306 "cpython/datetime.pxd"
  }

  /* "cpython/datetime.pxd":307
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)
 */

#line 307 "cpython/datetime.pxd"
  __pyx_t_1 = (PY_VERSION_HEX < 0x030700b1);

#line 307 "cpython/datetime.pxd"
  if (unlikely(__pyx_t_1)) {

    /* "cpython/datetime.pxd":308
 * cdef inline object timezone_new(object offset, object name=None):
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')             # <<<<<<<<<<<<<<
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)
 * 
 */

#line 308 "cpython/datetime.pxd"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 308, __pyx_L1_error)

#line 308 "cpython/datetime.pxd"
    __Pyx_GOTREF(__pyx_t_2);

#line 308 "cpython/datetime.pxd"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 308 "cpython/datetime.pxd"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 308 "cpython/datetime.pxd"
    __PYX_ERR(4, 308, __pyx_L1_error)

    /* "cpython/datetime.pxd":307
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)
 */

#line 307 "cpython/datetime.pxd"
  }

  /* "cpython/datetime.pxd":309
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)             # <<<<<<<<<<<<<<
 * 
 * # Create datetime object using DB API constructor.
 */

#line 309 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 309 "cpython/datetime.pxd"
  __pyx_t_1 = (__pyx_v_name != Py_None);

#line 309 "cpython/datetime.pxd"
  if (__pyx_t_1) {

#line 309 "cpython/datetime.pxd"
    __pyx_t_3 = ((PyObject *)__pyx_v_name);

#line 309 "cpython/datetime.pxd"
  } else {

#line 309 "cpython/datetime.pxd"
    __pyx_t_3 = NULL;

#line 309 "cpython/datetime.pxd"
  }

#line 309 "cpython/datetime.pxd"
  __pyx_t_2 = __Pyx_TimeZone_FromOffsetAndName(__pyx_v_offset, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 309, __pyx_L1_error)

#line 309 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_2);

#line 309 "cpython/datetime.pxd"
  __pyx_r = __pyx_t_2;

#line 309 "cpython/datetime.pxd"
  __pyx_t_2 = 0;

#line 309 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":306
 * 
 * # Create timedelta object using DateTime CAPI factory function.
 * cdef inline object timezone_new(object offset, object name=None):             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

#line 306 "cpython/datetime.pxd"


#line 306 "cpython/datetime.pxd"
  /* function exit code */

#line 306 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 306 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_2);

#line 306 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.timezone_new", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 306 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 306 "cpython/datetime.pxd"
  __pyx_L0:;

#line 306 "cpython/datetime.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 306 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 306 "cpython/datetime.pxd"
  return __pyx_r;

#line 306 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":312
 * 
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 */

#line 312 "cpython/datetime.pxd"


#line 312 "cpython/datetime.pxd"
static CYTHON_INLINE PyDateTime_DateTime *__pyx_f_7cpython_8datetime_datetime_from_timestamp(PyObject *__pyx_v_timestamp, struct __pyx_opt_args_7cpython_8datetime_datetime_from_timestamp *__pyx_optional_args) {

#line 312 "cpython/datetime.pxd"
  PyObject *__pyx_v_tz = ((PyObject *)Py_None);

#line 312 "cpython/datetime.pxd"
  PyDateTime_DateTime *__pyx_r = NULL;

#line 312 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 312 "cpython/datetime.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 312 "cpython/datetime.pxd"
  int __pyx_t_2;

#line 312 "cpython/datetime.pxd"
  PyObject *__pyx_t_3 = NULL;

#line 312 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 312 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 312 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 312 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("datetime_from_timestamp", 1);

#line 312 "cpython/datetime.pxd"
  if (__pyx_optional_args) {

#line 312 "cpython/datetime.pxd"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 312 "cpython/datetime.pxd"
      __pyx_v_tz = __pyx_optional_args->tz;

#line 312 "cpython/datetime.pxd"
    }

#line 312 "cpython/datetime.pxd"
  }

  /* "cpython/datetime.pxd":313
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):
 *     return PyDateTimeAPI.DateTime_FromTimestamp(             # <<<<<<<<<<<<<<
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 * 
 */

#line 313 "cpython/datetime.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

  /* "cpython/datetime.pxd":314
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)             # <<<<<<<<<<<<<<
 * 
 * # Create date object using DB API constructor.
 */

#line 314 "cpython/datetime.pxd"
  __pyx_t_2 = (__pyx_v_tz != Py_None);

#line 314 "cpython/datetime.pxd"
  if (__pyx_t_2) {

#line 314 "cpython/datetime.pxd"
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 314, __pyx_L1_error)

#line 314 "cpython/datetime.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 314 "cpython/datetime.pxd"
    __Pyx_INCREF(__pyx_v_timestamp);

#line 314 "cpython/datetime.pxd"
    __Pyx_GIVEREF(__pyx_v_timestamp);

#line 314 "cpython/datetime.pxd"
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_timestamp)) __PYX_ERR(4, 314, __pyx_L1_error);

#line 314 "cpython/datetime.pxd"
    __Pyx_INCREF(__pyx_v_tz);

#line 314 "cpython/datetime.pxd"
    __Pyx_GIVEREF(__pyx_v_tz);

#line 314 "cpython/datetime.pxd"
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_tz)) __PYX_ERR(4, 314, __pyx_L1_error);

#line 314 "cpython/datetime.pxd"
    __pyx_t_1 = __pyx_t_3;

#line 314 "cpython/datetime.pxd"
    __pyx_t_3 = 0;

#line 314 "cpython/datetime.pxd"
  } else {

#line 314 "cpython/datetime.pxd"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 314, __pyx_L1_error)

#line 314 "cpython/datetime.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 314 "cpython/datetime.pxd"
    __Pyx_INCREF(__pyx_v_timestamp);

#line 314 "cpython/datetime.pxd"
    __Pyx_GIVEREF(__pyx_v_timestamp);

#line 314 "cpython/datetime.pxd"
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_timestamp)) __PYX_ERR(4, 314, __pyx_L1_error);

#line 314 "cpython/datetime.pxd"
    __pyx_t_1 = __pyx_t_3;

#line 314 "cpython/datetime.pxd"
    __pyx_t_3 = 0;

#line 314 "cpython/datetime.pxd"
  }

  /* "cpython/datetime.pxd":313
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):
 *     return PyDateTimeAPI.DateTime_FromTimestamp(             # <<<<<<<<<<<<<<
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 * 
 */

#line 313 "cpython/datetime.pxd"
  __pyx_t_3 = ((PyObject *)PyDateTimeAPI->DateTime_FromTimestamp(((PyObject *)PyDateTimeAPI->DateTimeType), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 313, __pyx_L1_error)

#line 313 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_3);

#line 313 "cpython/datetime.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 313 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_DateTime *)__pyx_t_3);

#line 313 "cpython/datetime.pxd"
  __pyx_t_3 = 0;

#line 313 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":312
 * 
 * # Create datetime object using DB API constructor.
 * cdef inline datetime datetime_from_timestamp(timestamp, tz=None):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.DateTime_FromTimestamp(
 *         <PyObject*>PyDateTimeAPI.DateTimeType, (timestamp, tz) if tz is not None else (timestamp,), NULL)
 */

#line 312 "cpython/datetime.pxd"


#line 312 "cpython/datetime.pxd"
  /* function exit code */

#line 312 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 312 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 312 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 312 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.datetime_from_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 312 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 312 "cpython/datetime.pxd"
  __pyx_L0:;

#line 312 "cpython/datetime.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 312 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 312 "cpython/datetime.pxd"
  return __pyx_r;

#line 312 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":317
 * 
 * # Create date object using DB API constructor.
 * cdef inline date date_from_timestamp(timestamp):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromTimestamp(<PyObject*>PyDateTimeAPI.DateType, (timestamp,))
 * 
 */

#line 317 "cpython/datetime.pxd"


#line 317 "cpython/datetime.pxd"
static CYTHON_INLINE PyDateTime_Date *__pyx_f_7cpython_8datetime_date_from_timestamp(PyObject *__pyx_v_timestamp) {

#line 317 "cpython/datetime.pxd"
  PyDateTime_Date *__pyx_r = NULL;

#line 317 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 317 "cpython/datetime.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 317 "cpython/datetime.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 317 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 317 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 317 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 317 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("date_from_timestamp", 1);

  /* "cpython/datetime.pxd":318
 * # Create date object using DB API constructor.
 * cdef inline date date_from_timestamp(timestamp):
 *     return PyDateTimeAPI.Date_FromTimestamp(<PyObject*>PyDateTimeAPI.DateType, (timestamp,))             # <<<<<<<<<<<<<<
 * 
 * # More recognizable getters for date/time/datetime/timedelta.
 */

#line 318 "cpython/datetime.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 318 "cpython/datetime.pxd"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 318, __pyx_L1_error)

#line 318 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 318 "cpython/datetime.pxd"
  __Pyx_INCREF(__pyx_v_timestamp);

#line 318 "cpython/datetime.pxd"
  __Pyx_GIVEREF(__pyx_v_timestamp);

#line 318 "cpython/datetime.pxd"
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_timestamp)) __PYX_ERR(4, 318, __pyx_L1_error);

#line 318 "cpython/datetime.pxd"
  __pyx_t_2 = ((PyObject *)PyDateTimeAPI->Date_FromTimestamp(((PyObject *)PyDateTimeAPI->DateType), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 318, __pyx_L1_error)

#line 318 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_t_2);

#line 318 "cpython/datetime.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 318 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_Date *)__pyx_t_2);

#line 318 "cpython/datetime.pxd"
  __pyx_t_2 = 0;

#line 318 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":317
 * 
 * # Create date object using DB API constructor.
 * cdef inline date date_from_timestamp(timestamp):             # <<<<<<<<<<<<<<
 *     return PyDateTimeAPI.Date_FromTimestamp(<PyObject*>PyDateTimeAPI.DateType, (timestamp,))
 * 
 */

#line 317 "cpython/datetime.pxd"


#line 317 "cpython/datetime.pxd"
  /* function exit code */

#line 317 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 317 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 317 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_2);

#line 317 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.date_from_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 317 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 317 "cpython/datetime.pxd"
  __pyx_L0:;

#line 317 "cpython/datetime.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 317 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 317 "cpython/datetime.pxd"
  return __pyx_r;

#line 317 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":326
 * 
 * # Get UTC singleton
 * cdef inline object get_utc():             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

#line 326 "cpython/datetime.pxd"


#line 326 "cpython/datetime.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_get_utc(void) {

#line 326 "cpython/datetime.pxd"
  PyObject *__pyx_r = NULL;

#line 326 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 326 "cpython/datetime.pxd"
  int __pyx_t_1;

#line 326 "cpython/datetime.pxd"
  PyObject *__pyx_t_2 = NULL;

#line 326 "cpython/datetime.pxd"
  int __pyx_lineno = 0;

#line 326 "cpython/datetime.pxd"
  const char *__pyx_filename = NULL;

#line 326 "cpython/datetime.pxd"
  int __pyx_clineno = 0;

#line 326 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("get_utc", 1);

  /* "cpython/datetime.pxd":327
 * # Get UTC singleton
 * cdef inline object get_utc():
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return <object>__Pyx_TimeZone_UTC
 */

#line 327 "cpython/datetime.pxd"
  __pyx_t_1 = (PY_VERSION_HEX < 0x030700b1);

#line 327 "cpython/datetime.pxd"
  if (unlikely(__pyx_t_1)) {

    /* "cpython/datetime.pxd":328
 * cdef inline object get_utc():
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')             # <<<<<<<<<<<<<<
 *     return <object>__Pyx_TimeZone_UTC
 * 
 */

#line 328 "cpython/datetime.pxd"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 328, __pyx_L1_error)

#line 328 "cpython/datetime.pxd"
    __Pyx_GOTREF(__pyx_t_2);

#line 328 "cpython/datetime.pxd"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 328 "cpython/datetime.pxd"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 328 "cpython/datetime.pxd"
    __PYX_ERR(4, 328, __pyx_L1_error)

    /* "cpython/datetime.pxd":327
 * # Get UTC singleton
 * cdef inline object get_utc():
 *     if PY_VERSION_HEX < 0x030700b1:             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return <object>__Pyx_TimeZone_UTC
 */

#line 327 "cpython/datetime.pxd"
  }

  /* "cpython/datetime.pxd":329
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 *     return <object>__Pyx_TimeZone_UTC             # <<<<<<<<<<<<<<
 * 
 * # Get tzinfo of time
 */

#line 329 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 329 "cpython/datetime.pxd"
  __Pyx_INCREF(((PyObject *)__Pyx_TimeZone_UTC));

#line 329 "cpython/datetime.pxd"
  __pyx_r = ((PyObject *)__Pyx_TimeZone_UTC);

#line 329 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":326
 * 
 * # Get UTC singleton
 * cdef inline object get_utc():             # <<<<<<<<<<<<<<
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')
 */

#line 326 "cpython/datetime.pxd"


#line 326 "cpython/datetime.pxd"
  /* function exit code */

#line 326 "cpython/datetime.pxd"
  __pyx_L1_error:;

#line 326 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_t_2);

#line 326 "cpython/datetime.pxd"
  __Pyx_AddTraceback("cpython.datetime.get_utc", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 326 "cpython/datetime.pxd"
  __pyx_r = 0;

#line 326 "cpython/datetime.pxd"
  __pyx_L0:;

#line 326 "cpython/datetime.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 326 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 326 "cpython/datetime.pxd"
  return __pyx_r;

#line 326 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":332
 * 
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_TIME_GET_TZINFO(o)
 * 
 */

#line 332 "cpython/datetime.pxd"


#line 332 "cpython/datetime.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_time_tzinfo(PyObject *__pyx_v_o) {

#line 332 "cpython/datetime.pxd"
  PyObject *__pyx_r = NULL;

#line 332 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 332 "cpython/datetime.pxd"
  PyObject *__pyx_t_1;

#line 332 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("time_tzinfo", 1);

  /* "cpython/datetime.pxd":333
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):
 *     return <object>PyDateTime_TIME_GET_TZINFO(o)             # <<<<<<<<<<<<<<
 * 
 * # Get tzinfo of datetime
 */

#line 333 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 333 "cpython/datetime.pxd"
  __pyx_t_1 = PyDateTime_TIME_GET_TZINFO(__pyx_v_o);

#line 333 "cpython/datetime.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_t_1));

#line 333 "cpython/datetime.pxd"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 333 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":332
 * 
 * # Get tzinfo of time
 * cdef inline object time_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_TIME_GET_TZINFO(o)
 * 
 */

#line 332 "cpython/datetime.pxd"


#line 332 "cpython/datetime.pxd"
  /* function exit code */

#line 332 "cpython/datetime.pxd"
  __pyx_L0:;

#line 332 "cpython/datetime.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 332 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 332 "cpython/datetime.pxd"
  return __pyx_r;

#line 332 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":336
 * 
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_DATE_GET_TZINFO(o)
 * 
 */

#line 336 "cpython/datetime.pxd"


#line 336 "cpython/datetime.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7cpython_8datetime_datetime_tzinfo(PyObject *__pyx_v_o) {

#line 336 "cpython/datetime.pxd"
  PyObject *__pyx_r = NULL;

#line 336 "cpython/datetime.pxd"
  __Pyx_RefNannyDeclarations

#line 336 "cpython/datetime.pxd"
  PyObject *__pyx_t_1;

#line 336 "cpython/datetime.pxd"
  __Pyx_RefNannySetupContext("datetime_tzinfo", 1);

  /* "cpython/datetime.pxd":337
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):
 *     return <object>PyDateTime_DATE_GET_TZINFO(o)             # <<<<<<<<<<<<<<
 * 
 * # Get year of date
 */

#line 337 "cpython/datetime.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 337 "cpython/datetime.pxd"
  __pyx_t_1 = PyDateTime_DATE_GET_TZINFO(__pyx_v_o);

#line 337 "cpython/datetime.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_t_1));

#line 337 "cpython/datetime.pxd"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 337 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":336
 * 
 * # Get tzinfo of datetime
 * cdef inline object datetime_tzinfo(object o):             # <<<<<<<<<<<<<<
 *     return <object>PyDateTime_DATE_GET_TZINFO(o)
 * 
 */

#line 336 "cpython/datetime.pxd"


#line 336 "cpython/datetime.pxd"
  /* function exit code */

#line 336 "cpython/datetime.pxd"
  __pyx_L0:;

#line 336 "cpython/datetime.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 336 "cpython/datetime.pxd"
  __Pyx_RefNannyFinishContext();

#line 336 "cpython/datetime.pxd"
  return __pyx_r;

#line 336 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":340
 * 
 * # Get year of date
 * cdef inline int date_year(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

#line 340 "cpython/datetime.pxd"


#line 340 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_year(PyObject *__pyx_v_o) {

#line 340 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":341
 * # Get year of date
 * cdef inline int date_year(object o) noexcept:
 *     return PyDateTime_GET_YEAR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get month of date
 */

#line 341 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_YEAR(__pyx_v_o);

#line 341 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":340
 * 
 * # Get year of date
 * cdef inline int date_year(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

#line 340 "cpython/datetime.pxd"


#line 340 "cpython/datetime.pxd"
  /* function exit code */

#line 340 "cpython/datetime.pxd"
  __pyx_L0:;

#line 340 "cpython/datetime.pxd"
  return __pyx_r;

#line 340 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":344
 * 
 * # Get month of date
 * cdef inline int date_month(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

#line 344 "cpython/datetime.pxd"


#line 344 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_month(PyObject *__pyx_v_o) {

#line 344 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":345
 * # Get month of date
 * cdef inline int date_month(object o) noexcept:
 *     return PyDateTime_GET_MONTH(o)             # <<<<<<<<<<<<<<
 * 
 * # Get day of date
 */

#line 345 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_MONTH(__pyx_v_o);

#line 345 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":344
 * 
 * # Get month of date
 * cdef inline int date_month(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

#line 344 "cpython/datetime.pxd"


#line 344 "cpython/datetime.pxd"
  /* function exit code */

#line 344 "cpython/datetime.pxd"
  __pyx_L0:;

#line 344 "cpython/datetime.pxd"
  return __pyx_r;

#line 344 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":348
 * 
 * # Get day of date
 * cdef inline int date_day(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

#line 348 "cpython/datetime.pxd"


#line 348 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_date_day(PyObject *__pyx_v_o) {

#line 348 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":349
 * # Get day of date
 * cdef inline int date_day(object o) noexcept:
 *     return PyDateTime_GET_DAY(o)             # <<<<<<<<<<<<<<
 * 
 * # Get year of datetime
 */

#line 349 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_DAY(__pyx_v_o);

#line 349 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":348
 * 
 * # Get day of date
 * cdef inline int date_day(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

#line 348 "cpython/datetime.pxd"


#line 348 "cpython/datetime.pxd"
  /* function exit code */

#line 348 "cpython/datetime.pxd"
  __pyx_L0:;

#line 348 "cpython/datetime.pxd"
  return __pyx_r;

#line 348 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":352
 * 
 * # Get year of datetime
 * cdef inline int datetime_year(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

#line 352 "cpython/datetime.pxd"


#line 352 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_year(PyObject *__pyx_v_o) {

#line 352 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":353
 * # Get year of datetime
 * cdef inline int datetime_year(object o) noexcept:
 *     return PyDateTime_GET_YEAR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get month of datetime
 */

#line 353 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_YEAR(__pyx_v_o);

#line 353 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":352
 * 
 * # Get year of datetime
 * cdef inline int datetime_year(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_YEAR(o)
 * 
 */

#line 352 "cpython/datetime.pxd"


#line 352 "cpython/datetime.pxd"
  /* function exit code */

#line 352 "cpython/datetime.pxd"
  __pyx_L0:;

#line 352 "cpython/datetime.pxd"
  return __pyx_r;

#line 352 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":356
 * 
 * # Get month of datetime
 * cdef inline int datetime_month(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

#line 356 "cpython/datetime.pxd"


#line 356 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_month(PyObject *__pyx_v_o) {

#line 356 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":357
 * # Get month of datetime
 * cdef inline int datetime_month(object o) noexcept:
 *     return PyDateTime_GET_MONTH(o)             # <<<<<<<<<<<<<<
 * 
 * # Get day of datetime
 */

#line 357 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_MONTH(__pyx_v_o);

#line 357 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":356
 * 
 * # Get month of datetime
 * cdef inline int datetime_month(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_MONTH(o)
 * 
 */

#line 356 "cpython/datetime.pxd"


#line 356 "cpython/datetime.pxd"
  /* function exit code */

#line 356 "cpython/datetime.pxd"
  __pyx_L0:;

#line 356 "cpython/datetime.pxd"
  return __pyx_r;

#line 356 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":360
 * 
 * # Get day of datetime
 * cdef inline int datetime_day(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

#line 360 "cpython/datetime.pxd"


#line 360 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_day(PyObject *__pyx_v_o) {

#line 360 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":361
 * # Get day of datetime
 * cdef inline int datetime_day(object o) noexcept:
 *     return PyDateTime_GET_DAY(o)             # <<<<<<<<<<<<<<
 * 
 * # Get hour of time
 */

#line 361 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_GET_DAY(__pyx_v_o);

#line 361 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":360
 * 
 * # Get day of datetime
 * cdef inline int datetime_day(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_GET_DAY(o)
 * 
 */

#line 360 "cpython/datetime.pxd"


#line 360 "cpython/datetime.pxd"
  /* function exit code */

#line 360 "cpython/datetime.pxd"
  __pyx_L0:;

#line 360 "cpython/datetime.pxd"
  return __pyx_r;

#line 360 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":364
 * 
 * # Get hour of time
 * cdef inline int time_hour(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_HOUR(o)
 * 
 */

#line 364 "cpython/datetime.pxd"


#line 364 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_hour(PyObject *__pyx_v_o) {

#line 364 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":365
 * # Get hour of time
 * cdef inline int time_hour(object o) noexcept:
 *     return PyDateTime_TIME_GET_HOUR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get minute of time
 */

#line 365 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_HOUR(__pyx_v_o);

#line 365 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":364
 * 
 * # Get hour of time
 * cdef inline int time_hour(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_HOUR(o)
 * 
 */

#line 364 "cpython/datetime.pxd"


#line 364 "cpython/datetime.pxd"
  /* function exit code */

#line 364 "cpython/datetime.pxd"
  __pyx_L0:;

#line 364 "cpython/datetime.pxd"
  return __pyx_r;

#line 364 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":368
 * 
 * # Get minute of time
 * cdef inline int time_minute(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MINUTE(o)
 * 
 */

#line 368 "cpython/datetime.pxd"


#line 368 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_minute(PyObject *__pyx_v_o) {

#line 368 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":369
 * # Get minute of time
 * cdef inline int time_minute(object o) noexcept:
 *     return PyDateTime_TIME_GET_MINUTE(o)             # <<<<<<<<<<<<<<
 * 
 * # Get second of time
 */

#line 369 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_MINUTE(__pyx_v_o);

#line 369 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":368
 * 
 * # Get minute of time
 * cdef inline int time_minute(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MINUTE(o)
 * 
 */

#line 368 "cpython/datetime.pxd"


#line 368 "cpython/datetime.pxd"
  /* function exit code */

#line 368 "cpython/datetime.pxd"
  __pyx_L0:;

#line 368 "cpython/datetime.pxd"
  return __pyx_r;

#line 368 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":372
 * 
 * # Get second of time
 * cdef inline int time_second(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_SECOND(o)
 * 
 */

#line 372 "cpython/datetime.pxd"


#line 372 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_second(PyObject *__pyx_v_o) {

#line 372 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":373
 * # Get second of time
 * cdef inline int time_second(object o) noexcept:
 *     return PyDateTime_TIME_GET_SECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get microsecond of time
 */

#line 373 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_SECOND(__pyx_v_o);

#line 373 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":372
 * 
 * # Get second of time
 * cdef inline int time_second(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_SECOND(o)
 * 
 */

#line 372 "cpython/datetime.pxd"


#line 372 "cpython/datetime.pxd"
  /* function exit code */

#line 372 "cpython/datetime.pxd"
  __pyx_L0:;

#line 372 "cpython/datetime.pxd"
  return __pyx_r;

#line 372 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":376
 * 
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MICROSECOND(o)
 * 
 */

#line 376 "cpython/datetime.pxd"


#line 376 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_microsecond(PyObject *__pyx_v_o) {

#line 376 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":377
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o) noexcept:
 *     return PyDateTime_TIME_GET_MICROSECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get fold of time
 */

#line 377 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_MICROSECOND(__pyx_v_o);

#line 377 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":376
 * 
 * # Get microsecond of time
 * cdef inline int time_microsecond(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_TIME_GET_MICROSECOND(o)
 * 
 */

#line 376 "cpython/datetime.pxd"


#line 376 "cpython/datetime.pxd"
  /* function exit code */

#line 376 "cpython/datetime.pxd"
  __pyx_L0:;

#line 376 "cpython/datetime.pxd"
  return __pyx_r;

#line 376 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":380
 * 
 * # Get fold of time
 * cdef inline int time_fold(object o) noexcept:             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_TIME_GET_FOLD(o)
 */

#line 380 "cpython/datetime.pxd"


#line 380 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_time_fold(PyObject *__pyx_v_o) {

#line 380 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":382
 * cdef inline int time_fold(object o) noexcept:
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_TIME_GET_FOLD(o)             # <<<<<<<<<<<<<<
 * 
 * # Get hour of datetime
 */

#line 382 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_TIME_GET_FOLD(__pyx_v_o);

#line 382 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":380
 * 
 * # Get fold of time
 * cdef inline int time_fold(object o) noexcept:             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_TIME_GET_FOLD(o)
 */

#line 380 "cpython/datetime.pxd"


#line 380 "cpython/datetime.pxd"
  /* function exit code */

#line 380 "cpython/datetime.pxd"
  __pyx_L0:;

#line 380 "cpython/datetime.pxd"
  return __pyx_r;

#line 380 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":385
 * 
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_HOUR(o)
 * 
 */

#line 385 "cpython/datetime.pxd"


#line 385 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_hour(PyObject *__pyx_v_o) {

#line 385 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":386
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o) noexcept:
 *     return PyDateTime_DATE_GET_HOUR(o)             # <<<<<<<<<<<<<<
 * 
 * # Get minute of datetime
 */

#line 386 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_HOUR(__pyx_v_o);

#line 386 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":385
 * 
 * # Get hour of datetime
 * cdef inline int datetime_hour(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_HOUR(o)
 * 
 */

#line 385 "cpython/datetime.pxd"


#line 385 "cpython/datetime.pxd"
  /* function exit code */

#line 385 "cpython/datetime.pxd"
  __pyx_L0:;

#line 385 "cpython/datetime.pxd"
  return __pyx_r;

#line 385 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":389
 * 
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MINUTE(o)
 * 
 */

#line 389 "cpython/datetime.pxd"


#line 389 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_minute(PyObject *__pyx_v_o) {

#line 389 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":390
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o) noexcept:
 *     return PyDateTime_DATE_GET_MINUTE(o)             # <<<<<<<<<<<<<<
 * 
 * # Get second of datetime
 */

#line 390 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_MINUTE(__pyx_v_o);

#line 390 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":389
 * 
 * # Get minute of datetime
 * cdef inline int datetime_minute(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MINUTE(o)
 * 
 */

#line 389 "cpython/datetime.pxd"


#line 389 "cpython/datetime.pxd"
  /* function exit code */

#line 389 "cpython/datetime.pxd"
  __pyx_L0:;

#line 389 "cpython/datetime.pxd"
  return __pyx_r;

#line 389 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":393
 * 
 * # Get second of datetime
 * cdef inline int datetime_second(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_SECOND(o)
 * 
 */

#line 393 "cpython/datetime.pxd"


#line 393 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_second(PyObject *__pyx_v_o) {

#line 393 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":394
 * # Get second of datetime
 * cdef inline int datetime_second(object o) noexcept:
 *     return PyDateTime_DATE_GET_SECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get microsecond of datetime
 */

#line 394 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_SECOND(__pyx_v_o);

#line 394 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":393
 * 
 * # Get second of datetime
 * cdef inline int datetime_second(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_SECOND(o)
 * 
 */

#line 393 "cpython/datetime.pxd"


#line 393 "cpython/datetime.pxd"
  /* function exit code */

#line 393 "cpython/datetime.pxd"
  __pyx_L0:;

#line 393 "cpython/datetime.pxd"
  return __pyx_r;

#line 393 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":397
 * 
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MICROSECOND(o)
 * 
 */

#line 397 "cpython/datetime.pxd"


#line 397 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_microsecond(PyObject *__pyx_v_o) {

#line 397 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":398
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o) noexcept:
 *     return PyDateTime_DATE_GET_MICROSECOND(o)             # <<<<<<<<<<<<<<
 * 
 * # Get fold of datetime
 */

#line 398 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_MICROSECOND(__pyx_v_o);

#line 398 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":397
 * 
 * # Get microsecond of datetime
 * cdef inline int datetime_microsecond(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return PyDateTime_DATE_GET_MICROSECOND(o)
 * 
 */

#line 397 "cpython/datetime.pxd"


#line 397 "cpython/datetime.pxd"
  /* function exit code */

#line 397 "cpython/datetime.pxd"
  __pyx_L0:;

#line 397 "cpython/datetime.pxd"
  return __pyx_r;

#line 397 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":401
 * 
 * # Get fold of datetime
 * cdef inline int datetime_fold(object o) noexcept:             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_DATE_GET_FOLD(o)
 */

#line 401 "cpython/datetime.pxd"


#line 401 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_datetime_fold(PyObject *__pyx_v_o) {

#line 401 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":403
 * cdef inline int datetime_fold(object o) noexcept:
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_DATE_GET_FOLD(o)             # <<<<<<<<<<<<<<
 * 
 * # Get days of timedelta
 */

#line 403 "cpython/datetime.pxd"
  __pyx_r = PyDateTime_DATE_GET_FOLD(__pyx_v_o);

#line 403 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":401
 * 
 * # Get fold of datetime
 * cdef inline int datetime_fold(object o) noexcept:             # <<<<<<<<<<<<<<
 *     # For Python < 3.6 this returns 0 no matter what
 *     return PyDateTime_DATE_GET_FOLD(o)
 */

#line 401 "cpython/datetime.pxd"


#line 401 "cpython/datetime.pxd"
  /* function exit code */

#line 401 "cpython/datetime.pxd"
  __pyx_L0:;

#line 401 "cpython/datetime.pxd"
  return __pyx_r;

#line 401 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":406
 * 
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).days
 * 
 */

#line 406 "cpython/datetime.pxd"


#line 406 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_days(PyObject *__pyx_v_o) {

#line 406 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":407
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o) noexcept:
 *     return (<PyDateTime_Delta*>o).days             # <<<<<<<<<<<<<<
 * 
 * # Get seconds of timedelta
 */

#line 407 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->days;

#line 407 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":406
 * 
 * # Get days of timedelta
 * cdef inline int timedelta_days(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).days
 * 
 */

#line 406 "cpython/datetime.pxd"


#line 406 "cpython/datetime.pxd"
  /* function exit code */

#line 406 "cpython/datetime.pxd"
  __pyx_L0:;

#line 406 "cpython/datetime.pxd"
  return __pyx_r;

#line 406 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":410
 * 
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).seconds
 * 
 */

#line 410 "cpython/datetime.pxd"


#line 410 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_seconds(PyObject *__pyx_v_o) {

#line 410 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":411
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o) noexcept:
 *     return (<PyDateTime_Delta*>o).seconds             # <<<<<<<<<<<<<<
 * 
 * # Get microseconds of timedelta
 */

#line 411 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->seconds;

#line 411 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":410
 * 
 * # Get seconds of timedelta
 * cdef inline int timedelta_seconds(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).seconds
 * 
 */

#line 410 "cpython/datetime.pxd"


#line 410 "cpython/datetime.pxd"
  /* function exit code */

#line 410 "cpython/datetime.pxd"
  __pyx_L0:;

#line 410 "cpython/datetime.pxd"
  return __pyx_r;

#line 410 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":414
 * 
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 */

#line 414 "cpython/datetime.pxd"


#line 414 "cpython/datetime.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_8datetime_timedelta_microseconds(PyObject *__pyx_v_o) {

#line 414 "cpython/datetime.pxd"
  int __pyx_r;

  /* "cpython/datetime.pxd":415
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o) noexcept:
 *     return (<PyDateTime_Delta*>o).microseconds             # <<<<<<<<<<<<<<
 * 
 * cdef inline double total_seconds(timedelta obj) noexcept:
 */

#line 415 "cpython/datetime.pxd"
  __pyx_r = ((PyDateTime_Delta *)__pyx_v_o)->microseconds;

#line 415 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":414
 * 
 * # Get microseconds of timedelta
 * cdef inline int timedelta_microseconds(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 */

#line 414 "cpython/datetime.pxd"


#line 414 "cpython/datetime.pxd"
  /* function exit code */

#line 414 "cpython/datetime.pxd"
  __pyx_L0:;

#line 414 "cpython/datetime.pxd"
  return __pyx_r;

#line 414 "cpython/datetime.pxd"
}

/* "cpython/datetime.pxd":417
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 * cdef inline double total_seconds(timedelta obj) noexcept:             # <<<<<<<<<<<<<<
 *     # Mirrors the "timedelta.total_seconds()" method.
 *     # Note that this implementation is not guaranteed to give *exactly* the same
 */

#line 417 "cpython/datetime.pxd"


#line 417 "cpython/datetime.pxd"
static CYTHON_INLINE double __pyx_f_7cpython_8datetime_total_seconds(PyDateTime_Delta *__pyx_v_obj) {
  double __pyx_v_days
#line 417 "cpython/datetime.pxd"
;
  double __pyx_v_seconds
#line 417 "cpython/datetime.pxd"
;
  double __pyx_v_micros
#line 417 "cpython/datetime.pxd"
;

#line 417 "cpython/datetime.pxd"
  double __pyx_r;

  /* "cpython/datetime.pxd":423
 *     cdef:
 *         double days, seconds, micros
 *     days = <double>PyDateTime_DELTA_GET_DAYS(obj)             # <<<<<<<<<<<<<<
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)
 */

#line 423 "cpython/datetime.pxd"
  __pyx_v_days = ((double)PyDateTime_DELTA_GET_DAYS(((PyObject *)__pyx_v_obj)));

  /* "cpython/datetime.pxd":424
 *         double days, seconds, micros
 *     days = <double>PyDateTime_DELTA_GET_DAYS(obj)
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)             # <<<<<<<<<<<<<<
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)
 *     return days * 24 * 3600 + seconds + micros / 1_000_000
 */

#line 424 "cpython/datetime.pxd"
  __pyx_v_seconds = ((double)PyDateTime_DELTA_GET_SECONDS(((PyObject *)__pyx_v_obj)));

  /* "cpython/datetime.pxd":425
 *     days = <double>PyDateTime_DELTA_GET_DAYS(obj)
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)             # <<<<<<<<<<<<<<
 *     return days * 24 * 3600 + seconds + micros / 1_000_000
 */

#line 425 "cpython/datetime.pxd"
  __pyx_v_micros = ((double)PyDateTime_DELTA_GET_MICROSECONDS(((PyObject *)__pyx_v_obj)));

  /* "cpython/datetime.pxd":426
 *     seconds = <double>PyDateTime_DELTA_GET_SECONDS(obj)
 *     micros = <double>PyDateTime_DELTA_GET_MICROSECONDS(obj)
 *     return days * 24 * 3600 + seconds + micros / 1_000_000             # <<<<<<<<<<<<<<
 */

#line 426 "cpython/datetime.pxd"
  __pyx_r = ((((__pyx_v_days * 24.0) * 3600.0) + __pyx_v_seconds) + (__pyx_v_micros / 1000000.0));

#line 426 "cpython/datetime.pxd"
  goto __pyx_L0;

  /* "cpython/datetime.pxd":417
 *     return (<PyDateTime_Delta*>o).microseconds
 * 
 * cdef inline double total_seconds(timedelta obj) noexcept:             # <<<<<<<<<<<<<<
 *     # Mirrors the "timedelta.total_seconds()" method.
 *     # Note that this implementation is not guaranteed to give *exactly* the same
 */

#line 417 "cpython/datetime.pxd"


#line 417 "cpython/datetime.pxd"
  /* function exit code */

#line 417 "cpython/datetime.pxd"
  __pyx_L0:;

#line 417 "cpython/datetime.pxd"
  return __pyx_r;

#line 417 "cpython/datetime.pxd"
}

/* "pyarrow/includes/common.pxd":171
 * 
 * 
 * cdef inline object PyObject_to_object(PyObject* o):             # <<<<<<<<<<<<<<
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 */

#line 171 "pyarrow/includes/common.pxd"


#line 171 "pyarrow/includes/common.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8includes_6common_PyObject_to_object(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_result = 0
#line 171 "pyarrow/includes/common.pxd"
;

#line 171 "pyarrow/includes/common.pxd"
  PyObject *__pyx_r = NULL;

#line 171 "pyarrow/includes/common.pxd"
  __Pyx_RefNannyDeclarations

#line 171 "pyarrow/includes/common.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 171 "pyarrow/includes/common.pxd"
  __Pyx_RefNannySetupContext("PyObject_to_object", 1);

  /* "pyarrow/includes/common.pxd":173
 * cdef inline object PyObject_to_object(PyObject* o):
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o             # <<<<<<<<<<<<<<
 *     cpython.Py_DECREF(result)
 *     return result
 */

#line 173 "pyarrow/includes/common.pxd"
  __pyx_t_1 = ((PyObject *)__pyx_v_o);

#line 173 "pyarrow/includes/common.pxd"
  __Pyx_INCREF(__pyx_t_1);

#line 173 "pyarrow/includes/common.pxd"
  __pyx_v_result = __pyx_t_1;

#line 173 "pyarrow/includes/common.pxd"
  __pyx_t_1 = 0;

  /* "pyarrow/includes/common.pxd":174
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 *     cpython.Py_DECREF(result)             # <<<<<<<<<<<<<<
 *     return result
 */

#line 174 "pyarrow/includes/common.pxd"
  Py_DECREF(__pyx_v_result);

  /* "pyarrow/includes/common.pxd":175
 *     cdef object result = <object> o
 *     cpython.Py_DECREF(result)
 *     return result             # <<<<<<<<<<<<<<
 */

#line 175 "pyarrow/includes/common.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 175 "pyarrow/includes/common.pxd"
  __Pyx_INCREF(__pyx_v_result);

#line 175 "pyarrow/includes/common.pxd"
  __pyx_r = __pyx_v_result;

#line 175 "pyarrow/includes/common.pxd"
  goto __pyx_L0;

  /* "pyarrow/includes/common.pxd":171
 * 
 * 
 * cdef inline object PyObject_to_object(PyObject* o):             # <<<<<<<<<<<<<<
 *     # Cast to "object" increments reference count
 *     cdef object result = <object> o
 */

#line 171 "pyarrow/includes/common.pxd"


#line 171 "pyarrow/includes/common.pxd"
  /* function exit code */

#line 171 "pyarrow/includes/common.pxd"
  __pyx_L0:;

#line 171 "pyarrow/includes/common.pxd"
  __Pyx_XDECREF(__pyx_v_result);

#line 171 "pyarrow/includes/common.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 171 "pyarrow/includes/common.pxd"
  __Pyx_RefNannyFinishContext();

#line 171 "pyarrow/includes/common.pxd"
  return __pyx_r;

#line 171 "pyarrow/includes/common.pxd"
}

/* "pyarrow/_parquet.pxd":574
 * 
 *     @staticmethod
 *     cdef inline FileEncryptionProperties wrap(             # <<<<<<<<<<<<<<
 *             shared_ptr[CFileEncryptionProperties] properties):
 * 
 */

#line 574 "pyarrow/_parquet.pxd"


#line 574 "pyarrow/_parquet.pxd"
static CYTHON_INLINE struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_f_7pyarrow_8_parquet_24FileEncryptionProperties_wrap(std::shared_ptr< parquet::FileEncryptionProperties>  __pyx_v_properties) {
  struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_v_result = NULL
#line 574 "pyarrow/_parquet.pxd"
;

#line 574 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_r = NULL;

#line 574 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyDeclarations

#line 574 "pyarrow/_parquet.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 574 "pyarrow/_parquet.pxd"
  int __pyx_lineno = 0;

#line 574 "pyarrow/_parquet.pxd"
  const char *__pyx_filename = NULL;

#line 574 "pyarrow/_parquet.pxd"
  int __pyx_clineno = 0;

#line 574 "pyarrow/_parquet.pxd"
  __Pyx_RefNannySetupContext("wrap", 1);

  /* "pyarrow/_parquet.pxd":577
 *             shared_ptr[CFileEncryptionProperties] properties):
 * 
 *         result = FileEncryptionProperties()             # <<<<<<<<<<<<<<
 *         result.properties = properties
 *         return result
 */

#line 577 "pyarrow/_parquet.pxd"
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 577, __pyx_L1_error)

#line 577 "pyarrow/_parquet.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 577 "pyarrow/_parquet.pxd"
  __pyx_v_result = ((struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *)__pyx_t_1);

#line 577 "pyarrow/_parquet.pxd"
  __pyx_t_1 = 0;

  /* "pyarrow/_parquet.pxd":578
 * 
 *         result = FileEncryptionProperties()
 *         result.properties = properties             # <<<<<<<<<<<<<<
 *         return result
 * 
 */

#line 578 "pyarrow/_parquet.pxd"
  __pyx_v_result->properties = __pyx_v_properties;

  /* "pyarrow/_parquet.pxd":579
 *         result = FileEncryptionProperties()
 *         result.properties = properties
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef inline shared_ptr[CFileEncryptionProperties] unwrap(self):
 */

#line 579 "pyarrow/_parquet.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 579 "pyarrow/_parquet.pxd"
  __Pyx_INCREF((PyObject *)__pyx_v_result);

#line 579 "pyarrow/_parquet.pxd"
  __pyx_r = __pyx_v_result;

#line 579 "pyarrow/_parquet.pxd"
  goto __pyx_L0;

  /* "pyarrow/_parquet.pxd":574
 * 
 *     @staticmethod
 *     cdef inline FileEncryptionProperties wrap(             # <<<<<<<<<<<<<<
 *             shared_ptr[CFileEncryptionProperties] properties):
 * 
 */

#line 574 "pyarrow/_parquet.pxd"


#line 574 "pyarrow/_parquet.pxd"
  /* function exit code */

#line 574 "pyarrow/_parquet.pxd"
  __pyx_L1_error:;

#line 574 "pyarrow/_parquet.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 574 "pyarrow/_parquet.pxd"
  __Pyx_AddTraceback("pyarrow._parquet.FileEncryptionProperties.wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 574 "pyarrow/_parquet.pxd"
  __pyx_r = 0;

#line 574 "pyarrow/_parquet.pxd"
  __pyx_L0:;

#line 574 "pyarrow/_parquet.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 574 "pyarrow/_parquet.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 574 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyFinishContext();

#line 574 "pyarrow/_parquet.pxd"
  return __pyx_r;

#line 574 "pyarrow/_parquet.pxd"
}

/* "pyarrow/_parquet.pxd":581
 *         return result
 * 
 *     cdef inline shared_ptr[CFileEncryptionProperties] unwrap(self):             # <<<<<<<<<<<<<<
 *         return self.properties
 * 
 */

#line 581 "pyarrow/_parquet.pxd"


#line 581 "pyarrow/_parquet.pxd"
static CYTHON_INLINE std::shared_ptr< parquet::FileEncryptionProperties>  __pyx_f_7pyarrow_8_parquet_24FileEncryptionProperties_unwrap(struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties *__pyx_v_self) {

#line 581 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::FileEncryptionProperties>  __pyx_r;

  /* "pyarrow/_parquet.pxd":582
 * 
 *     cdef inline shared_ptr[CFileEncryptionProperties] unwrap(self):
 *         return self.properties             # <<<<<<<<<<<<<<
 * 
 * cdef shared_ptr[WriterProperties] _create_writer_properties(
 */

#line 582 "pyarrow/_parquet.pxd"
  __pyx_r = __pyx_v_self->properties;

#line 582 "pyarrow/_parquet.pxd"
  goto __pyx_L0;

  /* "pyarrow/_parquet.pxd":581
 *         return result
 * 
 *     cdef inline shared_ptr[CFileEncryptionProperties] unwrap(self):             # <<<<<<<<<<<<<<
 *         return self.properties
 * 
 */

#line 581 "pyarrow/_parquet.pxd"


#line 581 "pyarrow/_parquet.pxd"
  /* function exit code */

#line 581 "pyarrow/_parquet.pxd"
  __pyx_L0:;

#line 581 "pyarrow/_parquet.pxd"
  return __pyx_r;

#line 581 "pyarrow/_parquet.pxd"
}

/* "pyarrow/_parquet.pxd":624
 *         ParquetSchema _schema
 * 
 *     cdef inline init(self, const shared_ptr[CFileMetaData]& metadata):             # <<<<<<<<<<<<<<
 *         self.sp_metadata = metadata
 *         self._metadata = metadata.get()
 */

#line 624 "pyarrow/_parquet.pxd"


#line 624 "pyarrow/_parquet.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_12FileMetaData_init(struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_self, std::shared_ptr< parquet::FileMetaData>  const &__pyx_v_metadata) {

#line 624 "pyarrow/_parquet.pxd"
  PyObject *__pyx_r = NULL;

#line 624 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyDeclarations

#line 624 "pyarrow/_parquet.pxd"
  __Pyx_RefNannySetupContext("init", 1);

  /* "pyarrow/_parquet.pxd":625
 * 
 *     cdef inline init(self, const shared_ptr[CFileMetaData]& metadata):
 *         self.sp_metadata = metadata             # <<<<<<<<<<<<<<
 *         self._metadata = metadata.get()
 * 
 */

#line 625 "pyarrow/_parquet.pxd"
  __pyx_v_self->sp_metadata = __pyx_v_metadata;

  /* "pyarrow/_parquet.pxd":626
 *     cdef inline init(self, const shared_ptr[CFileMetaData]& metadata):
 *         self.sp_metadata = metadata
 *         self._metadata = metadata.get()             # <<<<<<<<<<<<<<
 * 
 * cdef class RowGroupMetaData(_Weakrefable):
 */

#line 626 "pyarrow/_parquet.pxd"
  __pyx_v_self->_metadata = __pyx_v_metadata.get();

  /* "pyarrow/_parquet.pxd":624
 *         ParquetSchema _schema
 * 
 *     cdef inline init(self, const shared_ptr[CFileMetaData]& metadata):             # <<<<<<<<<<<<<<
 *         self.sp_metadata = metadata
 *         self._metadata = metadata.get()
 */

#line 624 "pyarrow/_parquet.pxd"


#line 624 "pyarrow/_parquet.pxd"
  /* function exit code */

#line 624 "pyarrow/_parquet.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 624 "pyarrow/_parquet.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 624 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyFinishContext();

#line 624 "pyarrow/_parquet.pxd"
  return __pyx_r;

#line 624 "pyarrow/_parquet.pxd"
}

/* "pyarrow/_parquet.pxd":641
 *         RowGroupMetaData parent
 * 
 *     cdef inline init(self, RowGroupMetaData parent, int i):             # <<<<<<<<<<<<<<
 *         self.up_metadata = parent.metadata.ColumnChunk(i)
 *         self.metadata = self.up_metadata.get()
 */

#line 641 "pyarrow/_parquet.pxd"


#line 641 "pyarrow/_parquet.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_19ColumnChunkMetaData_init(struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *__pyx_v_self, struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData *__pyx_v_parent, int __pyx_v_i) {

#line 641 "pyarrow/_parquet.pxd"
  PyObject *__pyx_r = NULL;

#line 641 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyDeclarations

#line 641 "pyarrow/_parquet.pxd"
  __Pyx_RefNannySetupContext("init", 1);

  /* "pyarrow/_parquet.pxd":642
 * 
 *     cdef inline init(self, RowGroupMetaData parent, int i):
 *         self.up_metadata = parent.metadata.ColumnChunk(i)             # <<<<<<<<<<<<<<
 *         self.metadata = self.up_metadata.get()
 *         self.parent = parent
 */

#line 642 "pyarrow/_parquet.pxd"
  __pyx_v_self->up_metadata = __pyx_v_parent->metadata->ColumnChunk(__pyx_v_i);

  /* "pyarrow/_parquet.pxd":643
 *     cdef inline init(self, RowGroupMetaData parent, int i):
 *         self.up_metadata = parent.metadata.ColumnChunk(i)
 *         self.metadata = self.up_metadata.get()             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */

#line 643 "pyarrow/_parquet.pxd"
  __pyx_v_self->metadata = __pyx_v_self->up_metadata.get();

  /* "pyarrow/_parquet.pxd":644
 *         self.up_metadata = parent.metadata.ColumnChunk(i)
 *         self.metadata = self.up_metadata.get()
 *         self.parent = parent             # <<<<<<<<<<<<<<
 * 
 * cdef class Statistics(_Weakrefable):
 */

#line 644 "pyarrow/_parquet.pxd"
  __Pyx_INCREF((PyObject *)__pyx_v_parent);

#line 644 "pyarrow/_parquet.pxd"
  __Pyx_GIVEREF((PyObject *)__pyx_v_parent);

#line 644 "pyarrow/_parquet.pxd"
  __Pyx_GOTREF((PyObject *)__pyx_v_self->parent);

#line 644 "pyarrow/_parquet.pxd"
  __Pyx_DECREF((PyObject *)__pyx_v_self->parent);

#line 644 "pyarrow/_parquet.pxd"
  __pyx_v_self->parent = __pyx_v_parent;

  /* "pyarrow/_parquet.pxd":641
 *         RowGroupMetaData parent
 * 
 *     cdef inline init(self, RowGroupMetaData parent, int i):             # <<<<<<<<<<<<<<
 *         self.up_metadata = parent.metadata.ColumnChunk(i)
 *         self.metadata = self.up_metadata.get()
 */

#line 641 "pyarrow/_parquet.pxd"


#line 641 "pyarrow/_parquet.pxd"
  /* function exit code */

#line 641 "pyarrow/_parquet.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 641 "pyarrow/_parquet.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 641 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyFinishContext();

#line 641 "pyarrow/_parquet.pxd"
  return __pyx_r;

#line 641 "pyarrow/_parquet.pxd"
}

/* "pyarrow/_parquet.pxd":651
 *         ColumnChunkMetaData parent
 * 
 *     cdef inline init(self, const shared_ptr[CStatistics]& statistics,             # <<<<<<<<<<<<<<
 *                      ColumnChunkMetaData parent):
 *         self.statistics = statistics
 */

#line 651 "pyarrow/_parquet.pxd"


#line 651 "pyarrow/_parquet.pxd"
static CYTHON_INLINE PyObject *__pyx_f_7pyarrow_8_parquet_10Statistics_init(struct __pyx_obj_7pyarrow_8_parquet_Statistics *__pyx_v_self, std::shared_ptr< parquet::Statistics>  const &__pyx_v_statistics, struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData *__pyx_v_parent) {

#line 651 "pyarrow/_parquet.pxd"
  PyObject *__pyx_r = NULL;

#line 651 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyDeclarations

#line 651 "pyarrow/_parquet.pxd"
  __Pyx_RefNannySetupContext("init", 1);

  /* "pyarrow/_parquet.pxd":653
 *     cdef inline init(self, const shared_ptr[CStatistics]& statistics,
 *                      ColumnChunkMetaData parent):
 *         self.statistics = statistics             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */

#line 653 "pyarrow/_parquet.pxd"
  __pyx_v_self->statistics = __pyx_v_statistics;

  /* "pyarrow/_parquet.pxd":654
 *                      ColumnChunkMetaData parent):
 *         self.statistics = statistics
 *         self.parent = parent             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "parquet/encryption/encryption.h" namespace "parquet" nogil:
 */

#line 654 "pyarrow/_parquet.pxd"
  __Pyx_INCREF((PyObject *)__pyx_v_parent);

#line 654 "pyarrow/_parquet.pxd"
  __Pyx_GIVEREF((PyObject *)__pyx_v_parent);

#line 654 "pyarrow/_parquet.pxd"
  __Pyx_GOTREF((PyObject *)__pyx_v_self->parent);

#line 654 "pyarrow/_parquet.pxd"
  __Pyx_DECREF((PyObject *)__pyx_v_self->parent);

#line 654 "pyarrow/_parquet.pxd"
  __pyx_v_self->parent = __pyx_v_parent;

  /* "pyarrow/_parquet.pxd":651
 *         ColumnChunkMetaData parent
 * 
 *     cdef inline init(self, const shared_ptr[CStatistics]& statistics,             # <<<<<<<<<<<<<<
 *                      ColumnChunkMetaData parent):
 *         self.statistics = statistics
 */

#line 651 "pyarrow/_parquet.pxd"


#line 651 "pyarrow/_parquet.pxd"
  /* function exit code */

#line 651 "pyarrow/_parquet.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 651 "pyarrow/_parquet.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 651 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyFinishContext();

#line 651 "pyarrow/_parquet.pxd"
  return __pyx_r;

#line 651 "pyarrow/_parquet.pxd"
}

/* "pyarrow/_parquet.pxd":671
 * 
 *     @staticmethod
 *     cdef inline FileDecryptionProperties wrap(             # <<<<<<<<<<<<<<
 *             shared_ptr[CFileDecryptionProperties] properties):
 * 
 */

#line 671 "pyarrow/_parquet.pxd"


#line 671 "pyarrow/_parquet.pxd"
static CYTHON_INLINE struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_f_7pyarrow_8_parquet_24FileDecryptionProperties_wrap(std::shared_ptr< parquet::FileDecryptionProperties>  __pyx_v_properties) {
  struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_v_result = NULL
#line 671 "pyarrow/_parquet.pxd"
;

#line 671 "pyarrow/_parquet.pxd"
  struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_r = NULL;

#line 671 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyDeclarations

#line 671 "pyarrow/_parquet.pxd"
  PyObject *__pyx_t_1 = NULL;

#line 671 "pyarrow/_parquet.pxd"
  int __pyx_lineno = 0;

#line 671 "pyarrow/_parquet.pxd"
  const char *__pyx_filename = NULL;

#line 671 "pyarrow/_parquet.pxd"
  int __pyx_clineno = 0;

#line 671 "pyarrow/_parquet.pxd"
  __Pyx_RefNannySetupContext("wrap", 1);

  /* "pyarrow/_parquet.pxd":674
 *             shared_ptr[CFileDecryptionProperties] properties):
 * 
 *         result = FileDecryptionProperties()             # <<<<<<<<<<<<<<
 *         result.properties = properties
 *         return result
 */

#line 674 "pyarrow/_parquet.pxd"
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 674, __pyx_L1_error)

#line 674 "pyarrow/_parquet.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 674 "pyarrow/_parquet.pxd"
  __pyx_v_result = ((struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *)__pyx_t_1);

#line 674 "pyarrow/_parquet.pxd"
  __pyx_t_1 = 0;

  /* "pyarrow/_parquet.pxd":675
 * 
 *         result = FileDecryptionProperties()
 *         result.properties = properties             # <<<<<<<<<<<<<<
 *         return result
 * 
 */

#line 675 "pyarrow/_parquet.pxd"
  __pyx_v_result->properties = __pyx_v_properties;

  /* "pyarrow/_parquet.pxd":676
 *         result = FileDecryptionProperties()
 *         result.properties = properties
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef inline shared_ptr[CFileDecryptionProperties] unwrap(self):
 */

#line 676 "pyarrow/_parquet.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_r);

#line 676 "pyarrow/_parquet.pxd"
  __Pyx_INCREF((PyObject *)__pyx_v_result);

#line 676 "pyarrow/_parquet.pxd"
  __pyx_r = __pyx_v_result;

#line 676 "pyarrow/_parquet.pxd"
  goto __pyx_L0;

  /* "pyarrow/_parquet.pxd":671
 * 
 *     @staticmethod
 *     cdef inline FileDecryptionProperties wrap(             # <<<<<<<<<<<<<<
 *             shared_ptr[CFileDecryptionProperties] properties):
 * 
 */

#line 671 "pyarrow/_parquet.pxd"


#line 671 "pyarrow/_parquet.pxd"
  /* function exit code */

#line 671 "pyarrow/_parquet.pxd"
  __pyx_L1_error:;

#line 671 "pyarrow/_parquet.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 671 "pyarrow/_parquet.pxd"
  __Pyx_AddTraceback("pyarrow._parquet.FileDecryptionProperties.wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 671 "pyarrow/_parquet.pxd"
  __pyx_r = 0;

#line 671 "pyarrow/_parquet.pxd"
  __pyx_L0:;

#line 671 "pyarrow/_parquet.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 671 "pyarrow/_parquet.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 671 "pyarrow/_parquet.pxd"
  __Pyx_RefNannyFinishContext();

#line 671 "pyarrow/_parquet.pxd"
  return __pyx_r;

#line 671 "pyarrow/_parquet.pxd"
}

/* "pyarrow/_parquet.pxd":678
 *         return result
 * 
 *     cdef inline shared_ptr[CFileDecryptionProperties] unwrap(self):             # <<<<<<<<<<<<<<
 *         return self.properties
 */

#line 678 "pyarrow/_parquet.pxd"


#line 678 "pyarrow/_parquet.pxd"
static CYTHON_INLINE std::shared_ptr< parquet::FileDecryptionProperties>  __pyx_f_7pyarrow_8_parquet_24FileDecryptionProperties_unwrap(struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties *__pyx_v_self) {

#line 678 "pyarrow/_parquet.pxd"
  std::shared_ptr< parquet::FileDecryptionProperties>  __pyx_r;

  /* "pyarrow/_parquet.pxd":679
 * 
 *     cdef inline shared_ptr[CFileDecryptionProperties] unwrap(self):
 *         return self.properties             # <<<<<<<<<<<<<<
 */

#line 679 "pyarrow/_parquet.pxd"
  __pyx_r = __pyx_v_self->properties;

#line 679 "pyarrow/_parquet.pxd"
  goto __pyx_L0;

  /* "pyarrow/_parquet.pxd":678
 *         return result
 * 
 *     cdef inline shared_ptr[CFileDecryptionProperties] unwrap(self):             # <<<<<<<<<<<<<<
 *         return self.properties
 */

#line 678 "pyarrow/_parquet.pxd"


#line 678 "pyarrow/_parquet.pxd"
  /* function exit code */

#line 678 "pyarrow/_parquet.pxd"
  __pyx_L0:;

#line 678 "pyarrow/_parquet.pxd"
  return __pyx_r;

#line 678 "pyarrow/_parquet.pxd"
}

/* "jollyjack/jollyjack_cython.pyx":20
 * from cpython cimport PyCapsule_GetPointer, PyCapsule_Import
 * 
 * cpdef void read_into_torch (parquet_path, FileMetaData metadata, tensor, row_group_indices, column_indices, pre_buffer=False):             # <<<<<<<<<<<<<<
 * 
 *     import torch
 */

#line 20 "jollyjack/jollyjack_cython.pyx"


#line 20 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pw_9jollyjack_16jollyjack_cython_1read_into_torch(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 20 "jollyjack/jollyjack_cython.pyx"
static void __pyx_f_9jollyjack_16jollyjack_cython_read_into_torch(PyObject *__pyx_v_parquet_path, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata, PyObject *__pyx_v_tensor, PyObject *__pyx_v_row_group_indices, PyObject *__pyx_v_column_indices, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_torch *__pyx_optional_args) {

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_v_pre_buffer = ((PyObject *)Py_False);
  CYTHON_UNUSED PyObject *__pyx_v_torch = NULL
#line 20 "jollyjack/jollyjack_cython.pyx"
;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyDeclarations

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_1 = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  unsigned int __pyx_t_4;

#line 20 "jollyjack/jollyjack_cython.pyx"
  struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_numpy __pyx_t_5;

#line 20 "jollyjack/jollyjack_cython.pyx"
  int __pyx_lineno = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  const char *__pyx_filename = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  int __pyx_clineno = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannySetupContext("read_into_torch", 1);

#line 20 "jollyjack/jollyjack_cython.pyx"
  if (__pyx_optional_args) {

#line 20 "jollyjack/jollyjack_cython.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 20 "jollyjack/jollyjack_cython.pyx"
      __pyx_v_pre_buffer = __pyx_optional_args->pre_buffer;

#line 20 "jollyjack/jollyjack_cython.pyx"
    }

#line 20 "jollyjack/jollyjack_cython.pyx"
  }

  /* "jollyjack/jollyjack_cython.pyx":22
 * cpdef void read_into_torch (parquet_path, FileMetaData metadata, tensor, row_group_indices, column_indices, pre_buffer=False):
 * 
 *     import torch             # <<<<<<<<<<<<<<
 * 
 *     read_into_numpy (parquet_path = parquet_path
 */

#line 22 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_torch, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)

#line 22 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_torch = __pyx_t_1;

#line 22 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_1 = 0;

  /* "jollyjack/jollyjack_cython.pyx":26
 *     read_into_numpy (parquet_path = parquet_path
 *         , metadata = metadata
 *         , np_array = tensor.numpy()             # <<<<<<<<<<<<<<
 *         , row_group_indices = row_group_indices
 *         , column_indices = column_indices
 */

#line 26 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tensor, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)

#line 26 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 26 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_3 = NULL;

#line 26 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_4 = 0;

#line 26 "jollyjack/jollyjack_cython.pyx"
  #if CYTHON_UNPACK_METHODS

#line 26 "jollyjack/jollyjack_cython.pyx"
  if (likely(PyMethod_Check(__pyx_t_2))) {

#line 26 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 26 "jollyjack/jollyjack_cython.pyx"
    if (likely(__pyx_t_3)) {

#line 26 "jollyjack/jollyjack_cython.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 26 "jollyjack/jollyjack_cython.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 26 "jollyjack/jollyjack_cython.pyx"
      __Pyx_INCREF(function);

#line 26 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 26 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_4 = 1;

#line 26 "jollyjack/jollyjack_cython.pyx"
    }

#line 26 "jollyjack/jollyjack_cython.pyx"
  }

#line 26 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 26 "jollyjack/jollyjack_cython.pyx"
  {

#line 26 "jollyjack/jollyjack_cython.pyx"
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};

#line 26 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);

#line 26 "jollyjack/jollyjack_cython.pyx"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 26 "jollyjack/jollyjack_cython.pyx"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)

#line 26 "jollyjack/jollyjack_cython.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 26 "jollyjack/jollyjack_cython.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 26 "jollyjack/jollyjack_cython.pyx"
  }

#line 26 "jollyjack/jollyjack_cython.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 26, __pyx_L1_error)

  /* "jollyjack/jollyjack_cython.pyx":24
 *     import torch
 * 
 *     read_into_numpy (parquet_path = parquet_path             # <<<<<<<<<<<<<<
 *         , metadata = metadata
 *         , np_array = tensor.numpy()
 */

#line 24 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_5.__pyx_n = 1;

#line 24 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_5.pre_buffer = __pyx_v_pre_buffer;

#line 24 "jollyjack/jollyjack_cython.pyx"
  __pyx_f_9jollyjack_16jollyjack_cython_read_into_numpy(__pyx_v_parquet_path, __pyx_v_metadata, ((PyArrayObject *)__pyx_t_1), __pyx_v_row_group_indices, __pyx_v_column_indices, 0, &__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L1_error)

#line 24 "jollyjack/jollyjack_cython.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "jollyjack/jollyjack_cython.pyx":32
 *     )
 * 
 *     return             # <<<<<<<<<<<<<<
 * 
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):
 */

#line 32 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L0;

  /* "jollyjack/jollyjack_cython.pyx":20
 * from cpython cimport PyCapsule_GetPointer, PyCapsule_Import
 * 
 * cpdef void read_into_torch (parquet_path, FileMetaData metadata, tensor, row_group_indices, column_indices, pre_buffer=False):             # <<<<<<<<<<<<<<
 * 
 *     import torch
 */

#line 20 "jollyjack/jollyjack_cython.pyx"


#line 20 "jollyjack/jollyjack_cython.pyx"
  /* function exit code */

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_AddTraceback("jollyjack.jollyjack_cython.read_into_torch", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L0:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_v_torch);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 20 "jollyjack/jollyjack_cython.pyx"
}

#line 20 "jollyjack/jollyjack_cython.pyx"


#line 20 "jollyjack/jollyjack_cython.pyx"
/* Python wrapper */

#line 20 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pw_9jollyjack_16jollyjack_cython_1read_into_torch(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 20 "jollyjack/jollyjack_cython.pyx"
PyDoc_STRVAR(__pyx_doc_9jollyjack_16jollyjack_cython_read_into_torch, "read_into_torch(parquet_path, FileMetaData metadata, tensor, row_group_indices, column_indices, pre_buffer=False) -> void");
static PyMethodDef __pyx_mdef_9jollyjack_16jollyjack_cython_1read_into_torch = 
#line 20 "jollyjack/jollyjack_cython.pyx"
{"read_into_torch", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9jollyjack_16jollyjack_cython_1read_into_torch, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9jollyjack_16jollyjack_cython_read_into_torch};

#line 20 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pw_9jollyjack_16jollyjack_cython_1read_into_torch(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_parquet_path = 0
#line 20 "jollyjack/jollyjack_cython.pyx"
;
  struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata = 0
#line 20 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_tensor = 0
#line 20 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_row_group_indices = 0
#line 20 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_column_indices = 0
#line 20 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_pre_buffer = 0
#line 20 "jollyjack/jollyjack_cython.pyx"
;

#line 20 "jollyjack/jollyjack_cython.pyx"
  #if !CYTHON_METH_FASTCALL

#line 20 "jollyjack/jollyjack_cython.pyx"
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;

#line 20 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 20 "jollyjack/jollyjack_cython.pyx"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject* values[6] = {0,0,0,0,0,0};

#line 20 "jollyjack/jollyjack_cython.pyx"
  int __pyx_lineno = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  const char *__pyx_filename = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  int __pyx_clineno = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_r = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyDeclarations

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannySetupContext("read_into_torch (wrapper)", 0);

#line 20 "jollyjack/jollyjack_cython.pyx"
  #if !CYTHON_METH_FASTCALL

#line 20 "jollyjack/jollyjack_cython.pyx"
  #if CYTHON_ASSUME_SAFE_MACROS

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 20 "jollyjack/jollyjack_cython.pyx"
  #else

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 20 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 20 "jollyjack/jollyjack_cython.pyx"
  {

#line 20 "jollyjack/jollyjack_cython.pyx"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parquet_path,&__pyx_n_s_metadata,&__pyx_n_s_tensor,&__pyx_n_s_row_group_indices,&__pyx_n_s_column_indices,&__pyx_n_s_pre_buffer,0};

#line 20 "jollyjack/jollyjack_cython.pyx"
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));

#line 20 "jollyjack/jollyjack_cython.pyx"
    if (__pyx_kwds) {

#line 20 "jollyjack/jollyjack_cython.pyx"
      Py_ssize_t kw_args;

#line 20 "jollyjack/jollyjack_cython.pyx"
      switch (__pyx_nargs) {
        case  6: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 20 "jollyjack/jollyjack_cython.pyx"
break;
        default: 
#line 20 "jollyjack/jollyjack_cython.pyx"
goto __pyx_L5_argtuple_error;

#line 20 "jollyjack/jollyjack_cython.pyx"
      }

#line 20 "jollyjack/jollyjack_cython.pyx"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 20 "jollyjack/jollyjack_cython.pyx"
      switch (__pyx_nargs) {

#line 20 "jollyjack/jollyjack_cython.pyx"
        case  0:

#line 20 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_parquet_path)) != 0)) {

#line 20 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);

#line 20 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)
        else 
#line 20 "jollyjack/jollyjack_cython.pyx"
goto __pyx_L5_argtuple_error;

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 20 "jollyjack/jollyjack_cython.pyx"
        case  1:

#line 20 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_metadata)) != 0)) {

#line 20 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);

#line 20 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_torch", 0, 5, 6, 1); 
#line 20 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 20 "jollyjack/jollyjack_cython.pyx"
        case  2:

#line 20 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tensor)) != 0)) {

#line 20 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);

#line 20 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_torch", 0, 5, 6, 2); 
#line 20 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 20 "jollyjack/jollyjack_cython.pyx"
        case  3:

#line 20 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_row_group_indices)) != 0)) {

#line 20 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);

#line 20 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_torch", 0, 5, 6, 3); 
#line 20 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 20 "jollyjack/jollyjack_cython.pyx"
        case  4:

#line 20 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_indices)) != 0)) {

#line 20 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);

#line 20 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_torch", 0, 5, 6, 4); 
#line 20 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 20 "jollyjack/jollyjack_cython.pyx"
        case  5:

#line 20 "jollyjack/jollyjack_cython.pyx"
        if (kw_args > 0) {

#line 20 "jollyjack/jollyjack_cython.pyx"
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pre_buffer);

#line 20 "jollyjack/jollyjack_cython.pyx"
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }

#line 20 "jollyjack/jollyjack_cython.pyx"
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
        }

#line 20 "jollyjack/jollyjack_cython.pyx"
      }

#line 20 "jollyjack/jollyjack_cython.pyx"
      if (unlikely(kw_args > 0)) {

#line 20 "jollyjack/jollyjack_cython.pyx"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 20 "jollyjack/jollyjack_cython.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_into_torch") < 0)) __PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
      }

#line 20 "jollyjack/jollyjack_cython.pyx"
    } else {

#line 20 "jollyjack/jollyjack_cython.pyx"
      switch (__pyx_nargs) {
        case  6: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);

#line 20 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 20 "jollyjack/jollyjack_cython.pyx"
values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);

#line 20 "jollyjack/jollyjack_cython.pyx"
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);

#line 20 "jollyjack/jollyjack_cython.pyx"
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 20 "jollyjack/jollyjack_cython.pyx"
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 20 "jollyjack/jollyjack_cython.pyx"
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 20 "jollyjack/jollyjack_cython.pyx"
        break;
        default: 
#line 20 "jollyjack/jollyjack_cython.pyx"
goto __pyx_L5_argtuple_error;

#line 20 "jollyjack/jollyjack_cython.pyx"
      }

#line 20 "jollyjack/jollyjack_cython.pyx"
    }

#line 20 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_parquet_path = values[0];

#line 20 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_metadata = ((struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *)values[1]);

#line 20 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_tensor = values[2];

#line 20 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_row_group_indices = values[3];

#line 20 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_column_indices = values[4];

#line 20 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_pre_buffer = values[5];

#line 20 "jollyjack/jollyjack_cython.pyx"
  }

#line 20 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L6_skip;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L5_argtuple_error:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RaiseArgtupleInvalid("read_into_torch", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 20, __pyx_L3_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L6_skip:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L3_error:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  {

#line 20 "jollyjack/jollyjack_cython.pyx"
    Py_ssize_t __pyx_temp;

#line 20 "jollyjack/jollyjack_cython.pyx"
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {

#line 20 "jollyjack/jollyjack_cython.pyx"
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);

#line 20 "jollyjack/jollyjack_cython.pyx"
    }

#line 20 "jollyjack/jollyjack_cython.pyx"
  }

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_AddTraceback("jollyjack.jollyjack_cython.read_into_torch", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 20 "jollyjack/jollyjack_cython.pyx"
  return NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_metadata), __pyx_ptype_7pyarrow_8_parquet_FileMetaData, 1, "metadata", 0))) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_r = 
#line 20 "jollyjack/jollyjack_cython.pyx"
__pyx_pf_9jollyjack_16jollyjack_cython_read_into_torch(__pyx_self, __pyx_v_parquet_path, __pyx_v_metadata, __pyx_v_tensor, __pyx_v_row_group_indices, __pyx_v_column_indices, __pyx_v_pre_buffer);

#line 20 "jollyjack/jollyjack_cython.pyx"


#line 20 "jollyjack/jollyjack_cython.pyx"
  /* function exit code */

#line 20 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_r = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L0:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  {

#line 20 "jollyjack/jollyjack_cython.pyx"
    Py_ssize_t __pyx_temp;

#line 20 "jollyjack/jollyjack_cython.pyx"
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {

#line 20 "jollyjack/jollyjack_cython.pyx"
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);

#line 20 "jollyjack/jollyjack_cython.pyx"
    }

#line 20 "jollyjack/jollyjack_cython.pyx"
  }

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 20 "jollyjack/jollyjack_cython.pyx"
  return __pyx_r;

#line 20 "jollyjack/jollyjack_cython.pyx"
}

#line 20 "jollyjack/jollyjack_cython.pyx"


#line 20 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pf_9jollyjack_16jollyjack_cython_read_into_torch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parquet_path, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata, PyObject *__pyx_v_tensor, PyObject *__pyx_v_row_group_indices, PyObject *__pyx_v_column_indices, PyObject *__pyx_v_pre_buffer) {

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_r = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyDeclarations

#line 20 "jollyjack/jollyjack_cython.pyx"
  struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_torch __pyx_t_1;

#line 20 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  int __pyx_lineno = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  const char *__pyx_filename = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  int __pyx_clineno = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannySetupContext("read_into_torch", 1);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_1.__pyx_n = 1;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_1.pre_buffer = __pyx_v_pre_buffer;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_f_9jollyjack_16jollyjack_cython_read_into_torch(__pyx_v_parquet_path, __pyx_v_metadata, __pyx_v_tensor, __pyx_v_row_group_indices, __pyx_v_column_indices, 0, &__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_r = __pyx_t_2;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = 0;

#line 20 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L0;

#line 20 "jollyjack/jollyjack_cython.pyx"


#line 20 "jollyjack/jollyjack_cython.pyx"
  /* function exit code */

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_AddTraceback("jollyjack.jollyjack_cython.read_into_torch", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_r = NULL;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_L0:;

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 20 "jollyjack/jollyjack_cython.pyx"
  return __pyx_r;

#line 20 "jollyjack/jollyjack_cython.pyx"
}

/* "jollyjack/jollyjack_cython.pyx":34
 *     return
 * 
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):             # <<<<<<<<<<<<<<
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')
 *     cdef vector[int] crow_group_indices = row_group_indices
 */

#line 34 "jollyjack/jollyjack_cython.pyx"


#line 34 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pw_9jollyjack_16jollyjack_cython_3read_into_numpy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 34 "jollyjack/jollyjack_cython.pyx"
static void __pyx_f_9jollyjack_16jollyjack_cython_read_into_numpy(PyObject *__pyx_v_parquet_path, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata, PyArrayObject *__pyx_v_np_array, PyObject *__pyx_v_row_group_indices, PyObject *__pyx_v_column_indices, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_numpy *__pyx_optional_args) {

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_v_pre_buffer = ((PyObject *)Py_False);

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_v_use_threads = ((PyObject *)Py_False);
  std::string __pyx_v_encoded_path
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  std::vector<int>  __pyx_v_crow_group_indices
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  std::vector<int>  __pyx_v_ccolumn_indices
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  uint32_t __pyx_v_cstride0_size
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  uint32_t __pyx_v_cstride1_size
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  CYTHON_UNUSED void *__pyx_v_cdata
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  bool __pyx_v_cpre_buffer
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  bool __pyx_v_cuse_threads
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  uint32_t __pyx_v_cbuffer_size
#line 34 "jollyjack/jollyjack_cython.pyx"
;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyDeclarations

#line 34 "jollyjack/jollyjack_cython.pyx"
  std::string __pyx_t_1;

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_t_2;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  unsigned int __pyx_t_6;

#line 34 "jollyjack/jollyjack_cython.pyx"
  std::string __pyx_t_7;

#line 34 "jollyjack/jollyjack_cython.pyx"
  std::vector<int>  __pyx_t_8;

#line 34 "jollyjack/jollyjack_cython.pyx"
  bool __pyx_t_9;

#line 34 "jollyjack/jollyjack_cython.pyx"
  Py_ssize_t __pyx_t_10;

#line 34 "jollyjack/jollyjack_cython.pyx"
  Py_UCS4 __pyx_t_11;

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_lineno = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  const char *__pyx_filename = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_clineno = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannySetupContext("read_into_numpy", 1);

#line 34 "jollyjack/jollyjack_cython.pyx"
  if (__pyx_optional_args) {

#line 34 "jollyjack/jollyjack_cython.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 34 "jollyjack/jollyjack_cython.pyx"
      __pyx_v_pre_buffer = __pyx_optional_args->pre_buffer;

#line 34 "jollyjack/jollyjack_cython.pyx"
      if (__pyx_optional_args->__pyx_n > 1) {

#line 34 "jollyjack/jollyjack_cython.pyx"
        __pyx_v_use_threads = __pyx_optional_args->use_threads;

#line 34 "jollyjack/jollyjack_cython.pyx"
      }

#line 34 "jollyjack/jollyjack_cython.pyx"
    }

#line 34 "jollyjack/jollyjack_cython.pyx"
  }

  /* "jollyjack/jollyjack_cython.pyx":35
 * 
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')             # <<<<<<<<<<<<<<
 *     cdef vector[int] crow_group_indices = row_group_indices
 *     cdef vector[int] ccolumn_indices = column_indices
 */

#line 35 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = (__pyx_v_parquet_path != Py_None);

#line 35 "jollyjack/jollyjack_cython.pyx"
  if (__pyx_t_2) {

#line 35 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_parquet_path, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "jollyjack/jollyjack_cython.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 35 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_5 = NULL;

#line 35 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_6 = 0;

#line 35 "jollyjack/jollyjack_cython.pyx"
    #if CYTHON_UNPACK_METHODS

#line 35 "jollyjack/jollyjack_cython.pyx"
    if (likely(PyMethod_Check(__pyx_t_4))) {

#line 35 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 35 "jollyjack/jollyjack_cython.pyx"
      if (likely(__pyx_t_5)) {

#line 35 "jollyjack/jollyjack_cython.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 35 "jollyjack/jollyjack_cython.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 35 "jollyjack/jollyjack_cython.pyx"
        __Pyx_INCREF(function);

#line 35 "jollyjack/jollyjack_cython.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 35 "jollyjack/jollyjack_cython.pyx"
        __pyx_t_6 = 1;

#line 35 "jollyjack/jollyjack_cython.pyx"
      }

#line 35 "jollyjack/jollyjack_cython.pyx"
    }

#line 35 "jollyjack/jollyjack_cython.pyx"
    #endif

#line 35 "jollyjack/jollyjack_cython.pyx"
    {

#line 35 "jollyjack/jollyjack_cython.pyx"
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_n_u_utf8};

#line 35 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);

#line 35 "jollyjack/jollyjack_cython.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 35 "jollyjack/jollyjack_cython.pyx"
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 35 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 35 "jollyjack/jollyjack_cython.pyx"
    }

#line 35 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_7 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "jollyjack/jollyjack_cython.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 35 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_1 = __pyx_t_7;

#line 35 "jollyjack/jollyjack_cython.pyx"
  } else {

#line 35 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_7 = __pyx_convert_string_from_py_6libcpp_6string_std__in_string(__pyx_kp_b__5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L1_error)

#line 35 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_1 = __pyx_t_7;

#line 35 "jollyjack/jollyjack_cython.pyx"
  }

#line 35 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_encoded_path = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "jollyjack/jollyjack_cython.pyx":36
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')
 *     cdef vector[int] crow_group_indices = row_group_indices             # <<<<<<<<<<<<<<
 *     cdef vector[int] ccolumn_indices = column_indices
 *     cdef uint32_t cstride0_size = np_array.strides[0]
 */

#line 36 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_8 = __pyx_convert_vector_from_py_int(__pyx_v_row_group_indices); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L1_error)

#line 36 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_crow_group_indices = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

  /* "jollyjack/jollyjack_cython.pyx":37
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')
 *     cdef vector[int] crow_group_indices = row_group_indices
 *     cdef vector[int] ccolumn_indices = column_indices             # <<<<<<<<<<<<<<
 *     cdef uint32_t cstride0_size = np_array.strides[0]
 *     cdef uint32_t cstride1_size = np_array.strides[1]
 */

#line 37 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_8 = __pyx_convert_vector_from_py_int(__pyx_v_column_indices); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 37, __pyx_L1_error)

#line 37 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_ccolumn_indices = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

  /* "jollyjack/jollyjack_cython.pyx":38
 *     cdef vector[int] crow_group_indices = row_group_indices
 *     cdef vector[int] ccolumn_indices = column_indices
 *     cdef uint32_t cstride0_size = np_array.strides[0]             # <<<<<<<<<<<<<<
 *     cdef uint32_t cstride1_size = np_array.strides[1]
 *     cdef void* cdata = np_array.data
 */

#line 38 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_cstride0_size = (__pyx_f_5numpy_7ndarray_7strides_strides(__pyx_v_np_array)[0]);

  /* "jollyjack/jollyjack_cython.pyx":39
 *     cdef vector[int] ccolumn_indices = column_indices
 *     cdef uint32_t cstride0_size = np_array.strides[0]
 *     cdef uint32_t cstride1_size = np_array.strides[1]             # <<<<<<<<<<<<<<
 *     cdef void* cdata = np_array.data
 *     cdef bool cpre_buffer = pre_buffer
 */

#line 39 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_cstride1_size = (__pyx_f_5numpy_7ndarray_7strides_strides(__pyx_v_np_array)[1]);

  /* "jollyjack/jollyjack_cython.pyx":40
 *     cdef uint32_t cstride0_size = np_array.strides[0]
 *     cdef uint32_t cstride1_size = np_array.strides[1]
 *     cdef void* cdata = np_array.data             # <<<<<<<<<<<<<<
 *     cdef bool cpre_buffer = pre_buffer
 *     cdef bool cuse_threads = use_threads
 */

#line 40 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_cdata = __pyx_f_5numpy_7ndarray_4data_data(__pyx_v_np_array);

  /* "jollyjack/jollyjack_cython.pyx":41
 *     cdef uint32_t cstride1_size = np_array.strides[1]
 *     cdef void* cdata = np_array.data
 *     cdef bool cpre_buffer = pre_buffer             # <<<<<<<<<<<<<<
 *     cdef bool cuse_threads = use_threads
 *     cdef uint32_t cbuffer_size = (np_array.shape[0]) * cstride0_size + (np_array.shape[1] - 1) * cstride1_size
 */

#line 41 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_pre_buffer); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 41, __pyx_L1_error)

#line 41 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_cpre_buffer = __pyx_t_9;

  /* "jollyjack/jollyjack_cython.pyx":42
 *     cdef void* cdata = np_array.data
 *     cdef bool cpre_buffer = pre_buffer
 *     cdef bool cuse_threads = use_threads             # <<<<<<<<<<<<<<
 *     cdef uint32_t cbuffer_size = (np_array.shape[0]) * cstride0_size + (np_array.shape[1] - 1) * cstride1_size
 * 
 */

#line 42 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_use_threads); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)

#line 42 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_cuse_threads = __pyx_t_9;

  /* "jollyjack/jollyjack_cython.pyx":43
 *     cdef bool cpre_buffer = pre_buffer
 *     cdef bool cuse_threads = use_threads
 *     cdef uint32_t cbuffer_size = (np_array.shape[0]) * cstride0_size + (np_array.shape[1] - 1) * cstride1_size             # <<<<<<<<<<<<<<
 * 
 *     # Ensure the input is a 2D array
 */

#line 43 "jollyjack/jollyjack_cython.pyx"
  __pyx_v_cbuffer_size = (((__pyx_f_5numpy_7ndarray_5shape_shape(__pyx_v_np_array)[0]) * __pyx_v_cstride0_size) + (((__pyx_f_5numpy_7ndarray_5shape_shape(__pyx_v_np_array)[1]) - 1) * __pyx_v_cstride1_size));

  /* "jollyjack/jollyjack_cython.pyx":46
 * 
 *     # Ensure the input is a 2D array
 *     assert np_array.ndim == 2, f"Unexpected np_array.ndim, {np_array.ndim} != 2"             # <<<<<<<<<<<<<<
 * 
 *     # Ensure the row and column indices are within the array bounds
 */

#line 46 "jollyjack/jollyjack_cython.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 46 "jollyjack/jollyjack_cython.pyx"
  if (unlikely(__pyx_assertions_enabled())) {

#line 46 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_2 = (__pyx_f_5numpy_7ndarray_4ndim_ndim(__pyx_v_np_array) == 2);

#line 46 "jollyjack/jollyjack_cython.pyx"
    if (unlikely(!__pyx_t_2)) {

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 = 0;

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_11 = 127;

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_INCREF(__pyx_kp_u_Unexpected_np_array_ndim);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 += 26;

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GIVEREF(__pyx_kp_u_Unexpected_np_array_ndim);

#line 46 "jollyjack/jollyjack_cython.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Unexpected_np_array_ndim);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_f_5numpy_7ndarray_4ndim_ndim(__pyx_v_np_array), 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L1_error)

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 46 "jollyjack/jollyjack_cython.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_4 = 0;

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_INCREF(__pyx_kp_u_2);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 += 5;

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GIVEREF(__pyx_kp_u_2);

#line 46 "jollyjack/jollyjack_cython.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_2);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L1_error)

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_t_4, 0, 0);

#line 46 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 46 "jollyjack/jollyjack_cython.pyx"
      __PYX_ERR(0, 46, __pyx_L1_error)

#line 46 "jollyjack/jollyjack_cython.pyx"
    }

#line 46 "jollyjack/jollyjack_cython.pyx"
  }

#line 46 "jollyjack/jollyjack_cython.pyx"
  #else

#line 46 "jollyjack/jollyjack_cython.pyx"
  if ((1)); else __PYX_ERR(0, 46, __pyx_L1_error)

#line 46 "jollyjack/jollyjack_cython.pyx"
  #endif

  /* "jollyjack/jollyjack_cython.pyx":49
 * 
 *     # Ensure the row and column indices are within the array bounds
 *     assert ccolumn_indices.size() == np_array.shape[1], f"Requested to read {ccolumn_indices.size()} columns, but the number of columns in numpy array is {np_array.shape[1]}"             # <<<<<<<<<<<<<<
 *     assert np_array.strides[0] <= np_array.strides[1], f"Expected array in a Fortran-style (column-major) order"
 * 
 */

#line 49 "jollyjack/jollyjack_cython.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 49 "jollyjack/jollyjack_cython.pyx"
  if (unlikely(__pyx_assertions_enabled())) {

#line 49 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_2 = (__pyx_v_ccolumn_indices.size() == (__pyx_f_5numpy_7ndarray_5shape_shape(__pyx_v_np_array)[1]));

#line 49 "jollyjack/jollyjack_cython.pyx"
    if (unlikely(!__pyx_t_2)) {

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 = 0;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_11 = 127;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_INCREF(__pyx_kp_u_Requested_to_read);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 += 18;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GIVEREF(__pyx_kp_u_Requested_to_read);

#line 49 "jollyjack/jollyjack_cython.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Requested_to_read);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_ccolumn_indices.size()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_11;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GIVEREF(__pyx_t_5);

#line 49 "jollyjack/jollyjack_cython.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_5 = 0;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_INCREF(__pyx_kp_u_columns_but_the_number_of_colum);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 += 54;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GIVEREF(__pyx_kp_u_columns_but_the_number_of_colum);

#line 49 "jollyjack/jollyjack_cython.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_columns_but_the_number_of_colum);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_5 = __Pyx_PyInt_From_npy_intp((__pyx_f_5numpy_7ndarray_5shape_shape(__pyx_v_np_array)[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 49 "jollyjack/jollyjack_cython.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_3 = 0;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_t_3, 0, 0);

#line 49 "jollyjack/jollyjack_cython.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 49 "jollyjack/jollyjack_cython.pyx"
      __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
    }

#line 49 "jollyjack/jollyjack_cython.pyx"
  }

#line 49 "jollyjack/jollyjack_cython.pyx"
  #else

#line 49 "jollyjack/jollyjack_cython.pyx"
  if ((1)); else __PYX_ERR(0, 49, __pyx_L1_error)

#line 49 "jollyjack/jollyjack_cython.pyx"
  #endif

  /* "jollyjack/jollyjack_cython.pyx":50
 *     # Ensure the row and column indices are within the array bounds
 *     assert ccolumn_indices.size() == np_array.shape[1], f"Requested to read {ccolumn_indices.size()} columns, but the number of columns in numpy array is {np_array.shape[1]}"
 *     assert np_array.strides[0] <= np_array.strides[1], f"Expected array in a Fortran-style (column-major) order"             # <<<<<<<<<<<<<<
 * 
 *     with nogil:
 */

#line 50 "jollyjack/jollyjack_cython.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 50 "jollyjack/jollyjack_cython.pyx"
  if (unlikely(__pyx_assertions_enabled())) {

#line 50 "jollyjack/jollyjack_cython.pyx"
    __pyx_t_2 = ((__pyx_f_5numpy_7ndarray_7strides_strides(__pyx_v_np_array)[0]) <= (__pyx_f_5numpy_7ndarray_7strides_strides(__pyx_v_np_array)[1]));

#line 50 "jollyjack/jollyjack_cython.pyx"
    if (unlikely(!__pyx_t_2)) {

#line 50 "jollyjack/jollyjack_cython.pyx"
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_Expected_array_in_a_Fortran_styl, 0, 0);

#line 50 "jollyjack/jollyjack_cython.pyx"
      __PYX_ERR(0, 50, __pyx_L1_error)

#line 50 "jollyjack/jollyjack_cython.pyx"
    }

#line 50 "jollyjack/jollyjack_cython.pyx"
  }

#line 50 "jollyjack/jollyjack_cython.pyx"
  #else

#line 50 "jollyjack/jollyjack_cython.pyx"
  if ((1)); else __PYX_ERR(0, 50, __pyx_L1_error)

#line 50 "jollyjack/jollyjack_cython.pyx"
  #endif

  /* "jollyjack/jollyjack_cython.pyx":52
 *     assert np_array.strides[0] <= np_array.strides[1], f"Expected array in a Fortran-style (column-major) order"
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         cjollyjack.ReadIntoMemory (encoded_path.c_str(), metadata.sp_metadata
 *             , np_array.data
 */

#line 52 "jollyjack/jollyjack_cython.pyx"
  {

#line 52 "jollyjack/jollyjack_cython.pyx"
      #ifdef WITH_THREAD

#line 52 "jollyjack/jollyjack_cython.pyx"
      PyThreadState *_save;

#line 52 "jollyjack/jollyjack_cython.pyx"
      _save = NULL;

#line 52 "jollyjack/jollyjack_cython.pyx"
      Py_UNBLOCK_THREADS

#line 52 "jollyjack/jollyjack_cython.pyx"
      __Pyx_FastGIL_Remember();

#line 52 "jollyjack/jollyjack_cython.pyx"
      #endif

#line 52 "jollyjack/jollyjack_cython.pyx"
      /*try:*/ {

        /* "jollyjack/jollyjack_cython.pyx":53
 * 
 *     with nogil:
 *         cjollyjack.ReadIntoMemory (encoded_path.c_str(), metadata.sp_metadata             # <<<<<<<<<<<<<<
 *             , np_array.data
 *             , cbuffer_size
 */

#line 53 "jollyjack/jollyjack_cython.pyx"
        try {

#line 53 "jollyjack/jollyjack_cython.pyx"
          ReadIntoMemory(__pyx_v_encoded_path.c_str(), __pyx_v_metadata->sp_metadata, __pyx_f_5numpy_7ndarray_4data_data(__pyx_v_np_array), __pyx_v_cbuffer_size, __pyx_v_cstride0_size, __pyx_v_cstride1_size, __pyx_v_crow_group_indices, __pyx_v_ccolumn_indices, __pyx_v_cpre_buffer, __pyx_v_cuse_threads);

#line 53 "jollyjack/jollyjack_cython.pyx"
        } catch(...) {

#line 53 "jollyjack/jollyjack_cython.pyx"
          #ifdef WITH_THREAD
          PyGILState_STATE 
#line 53 "jollyjack/jollyjack_cython.pyx"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 53 "jollyjack/jollyjack_cython.pyx"
          #endif

#line 53 "jollyjack/jollyjack_cython.pyx"
          __Pyx_CppExn2PyErr();

#line 53 "jollyjack/jollyjack_cython.pyx"
          #ifdef WITH_THREAD

#line 53 "jollyjack/jollyjack_cython.pyx"
          __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 53 "jollyjack/jollyjack_cython.pyx"
          #endif

#line 53 "jollyjack/jollyjack_cython.pyx"
          __PYX_ERR(0, 53, __pyx_L4_error)

#line 53 "jollyjack/jollyjack_cython.pyx"
        }

        /* "jollyjack/jollyjack_cython.pyx":62
 *             , cpre_buffer
 *             , cuse_threads)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     return
 */

#line 62 "jollyjack/jollyjack_cython.pyx"
        goto __pyx_L3_return;

#line 62 "jollyjack/jollyjack_cython.pyx"
      }

      /* "jollyjack/jollyjack_cython.pyx":52
 *     assert np_array.strides[0] <= np_array.strides[1], f"Expected array in a Fortran-style (column-major) order"
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         cjollyjack.ReadIntoMemory (encoded_path.c_str(), metadata.sp_metadata
 *             , np_array.data
 */

#line 52 "jollyjack/jollyjack_cython.pyx"
      /*finally:*/ {

#line 52 "jollyjack/jollyjack_cython.pyx"
        __pyx_L3_return: {

#line 52 "jollyjack/jollyjack_cython.pyx"
          #ifdef WITH_THREAD

#line 52 "jollyjack/jollyjack_cython.pyx"
          __Pyx_FastGIL_Forget();

#line 52 "jollyjack/jollyjack_cython.pyx"
          Py_BLOCK_THREADS

#line 52 "jollyjack/jollyjack_cython.pyx"
          #endif

#line 52 "jollyjack/jollyjack_cython.pyx"
          goto __pyx_L0;

#line 52 "jollyjack/jollyjack_cython.pyx"
        }

#line 52 "jollyjack/jollyjack_cython.pyx"
        __pyx_L4_error: {

#line 52 "jollyjack/jollyjack_cython.pyx"
          #ifdef WITH_THREAD

#line 52 "jollyjack/jollyjack_cython.pyx"
          __Pyx_FastGIL_Forget();

#line 52 "jollyjack/jollyjack_cython.pyx"
          Py_BLOCK_THREADS

#line 52 "jollyjack/jollyjack_cython.pyx"
          #endif

#line 52 "jollyjack/jollyjack_cython.pyx"
          goto __pyx_L1_error;

#line 52 "jollyjack/jollyjack_cython.pyx"
        }

#line 52 "jollyjack/jollyjack_cython.pyx"
      }

#line 52 "jollyjack/jollyjack_cython.pyx"
  }

  /* "jollyjack/jollyjack_cython.pyx":34
 *     return
 * 
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):             # <<<<<<<<<<<<<<
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')
 *     cdef vector[int] crow_group_indices = row_group_indices
 */

#line 34 "jollyjack/jollyjack_cython.pyx"


#line 34 "jollyjack/jollyjack_cython.pyx"
  /* function exit code */

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_AddTraceback("jollyjack.jollyjack_cython.read_into_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L0:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "jollyjack/jollyjack_cython.pyx"
}

#line 34 "jollyjack/jollyjack_cython.pyx"


#line 34 "jollyjack/jollyjack_cython.pyx"
/* Python wrapper */

#line 34 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pw_9jollyjack_16jollyjack_cython_3read_into_numpy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/

#line 34 "jollyjack/jollyjack_cython.pyx"
PyDoc_STRVAR(__pyx_doc_9jollyjack_16jollyjack_cython_2read_into_numpy, "read_into_numpy(parquet_path, FileMetaData metadata, ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False) -> void");
static PyMethodDef __pyx_mdef_9jollyjack_16jollyjack_cython_3read_into_numpy = 
#line 34 "jollyjack/jollyjack_cython.pyx"
{"read_into_numpy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9jollyjack_16jollyjack_cython_3read_into_numpy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9jollyjack_16jollyjack_cython_2read_into_numpy};

#line 34 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pw_9jollyjack_16jollyjack_cython_3read_into_numpy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_parquet_path = 0
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata = 0
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  PyArrayObject *__pyx_v_np_array = 0
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_row_group_indices = 0
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_column_indices = 0
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_pre_buffer = 0
#line 34 "jollyjack/jollyjack_cython.pyx"
;
  PyObject *__pyx_v_use_threads = 0
#line 34 "jollyjack/jollyjack_cython.pyx"
;

#line 34 "jollyjack/jollyjack_cython.pyx"
  #if !CYTHON_METH_FASTCALL

#line 34 "jollyjack/jollyjack_cython.pyx"
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;

#line 34 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 34 "jollyjack/jollyjack_cython.pyx"
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject* values[7] = {0,0,0,0,0,0,0};

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_lineno = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  const char *__pyx_filename = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_clineno = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_r = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyDeclarations

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannySetupContext("read_into_numpy (wrapper)", 0);

#line 34 "jollyjack/jollyjack_cython.pyx"
  #if !CYTHON_METH_FASTCALL

#line 34 "jollyjack/jollyjack_cython.pyx"
  #if CYTHON_ASSUME_SAFE_MACROS

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);

#line 34 "jollyjack/jollyjack_cython.pyx"
  #else

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 34 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);

#line 34 "jollyjack/jollyjack_cython.pyx"
  {

#line 34 "jollyjack/jollyjack_cython.pyx"
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parquet_path,&__pyx_n_s_metadata,&__pyx_n_s_np_array,&__pyx_n_s_row_group_indices,&__pyx_n_s_column_indices,&__pyx_n_s_pre_buffer,&__pyx_n_s_use_threads,0};

#line 34 "jollyjack/jollyjack_cython.pyx"
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));

#line 34 "jollyjack/jollyjack_cython.pyx"
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));

#line 34 "jollyjack/jollyjack_cython.pyx"
    if (__pyx_kwds) {

#line 34 "jollyjack/jollyjack_cython.pyx"
      Py_ssize_t kw_args;

#line 34 "jollyjack/jollyjack_cython.pyx"
      switch (__pyx_nargs) {
        case  7: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  0: 
#line 34 "jollyjack/jollyjack_cython.pyx"
break;
        default: 
#line 34 "jollyjack/jollyjack_cython.pyx"
goto __pyx_L5_argtuple_error;

#line 34 "jollyjack/jollyjack_cython.pyx"
      }

#line 34 "jollyjack/jollyjack_cython.pyx"
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);

#line 34 "jollyjack/jollyjack_cython.pyx"
      switch (__pyx_nargs) {

#line 34 "jollyjack/jollyjack_cython.pyx"
        case  0:

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_parquet_path)) != 0)) {

#line 34 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);

#line 34 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)
        else 
#line 34 "jollyjack/jollyjack_cython.pyx"
goto __pyx_L5_argtuple_error;

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 34 "jollyjack/jollyjack_cython.pyx"
        case  1:

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_metadata)) != 0)) {

#line 34 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);

#line 34 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_numpy", 0, 5, 7, 1); 
#line 34 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 34 "jollyjack/jollyjack_cython.pyx"
        case  2:

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_np_array)) != 0)) {

#line 34 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);

#line 34 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_numpy", 0, 5, 7, 2); 
#line 34 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 34 "jollyjack/jollyjack_cython.pyx"
        case  3:

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_row_group_indices)) != 0)) {

#line 34 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);

#line 34 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_numpy", 0, 5, 7, 3); 
#line 34 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 34 "jollyjack/jollyjack_cython.pyx"
        case  4:

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_column_indices)) != 0)) {

#line 34 "jollyjack/jollyjack_cython.pyx"
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);

#line 34 "jollyjack/jollyjack_cython.pyx"
          kw_args--;

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("read_into_numpy", 0, 5, 7, 4); 
#line 34 "jollyjack/jollyjack_cython.pyx"
__PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 34 "jollyjack/jollyjack_cython.pyx"
        case  5:

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (kw_args > 0) {

#line 34 "jollyjack/jollyjack_cython.pyx"
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pre_buffer);

#line 34 "jollyjack/jollyjack_cython.pyx"
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }

#line 34 "jollyjack/jollyjack_cython.pyx"
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;

#line 34 "jollyjack/jollyjack_cython.pyx"
        case  6:

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (kw_args > 0) {

#line 34 "jollyjack/jollyjack_cython.pyx"
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_use_threads);

#line 34 "jollyjack/jollyjack_cython.pyx"
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }

#line 34 "jollyjack/jollyjack_cython.pyx"
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
        }

#line 34 "jollyjack/jollyjack_cython.pyx"
      }

#line 34 "jollyjack/jollyjack_cython.pyx"
      if (unlikely(kw_args > 0)) {

#line 34 "jollyjack/jollyjack_cython.pyx"
        const Py_ssize_t kwd_pos_args = __pyx_nargs;

#line 34 "jollyjack/jollyjack_cython.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_into_numpy") < 0)) __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
      }

#line 34 "jollyjack/jollyjack_cython.pyx"
    } else {

#line 34 "jollyjack/jollyjack_cython.pyx"
      switch (__pyx_nargs) {
        case  7: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  6: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);

#line 34 "jollyjack/jollyjack_cython.pyx"
        CYTHON_FALLTHROUGH;
        case  5: 
#line 34 "jollyjack/jollyjack_cython.pyx"
values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);

#line 34 "jollyjack/jollyjack_cython.pyx"
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);

#line 34 "jollyjack/jollyjack_cython.pyx"
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);

#line 34 "jollyjack/jollyjack_cython.pyx"
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);

#line 34 "jollyjack/jollyjack_cython.pyx"
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);

#line 34 "jollyjack/jollyjack_cython.pyx"
        break;
        default: 
#line 34 "jollyjack/jollyjack_cython.pyx"
goto __pyx_L5_argtuple_error;

#line 34 "jollyjack/jollyjack_cython.pyx"
      }

#line 34 "jollyjack/jollyjack_cython.pyx"
    }

#line 34 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_parquet_path = values[0];

#line 34 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_metadata = ((struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *)values[1]);

#line 34 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_np_array = ((PyArrayObject *)values[2]);

#line 34 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_row_group_indices = values[3];

#line 34 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_column_indices = values[4];

#line 34 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_pre_buffer = values[5];

#line 34 "jollyjack/jollyjack_cython.pyx"
    __pyx_v_use_threads = values[6];

#line 34 "jollyjack/jollyjack_cython.pyx"
  }

#line 34 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L6_skip;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L5_argtuple_error:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RaiseArgtupleInvalid("read_into_numpy", 0, 5, 7, __pyx_nargs); __PYX_ERR(0, 34, __pyx_L3_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L6_skip:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L3_error:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  {

#line 34 "jollyjack/jollyjack_cython.pyx"
    Py_ssize_t __pyx_temp;

#line 34 "jollyjack/jollyjack_cython.pyx"
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {

#line 34 "jollyjack/jollyjack_cython.pyx"
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);

#line 34 "jollyjack/jollyjack_cython.pyx"
    }

#line 34 "jollyjack/jollyjack_cython.pyx"
  }

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_AddTraceback("jollyjack.jollyjack_cython.read_into_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "jollyjack/jollyjack_cython.pyx"
  return NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_metadata), __pyx_ptype_7pyarrow_8_parquet_FileMetaData, 1, "metadata", 0))) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_array), __pyx_ptype_5numpy_ndarray, 1, "np_array", 0))) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_r = 
#line 34 "jollyjack/jollyjack_cython.pyx"
__pyx_pf_9jollyjack_16jollyjack_cython_2read_into_numpy(__pyx_self, __pyx_v_parquet_path, __pyx_v_metadata, __pyx_v_np_array, __pyx_v_row_group_indices, __pyx_v_column_indices, __pyx_v_pre_buffer, __pyx_v_use_threads);

#line 34 "jollyjack/jollyjack_cython.pyx"


#line 34 "jollyjack/jollyjack_cython.pyx"
  /* function exit code */

#line 34 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_r = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L0:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  {

#line 34 "jollyjack/jollyjack_cython.pyx"
    Py_ssize_t __pyx_temp;

#line 34 "jollyjack/jollyjack_cython.pyx"
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {

#line 34 "jollyjack/jollyjack_cython.pyx"
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);

#line 34 "jollyjack/jollyjack_cython.pyx"
    }

#line 34 "jollyjack/jollyjack_cython.pyx"
  }

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "jollyjack/jollyjack_cython.pyx"
  return __pyx_r;

#line 34 "jollyjack/jollyjack_cython.pyx"
}

#line 34 "jollyjack/jollyjack_cython.pyx"


#line 34 "jollyjack/jollyjack_cython.pyx"
static PyObject *__pyx_pf_9jollyjack_16jollyjack_cython_2read_into_numpy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parquet_path, struct __pyx_obj_7pyarrow_8_parquet_FileMetaData *__pyx_v_metadata, PyArrayObject *__pyx_v_np_array, PyObject *__pyx_v_row_group_indices, PyObject *__pyx_v_column_indices, PyObject *__pyx_v_pre_buffer, PyObject *__pyx_v_use_threads) {

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_r = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyDeclarations

#line 34 "jollyjack/jollyjack_cython.pyx"
  struct __pyx_opt_args_9jollyjack_16jollyjack_cython_read_into_numpy __pyx_t_1;

#line 34 "jollyjack/jollyjack_cython.pyx"
  PyObject *__pyx_t_2 = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_lineno = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  const char *__pyx_filename = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  int __pyx_clineno = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannySetupContext("read_into_numpy", 1);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_1.__pyx_n = 2;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_1.pre_buffer = __pyx_v_pre_buffer;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_1.use_threads = __pyx_v_use_threads;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_f_9jollyjack_16jollyjack_cython_read_into_numpy(__pyx_v_parquet_path, __pyx_v_metadata, __pyx_v_np_array, __pyx_v_row_group_indices, __pyx_v_column_indices, 0, &__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_r = __pyx_t_2;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L0;

#line 34 "jollyjack/jollyjack_cython.pyx"


#line 34 "jollyjack/jollyjack_cython.pyx"
  /* function exit code */

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_AddTraceback("jollyjack.jollyjack_cython.read_into_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_r = NULL;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L0:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "jollyjack/jollyjack_cython.pyx"
  return __pyx_r;

#line 34 "jollyjack/jollyjack_cython.pyx"
}

#line 34 "jollyjack/jollyjack_cython.pyx"


#line 34 "jollyjack/jollyjack_cython.pyx"
static PyMethodDef __pyx_methods[] = {

#line 34 "jollyjack/jollyjack_cython.pyx"
  {0, 0, 0, 0}

#line 34 "jollyjack/jollyjack_cython.pyx"
};

#line 34 "jollyjack/jollyjack_cython.pyx"
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0, 0},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_kp_u_Expected_array_in_a_Fortran_styl, __pyx_k_Expected_array_in_a_Fortran_styl, sizeof(__pyx_k_Expected_array_in_a_Fortran_styl), 0, 1, 0, 0},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_u_Requested_to_read, __pyx_k_Requested_to_read, sizeof(__pyx_k_Requested_to_read), 0, 1, 0, 0},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_kp_u_Time_zones_are_not_available_fro, __pyx_k_Time_zones_are_not_available_fro, sizeof(__pyx_k_Time_zones_are_not_available_fro), 0, 1, 0, 0},
    {&__pyx_kp_u_Unexpected_np_array_ndim, __pyx_k_Unexpected_np_array_ndim, sizeof(__pyx_k_Unexpected_np_array_ndim), 0, 1, 0, 0},
    {&__pyx_n_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 1},
    {&__pyx_n_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 1},
    {&__pyx_kp_b__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 0, 0},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_column_indices, __pyx_k_column_indices, sizeof(__pyx_k_column_indices), 0, 0, 1, 1},
    {&__pyx_kp_u_columns_but_the_number_of_colum, __pyx_k_columns_but_the_number_of_colum, sizeof(__pyx_k_columns_but_the_number_of_colum), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_jollyjack_jollyjack_cython, __pyx_k_jollyjack_jollyjack_cython, sizeof(__pyx_k_jollyjack_jollyjack_cython), 0, 0, 1, 1},
    {&__pyx_kp_s_jollyjack_jollyjack_cython_pyx, __pyx_k_jollyjack_jollyjack_cython_pyx, sizeof(__pyx_k_jollyjack_jollyjack_cython_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_metadata, __pyx_k_metadata, sizeof(__pyx_k_metadata), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_np_array, __pyx_k_np_array, sizeof(__pyx_k_np_array), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_u_numpy__core_multiarray_failed_to, __pyx_k_numpy__core_multiarray_failed_to, sizeof(__pyx_k_numpy__core_multiarray_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy__core_umath_failed_to_impo, __pyx_k_numpy__core_umath_failed_to_impo, sizeof(__pyx_k_numpy__core_umath_failed_to_impo), 0, 1, 0, 0},
    {&__pyx_n_s_pa, __pyx_k_pa, sizeof(__pyx_k_pa), 0, 0, 1, 1},
    {&__pyx_n_s_parquet, __pyx_k_parquet, sizeof(__pyx_k_parquet), 0, 0, 1, 1},
    {&__pyx_n_s_parquet_path, __pyx_k_parquet_path, sizeof(__pyx_k_parquet_path), 0, 0, 1, 1},
    {&__pyx_n_s_pq, __pyx_k_pq, sizeof(__pyx_k_pq), 0, 0, 1, 1},
    {&__pyx_n_s_pre_buffer, __pyx_k_pre_buffer, sizeof(__pyx_k_pre_buffer), 0, 0, 1, 1},
    {&__pyx_n_s_pyarrow, __pyx_k_pyarrow, sizeof(__pyx_k_pyarrow), 0, 0, 1, 1},
    {&__pyx_n_s_pyarrow_parquet, __pyx_k_pyarrow_parquet, sizeof(__pyx_k_pyarrow_parquet), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_read_into_numpy, __pyx_k_read_into_numpy, sizeof(__pyx_k_read_into_numpy), 0, 0, 1, 1},
    {&__pyx_n_s_read_into_torch, __pyx_k_read_into_torch, sizeof(__pyx_k_read_into_torch), 0, 0, 1, 1},
    {&__pyx_n_s_row_group_indices, __pyx_k_row_group_indices, sizeof(__pyx_k_row_group_indices), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_tensor, __pyx_k_tensor, sizeof(__pyx_k_tensor), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_torch, __pyx_k_torch, sizeof(__pyx_k_torch), 0, 0, 1, 1},
    {&__pyx_n_s_use_threads, __pyx_k_use_threads, sizeof(__pyx_k_use_threads), 0, 0, 1, 1},
    {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1025, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(4, 308, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1025
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_numpy__core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(2, 1025, __pyx_L1_error)

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GOTREF(__pyx_tuple_);

#line 1025 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd":1031
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_numpy__core_umath_failed_to_impo); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(2, 1031, __pyx_L1_error)

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GOTREF(__pyx_tuple__2);

#line 1031 "../../tmp/pip-build-env-xtuic_as/overlay/local/lib/python3.10/dist-packages/numpy/__init__.cython-30.pxd"
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cpython/datetime.pxd":308
 * cdef inline object timezone_new(object offset, object name=None):
 *     if PY_VERSION_HEX < 0x030700b1:
 *         raise RuntimeError('Time zones are not available from the C-API.')             # <<<<<<<<<<<<<<
 *     return __Pyx_TimeZone_FromOffsetAndName(offset, <PyObject*>name if name is not None else NULL)
 * 
 */

#line 308 "cpython/datetime.pxd"
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Time_zones_are_not_available_fro); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(4, 308, __pyx_L1_error)

#line 308 "cpython/datetime.pxd"
  __Pyx_GOTREF(__pyx_tuple__3);

#line 308 "cpython/datetime.pxd"
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "jollyjack/jollyjack_cython.pyx":5
 * import cython
 * import pyarrow as pa
 * import pyarrow.parquet as pq             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as cnp
 */

#line 5 "jollyjack/jollyjack_cython.pyx"
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_s_pyarrow, __pyx_n_s_parquet); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 5, __pyx_L1_error)

#line 5 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 5 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "jollyjack/jollyjack_cython.pyx":20
 * from cpython cimport PyCapsule_GetPointer, PyCapsule_Import
 * 
 * cpdef void read_into_torch (parquet_path, FileMetaData metadata, tensor, row_group_indices, column_indices, pre_buffer=False):             # <<<<<<<<<<<<<<
 * 
 *     import torch
 */

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_tuple__7 = PyTuple_Pack(6, __pyx_n_s_parquet_path, __pyx_n_s_metadata, __pyx_n_s_tensor, __pyx_n_s_row_group_indices, __pyx_n_s_column_indices, __pyx_n_s_pre_buffer); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_tuple__7);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GIVEREF(__pyx_tuple__7);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_jollyjack_jollyjack_cython_pyx, __pyx_n_s_read_into_torch, 20, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_tuple__9 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_tuple__9);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "jollyjack/jollyjack_cython.pyx":34
 *     return
 * 
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):             # <<<<<<<<<<<<<<
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')
 *     cdef vector[int] crow_group_indices = row_group_indices
 */

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_tuple__10 = PyTuple_Pack(7, __pyx_n_s_parquet_path, __pyx_n_s_metadata, __pyx_n_s_np_array, __pyx_n_s_row_group_indices, __pyx_n_s_column_indices, __pyx_n_s_pre_buffer, __pyx_n_s_use_threads); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_tuple__10);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GIVEREF(__pyx_tuple__10);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_jollyjack_jollyjack_cython_pyx, __pyx_n_s_read_into_numpy, 34, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_tuple__12 = PyTuple_Pack(2, Py_False, Py_False); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_tuple__12);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GIVEREF(__pyx_tuple__12);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "jollyjack/jollyjack_cython.pyx"
  return 0;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "jollyjack/jollyjack_cython.pyx"
  return -1;

#line 34 "jollyjack/jollyjack_cython.pyx"
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_11); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 271, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_11); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 316, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_11); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 320, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_11); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 359, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 847, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 849, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 851, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 853, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 855, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 857, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 859, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 861, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 863, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 865, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_11(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_11); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 929, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("datetime"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_8datetime_date = __Pyx_ImportType_3_0_11(__pyx_t_1, "datetime", "date", sizeof(PyDateTime_Date), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyDateTime_Date),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_8datetime_date) __PYX_ERR(4, 70, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_time = __Pyx_ImportType_3_0_11(__pyx_t_1, "datetime", "time", sizeof(PyDateTime_Time), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyDateTime_Time),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_8datetime_time) __PYX_ERR(4, 83, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_datetime = __Pyx_ImportType_3_0_11(__pyx_t_1, "datetime", "datetime", sizeof(PyDateTime_DateTime), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyDateTime_DateTime),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_8datetime_datetime) __PYX_ERR(4, 109, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_timedelta = __Pyx_ImportType_3_0_11(__pyx_t_1, "datetime", "timedelta", sizeof(PyDateTime_Delta), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyDateTime_Delta),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_8datetime_timedelta) __PYX_ERR(4, 147, __pyx_L1_error)
  __pyx_ptype_7cpython_8datetime_tzinfo = __Pyx_ImportType_3_0_11(__pyx_t_1, "datetime", "tzinfo", sizeof(PyDateTime_TZInfo), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyDateTime_TZInfo),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_8datetime_tzinfo) __PYX_ERR(4, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyarrow.lib"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyarrow_3lib__Weakrefable = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "_Weakrefable", sizeof(struct __pyx_obj_7pyarrow_3lib__Weakrefable), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib__Weakrefable),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib__Weakrefable) __PYX_ERR(9, 71, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_IpcWriteOptions = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "IpcWriteOptions", sizeof(struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_IpcWriteOptions),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_IpcWriteOptions) __PYX_ERR(9, 75, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_IpcReadOptions = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "IpcReadOptions", sizeof(struct __pyx_obj_7pyarrow_3lib_IpcReadOptions), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_IpcReadOptions),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_IpcReadOptions) __PYX_ERR(9, 80, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Message = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Message", sizeof(struct __pyx_obj_7pyarrow_3lib_Message), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Message),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Message) __PYX_ERR(9, 85, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MemoryPool = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "MemoryPool", sizeof(struct __pyx_obj_7pyarrow_3lib_MemoryPool), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_MemoryPool),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_MemoryPool) __PYX_ERR(9, 90, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MemoryPool = (struct __pyx_vtabstruct_7pyarrow_3lib_MemoryPool*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MemoryPool); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MemoryPool)) __PYX_ERR(9, 90, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DataType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "DataType", sizeof(struct __pyx_obj_7pyarrow_3lib_DataType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_DataType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_DataType) __PYX_ERR(9, 103, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DataType = (struct __pyx_vtabstruct_7pyarrow_3lib_DataType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DataType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DataType)) __PYX_ERR(9, 103, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ListType", sizeof(struct __pyx_obj_7pyarrow_3lib_ListType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ListType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ListType) __PYX_ERR(9, 113, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListType = (struct __pyx_vtabstruct_7pyarrow_3lib_ListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListType)) __PYX_ERR(9, 113, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "LargeListType", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_LargeListType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_LargeListType) __PYX_ERR(9, 118, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListType = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListType)) __PYX_ERR(9, 118, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListViewType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ListViewType", sizeof(struct __pyx_obj_7pyarrow_3lib_ListViewType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ListViewType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ListViewType) __PYX_ERR(9, 123, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListViewType = (struct __pyx_vtabstruct_7pyarrow_3lib_ListViewType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListViewType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListViewType)) __PYX_ERR(9, 123, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListViewType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "LargeListViewType", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListViewType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_LargeListViewType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_LargeListViewType) __PYX_ERR(9, 128, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListViewType = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListViewType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListViewType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListViewType)) __PYX_ERR(9, 128, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MapType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "MapType", sizeof(struct __pyx_obj_7pyarrow_3lib_MapType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_MapType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_MapType) __PYX_ERR(9, 133, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MapType = (struct __pyx_vtabstruct_7pyarrow_3lib_MapType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MapType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MapType)) __PYX_ERR(9, 133, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeListType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "FixedSizeListType", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeListType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_FixedSizeListType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeListType) __PYX_ERR(9, 138, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeListType = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeListType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeListType)) __PYX_ERR(9, 138, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StructType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "StructType", sizeof(struct __pyx_obj_7pyarrow_3lib_StructType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_StructType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_StructType) __PYX_ERR(9, 143, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StructType = (struct __pyx_vtabstruct_7pyarrow_3lib_StructType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StructType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StructType)) __PYX_ERR(9, 143, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryMemo = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "DictionaryMemo", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryMemo), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_DictionaryMemo),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_DictionaryMemo) __PYX_ERR(9, 150, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "DictionaryType", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_DictionaryType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_DictionaryType) __PYX_ERR(9, 158, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DictionaryType = (struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DictionaryType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DictionaryType)) __PYX_ERR(9, 158, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_TimestampType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "TimestampType", sizeof(struct __pyx_obj_7pyarrow_3lib_TimestampType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_TimestampType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_TimestampType) __PYX_ERR(9, 163, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_TimestampType = (struct __pyx_vtabstruct_7pyarrow_3lib_TimestampType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_TimestampType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_TimestampType)) __PYX_ERR(9, 163, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Time32Type = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Time32Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Time32Type), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Time32Type),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Time32Type) __PYX_ERR(9, 168, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Time32Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Time32Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Time32Type); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Time32Type)) __PYX_ERR(9, 168, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Time64Type = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Time64Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Time64Type), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Time64Type),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Time64Type) __PYX_ERR(9, 173, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Time64Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Time64Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Time64Type); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Time64Type)) __PYX_ERR(9, 173, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DurationType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "DurationType", sizeof(struct __pyx_obj_7pyarrow_3lib_DurationType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_DurationType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_DurationType) __PYX_ERR(9, 178, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DurationType = (struct __pyx_vtabstruct_7pyarrow_3lib_DurationType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DurationType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DurationType)) __PYX_ERR(9, 178, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "FixedSizeBinaryType", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType) __PYX_ERR(9, 183, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryType)) __PYX_ERR(9, 183, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal128Type = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Decimal128Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal128Type), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Decimal128Type),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Decimal128Type) __PYX_ERR(9, 188, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal128Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal128Type); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal128Type)) __PYX_ERR(9, 188, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal256Type = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Decimal256Type", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal256Type), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Decimal256Type),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Decimal256Type) __PYX_ERR(9, 193, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal256Type = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Type*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal256Type); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal256Type)) __PYX_ERR(9, 193, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_RunEndEncodedType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "RunEndEncodedType", sizeof(struct __pyx_obj_7pyarrow_3lib_RunEndEncodedType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_RunEndEncodedType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_RunEndEncodedType) __PYX_ERR(9, 198, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_RunEndEncodedType = (struct __pyx_vtabstruct_7pyarrow_3lib_RunEndEncodedType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_RunEndEncodedType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_RunEndEncodedType)) __PYX_ERR(9, 198, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BaseExtensionType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "BaseExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_BaseExtensionType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_BaseExtensionType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_BaseExtensionType) __PYX_ERR(9, 203, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BaseExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_BaseExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BaseExtensionType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BaseExtensionType)) __PYX_ERR(9, 203, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ExtensionType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_ExtensionType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ExtensionType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ExtensionType) __PYX_ERR(9, 208, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ExtensionType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ExtensionType)) __PYX_ERR(9, 208, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedShapeTensorType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "FixedShapeTensorType", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedShapeTensorType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_FixedShapeTensorType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_FixedShapeTensorType) __PYX_ERR(9, 213, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedShapeTensorType = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedShapeTensorType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedShapeTensorType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedShapeTensorType)) __PYX_ERR(9, 213, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_PyExtensionType = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "PyExtensionType", sizeof(struct __pyx_obj_7pyarrow_3lib_PyExtensionType), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_PyExtensionType),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_PyExtensionType) __PYX_ERR(9, 218, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_PyExtensionType = (struct __pyx_vtabstruct_7pyarrow_3lib_PyExtensionType*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_PyExtensionType); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_PyExtensionType)) __PYX_ERR(9, 218, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__Metadata = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "_Metadata", sizeof(struct __pyx_obj_7pyarrow_3lib__Metadata), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib__Metadata),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib__Metadata) __PYX_ERR(9, 222, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_KeyValueMetadata = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "KeyValueMetadata", sizeof(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_KeyValueMetadata),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_KeyValueMetadata) __PYX_ERR(9, 228, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_KeyValueMetadata = (struct __pyx_vtabstruct_7pyarrow_3lib_KeyValueMetadata*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_KeyValueMetadata); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_KeyValueMetadata)) __PYX_ERR(9, 228, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Field = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Field", sizeof(struct __pyx_obj_7pyarrow_3lib_Field), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Field),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Field) __PYX_ERR(9, 240, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Field = (struct __pyx_vtabstruct_7pyarrow_3lib_Field*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Field); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Field)) __PYX_ERR(9, 240, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Schema = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Schema", sizeof(struct __pyx_obj_7pyarrow_3lib_Schema), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Schema),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Schema) __PYX_ERR(9, 251, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Schema = (struct __pyx_vtabstruct_7pyarrow_3lib_Schema*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Schema); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Schema)) __PYX_ERR(9, 251, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Scalar = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Scalar", sizeof(struct __pyx_obj_7pyarrow_3lib_Scalar), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Scalar),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Scalar) __PYX_ERR(9, 260, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Scalar = (struct __pyx_vtabstruct_7pyarrow_3lib_Scalar*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Scalar); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Scalar)) __PYX_ERR(9, 260, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__PandasConvertible = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "_PandasConvertible", sizeof(struct __pyx_obj_7pyarrow_3lib__PandasConvertible), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib__PandasConvertible),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib__PandasConvertible) __PYX_ERR(9, 272, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Array) __PYX_ERR(9, 276, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Array)) __PYX_ERR(9, 276, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Tensor = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Tensor", sizeof(struct __pyx_obj_7pyarrow_3lib_Tensor), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Tensor),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Tensor) __PYX_ERR(9, 292, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Tensor = (struct __pyx_vtabstruct_7pyarrow_3lib_Tensor*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Tensor); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Tensor)) __PYX_ERR(9, 292, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCSRMatrix = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "SparseCSRMatrix", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_SparseCSRMatrix),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix) __PYX_ERR(9, 305, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCSRMatrix = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSRMatrix*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCSRMatrix); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCSRMatrix)) __PYX_ERR(9, 305, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCSCMatrix = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "SparseCSCMatrix", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_SparseCSCMatrix),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix) __PYX_ERR(9, 316, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCSCMatrix = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSCMatrix*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCSCMatrix); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCSCMatrix)) __PYX_ERR(9, 316, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCOOTensor = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "SparseCOOTensor", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_SparseCOOTensor),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_SparseCOOTensor) __PYX_ERR(9, 327, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCOOTensor = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCOOTensor*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCOOTensor); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCOOTensor)) __PYX_ERR(9, 327, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_SparseCSFTensor = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "SparseCSFTensor", sizeof(struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_SparseCSFTensor),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_SparseCSFTensor) __PYX_ERR(9, 338, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_SparseCSFTensor = (struct __pyx_vtabstruct_7pyarrow_3lib_SparseCSFTensor*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_SparseCSFTensor); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_SparseCSFTensor)) __PYX_ERR(9, 338, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NullArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "NullArray", sizeof(struct __pyx_obj_7pyarrow_3lib_NullArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_NullArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_NullArray) __PYX_ERR(9, 349, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NullArray = (struct __pyx_vtabstruct_7pyarrow_3lib_NullArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NullArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NullArray)) __PYX_ERR(9, 349, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BooleanArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "BooleanArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BooleanArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_BooleanArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_BooleanArray) __PYX_ERR(9, 353, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BooleanArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BooleanArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BooleanArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BooleanArray)) __PYX_ERR(9, 353, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NumericArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "NumericArray", sizeof(struct __pyx_obj_7pyarrow_3lib_NumericArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_NumericArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_NumericArray) __PYX_ERR(9, 357, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NumericArray = (struct __pyx_vtabstruct_7pyarrow_3lib_NumericArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NumericArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NumericArray)) __PYX_ERR(9, 357, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_IntegerArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "IntegerArray", sizeof(struct __pyx_obj_7pyarrow_3lib_IntegerArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_IntegerArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_IntegerArray) __PYX_ERR(9, 361, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_IntegerArray = (struct __pyx_vtabstruct_7pyarrow_3lib_IntegerArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_IntegerArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_IntegerArray)) __PYX_ERR(9, 361, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FloatingPointArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "FloatingPointArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FloatingPointArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_FloatingPointArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_FloatingPointArray) __PYX_ERR(9, 365, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FloatingPointArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FloatingPointArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FloatingPointArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FloatingPointArray)) __PYX_ERR(9, 365, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int8Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Int8Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int8Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Int8Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Int8Array) __PYX_ERR(9, 369, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int8Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int8Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int8Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int8Array)) __PYX_ERR(9, 369, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt8Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "UInt8Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt8Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_UInt8Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_UInt8Array) __PYX_ERR(9, 373, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt8Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt8Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt8Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt8Array)) __PYX_ERR(9, 373, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int16Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Int16Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int16Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Int16Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Int16Array) __PYX_ERR(9, 377, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int16Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int16Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int16Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int16Array)) __PYX_ERR(9, 377, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt16Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "UInt16Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt16Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_UInt16Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_UInt16Array) __PYX_ERR(9, 381, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt16Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt16Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt16Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt16Array)) __PYX_ERR(9, 381, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int32Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Int32Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int32Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Int32Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Int32Array) __PYX_ERR(9, 385, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int32Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int32Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int32Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int32Array)) __PYX_ERR(9, 385, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt32Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "UInt32Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt32Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_UInt32Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_UInt32Array) __PYX_ERR(9, 389, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt32Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt32Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt32Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt32Array)) __PYX_ERR(9, 389, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Int64Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Int64Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Int64Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Int64Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Int64Array) __PYX_ERR(9, 393, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Int64Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Int64Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Int64Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Int64Array)) __PYX_ERR(9, 393, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UInt64Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "UInt64Array", sizeof(struct __pyx_obj_7pyarrow_3lib_UInt64Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_UInt64Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_UInt64Array) __PYX_ERR(9, 397, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UInt64Array = (struct __pyx_vtabstruct_7pyarrow_3lib_UInt64Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UInt64Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UInt64Array)) __PYX_ERR(9, 397, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_HalfFloatArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "HalfFloatArray", sizeof(struct __pyx_obj_7pyarrow_3lib_HalfFloatArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_HalfFloatArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_HalfFloatArray) __PYX_ERR(9, 401, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_HalfFloatArray = (struct __pyx_vtabstruct_7pyarrow_3lib_HalfFloatArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_HalfFloatArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_HalfFloatArray)) __PYX_ERR(9, 401, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FloatArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "FloatArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FloatArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_FloatArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_FloatArray) __PYX_ERR(9, 405, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FloatArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FloatArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FloatArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FloatArray)) __PYX_ERR(9, 405, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DoubleArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "DoubleArray", sizeof(struct __pyx_obj_7pyarrow_3lib_DoubleArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_DoubleArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_DoubleArray) __PYX_ERR(9, 409, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DoubleArray = (struct __pyx_vtabstruct_7pyarrow_3lib_DoubleArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DoubleArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DoubleArray)) __PYX_ERR(9, 409, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "FixedSizeBinaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_FixedSizeBinaryArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray) __PYX_ERR(9, 413, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeBinaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeBinaryArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeBinaryArray)) __PYX_ERR(9, 413, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal128Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Decimal128Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal128Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Decimal128Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Decimal128Array) __PYX_ERR(9, 417, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal128Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal128Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal128Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal128Array)) __PYX_ERR(9, 417, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Decimal256Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Decimal256Array", sizeof(struct __pyx_obj_7pyarrow_3lib_Decimal256Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Decimal256Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Decimal256Array) __PYX_ERR(9, 421, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Decimal256Array = (struct __pyx_vtabstruct_7pyarrow_3lib_Decimal256Array*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Decimal256Array); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Decimal256Array)) __PYX_ERR(9, 421, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StructArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "StructArray", sizeof(struct __pyx_obj_7pyarrow_3lib_StructArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_StructArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_StructArray) __PYX_ERR(9, 425, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StructArray = (struct __pyx_vtabstruct_7pyarrow_3lib_StructArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StructArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StructArray)) __PYX_ERR(9, 425, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BaseListArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "BaseListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BaseListArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_BaseListArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_BaseListArray) __PYX_ERR(9, 429, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BaseListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BaseListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BaseListArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BaseListArray)) __PYX_ERR(9, 429, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ListArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ListArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ListArray) __PYX_ERR(9, 433, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListArray)) __PYX_ERR(9, 433, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "LargeListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_LargeListArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_LargeListArray) __PYX_ERR(9, 437, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListArray)) __PYX_ERR(9, 437, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ListViewArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ListViewArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ListViewArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ListViewArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ListViewArray) __PYX_ERR(9, 441, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ListViewArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ListViewArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ListViewArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ListViewArray)) __PYX_ERR(9, 441, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_LargeListViewArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "LargeListViewArray", sizeof(struct __pyx_obj_7pyarrow_3lib_LargeListViewArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_LargeListViewArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_LargeListViewArray) __PYX_ERR(9, 445, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_LargeListViewArray = (struct __pyx_vtabstruct_7pyarrow_3lib_LargeListViewArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_LargeListViewArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_LargeListViewArray)) __PYX_ERR(9, 445, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MapArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "MapArray", sizeof(struct __pyx_obj_7pyarrow_3lib_MapArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_MapArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_MapArray) __PYX_ERR(9, 449, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MapArray = (struct __pyx_vtabstruct_7pyarrow_3lib_MapArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MapArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MapArray)) __PYX_ERR(9, 449, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_FixedSizeListArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "FixedSizeListArray", sizeof(struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_FixedSizeListArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_FixedSizeListArray) __PYX_ERR(9, 453, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_FixedSizeListArray = (struct __pyx_vtabstruct_7pyarrow_3lib_FixedSizeListArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_FixedSizeListArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_FixedSizeListArray)) __PYX_ERR(9, 453, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_UnionArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "UnionArray", sizeof(struct __pyx_obj_7pyarrow_3lib_UnionArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_UnionArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_UnionArray) __PYX_ERR(9, 457, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_UnionArray = (struct __pyx_vtabstruct_7pyarrow_3lib_UnionArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_UnionArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_UnionArray)) __PYX_ERR(9, 457, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StringArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "StringArray", sizeof(struct __pyx_obj_7pyarrow_3lib_StringArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_StringArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_StringArray) __PYX_ERR(9, 461, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StringArray = (struct __pyx_vtabstruct_7pyarrow_3lib_StringArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StringArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StringArray)) __PYX_ERR(9, 461, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BinaryArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "BinaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BinaryArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_BinaryArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_BinaryArray) __PYX_ERR(9, 465, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BinaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BinaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BinaryArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BinaryArray)) __PYX_ERR(9, 465, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StringViewArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "StringViewArray", sizeof(struct __pyx_obj_7pyarrow_3lib_StringViewArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_StringViewArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_StringViewArray) __PYX_ERR(9, 469, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StringViewArray = (struct __pyx_vtabstruct_7pyarrow_3lib_StringViewArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StringViewArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StringViewArray)) __PYX_ERR(9, 469, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BinaryViewArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "BinaryViewArray", sizeof(struct __pyx_obj_7pyarrow_3lib_BinaryViewArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_BinaryViewArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_BinaryViewArray) __PYX_ERR(9, 473, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BinaryViewArray = (struct __pyx_vtabstruct_7pyarrow_3lib_BinaryViewArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BinaryViewArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BinaryViewArray)) __PYX_ERR(9, 473, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_DictionaryArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "DictionaryArray", sizeof(struct __pyx_obj_7pyarrow_3lib_DictionaryArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_DictionaryArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_DictionaryArray) __PYX_ERR(9, 477, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_DictionaryArray = (struct __pyx_vtabstruct_7pyarrow_3lib_DictionaryArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_DictionaryArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_DictionaryArray)) __PYX_ERR(9, 477, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ExtensionArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ExtensionArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ExtensionArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ExtensionArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ExtensionArray) __PYX_ERR(9, 482, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ExtensionArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ExtensionArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ExtensionArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ExtensionArray)) __PYX_ERR(9, 482, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "MonthDayNanoIntervalArray", sizeof(struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_MonthDayNanoIntervalArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray) __PYX_ERR(9, 486, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MonthDayNanoIntervalArray = (struct __pyx_vtabstruct_7pyarrow_3lib_MonthDayNanoIntervalArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MonthDayNanoIntervalArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MonthDayNanoIntervalArray)) __PYX_ERR(9, 486, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ChunkedArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ChunkedArray", sizeof(struct __pyx_obj_7pyarrow_3lib_ChunkedArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ChunkedArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ChunkedArray) __PYX_ERR(9, 494, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ChunkedArray = (struct __pyx_vtabstruct_7pyarrow_3lib_ChunkedArray*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ChunkedArray); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ChunkedArray)) __PYX_ERR(9, 494, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__Tabular = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "_Tabular", sizeof(struct __pyx_obj_7pyarrow_3lib__Tabular), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib__Tabular),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib__Tabular) __PYX_ERR(9, 507, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Table = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Table", sizeof(struct __pyx_obj_7pyarrow_3lib_Table), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Table),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Table) __PYX_ERR(9, 511, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Table = (struct __pyx_vtabstruct_7pyarrow_3lib_Table*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Table); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Table)) __PYX_ERR(9, 511, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_RecordBatch = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "RecordBatch", sizeof(struct __pyx_obj_7pyarrow_3lib_RecordBatch), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_RecordBatch),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_RecordBatch) __PYX_ERR(9, 519, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_RecordBatch = (struct __pyx_vtabstruct_7pyarrow_3lib_RecordBatch*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_RecordBatch); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_RecordBatch)) __PYX_ERR(9, 519, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Device = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Device", sizeof(struct __pyx_obj_7pyarrow_3lib_Device), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Device),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Device) __PYX_ERR(9, 528, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Device = (struct __pyx_vtabstruct_7pyarrow_3lib_Device*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Device); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Device)) __PYX_ERR(9, 528, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_MemoryManager = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "MemoryManager", sizeof(struct __pyx_obj_7pyarrow_3lib_MemoryManager), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_MemoryManager),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_MemoryManager) __PYX_ERR(9, 538, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_MemoryManager = (struct __pyx_vtabstruct_7pyarrow_3lib_MemoryManager*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_MemoryManager); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_MemoryManager)) __PYX_ERR(9, 538, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Buffer = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Buffer", sizeof(struct __pyx_obj_7pyarrow_3lib_Buffer), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Buffer),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Buffer) __PYX_ERR(9, 548, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Buffer = (struct __pyx_vtabstruct_7pyarrow_3lib_Buffer*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Buffer); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Buffer)) __PYX_ERR(9, 548, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_ResizableBuffer = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "ResizableBuffer", sizeof(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_ResizableBuffer),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_ResizableBuffer) __PYX_ERR(9, 558, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_ResizableBuffer = (struct __pyx_vtabstruct_7pyarrow_3lib_ResizableBuffer*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_ResizableBuffer); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_ResizableBuffer)) __PYX_ERR(9, 558, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_NativeFile = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "NativeFile", sizeof(struct __pyx_obj_7pyarrow_3lib_NativeFile), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_NativeFile),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_NativeFile) __PYX_ERR(9, 563, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_NativeFile = (struct __pyx_vtabstruct_7pyarrow_3lib_NativeFile*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_NativeFile); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_NativeFile)) __PYX_ERR(9, 563, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BufferedInputStream = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "BufferedInputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_BufferedInputStream), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_BufferedInputStream),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_BufferedInputStream) __PYX_ERR(9, 587, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BufferedInputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_BufferedInputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BufferedInputStream); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BufferedInputStream)) __PYX_ERR(9, 587, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_BufferedOutputStream = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "BufferedOutputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_BufferedOutputStream),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_BufferedOutputStream) __PYX_ERR(9, 591, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_BufferedOutputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_BufferedOutputStream); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_BufferedOutputStream)) __PYX_ERR(9, 591, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_CompressedInputStream = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "CompressedInputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_CompressedInputStream), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_CompressedInputStream),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_CompressedInputStream) __PYX_ERR(9, 595, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_CompressedInputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_CompressedInputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_CompressedInputStream); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_CompressedInputStream)) __PYX_ERR(9, 595, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_CompressedOutputStream = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "CompressedOutputStream", sizeof(struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_CompressedOutputStream),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_CompressedOutputStream) __PYX_ERR(9, 599, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream = (struct __pyx_vtabstruct_7pyarrow_3lib_CompressedOutputStream*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_CompressedOutputStream); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_CompressedOutputStream)) __PYX_ERR(9, 599, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib__CRecordBatchWriter = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "_CRecordBatchWriter", sizeof(struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib__CRecordBatchWriter),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib__CRecordBatchWriter) __PYX_ERR(9, 603, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_RecordBatchReader = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "RecordBatchReader", sizeof(struct __pyx_obj_7pyarrow_3lib_RecordBatchReader), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_RecordBatchReader),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_RecordBatchReader) __PYX_ERR(9, 608, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_CacheOptions = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "CacheOptions", sizeof(struct __pyx_obj_7pyarrow_3lib_CacheOptions), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_CacheOptions),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_CacheOptions) __PYX_ERR(9, 613, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_CacheOptions = (struct __pyx_vtabstruct_7pyarrow_3lib_CacheOptions*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_CacheOptions); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_CacheOptions)) __PYX_ERR(9, 613, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_Codec = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "Codec", sizeof(struct __pyx_obj_7pyarrow_3lib_Codec), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_Codec),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_Codec) __PYX_ERR(9, 625, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_Codec = (struct __pyx_vtabstruct_7pyarrow_3lib_Codec*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_Codec); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_Codec)) __PYX_ERR(9, 625, __pyx_L1_error)
  __pyx_ptype_7pyarrow_3lib_StopToken = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow.lib", "StopToken", sizeof(struct __pyx_obj_7pyarrow_3lib_StopToken), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_3lib_StopToken),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_3lib_StopToken) __PYX_ERR(9, 633, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_3lib_StopToken = (struct __pyx_vtabstruct_7pyarrow_3lib_StopToken*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_3lib_StopToken); if (unlikely(!__pyx_vtabptr_7pyarrow_3lib_StopToken)) __PYX_ERR(9, 633, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyarrow._parquet"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow._parquet", "FileEncryptionProperties", sizeof(struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_8_parquet_FileEncryptionProperties),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties) __PYX_ERR(5, 568, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_8_parquet_FileEncryptionProperties = (struct __pyx_vtabstruct_7pyarrow_8_parquet_FileEncryptionProperties*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_8_parquet_FileEncryptionProperties); if (unlikely(!__pyx_vtabptr_7pyarrow_8_parquet_FileEncryptionProperties)) __PYX_ERR(5, 568, __pyx_L1_error)
  __pyx_ptype_7pyarrow_8_parquet_ParquetSchema = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow._parquet", "ParquetSchema", sizeof(struct __pyx_obj_7pyarrow_8_parquet_ParquetSchema), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_8_parquet_ParquetSchema),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_8_parquet_ParquetSchema) __PYX_ERR(5, 613, __pyx_L1_error)
  __pyx_ptype_7pyarrow_8_parquet_FileMetaData = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow._parquet", "FileMetaData", sizeof(struct __pyx_obj_7pyarrow_8_parquet_FileMetaData), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_8_parquet_FileMetaData),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_8_parquet_FileMetaData) __PYX_ERR(5, 618, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_8_parquet_FileMetaData = (struct __pyx_vtabstruct_7pyarrow_8_parquet_FileMetaData*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_8_parquet_FileMetaData); if (unlikely(!__pyx_vtabptr_7pyarrow_8_parquet_FileMetaData)) __PYX_ERR(5, 618, __pyx_L1_error)
  __pyx_ptype_7pyarrow_8_parquet_RowGroupMetaData = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow._parquet", "RowGroupMetaData", sizeof(struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_8_parquet_RowGroupMetaData),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_8_parquet_RowGroupMetaData) __PYX_ERR(5, 628, __pyx_L1_error)
  __pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow._parquet", "ColumnChunkMetaData", sizeof(struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_8_parquet_ColumnChunkMetaData),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData) __PYX_ERR(5, 635, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_8_parquet_ColumnChunkMetaData = (struct __pyx_vtabstruct_7pyarrow_8_parquet_ColumnChunkMetaData*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_8_parquet_ColumnChunkMetaData); if (unlikely(!__pyx_vtabptr_7pyarrow_8_parquet_ColumnChunkMetaData)) __PYX_ERR(5, 635, __pyx_L1_error)
  __pyx_ptype_7pyarrow_8_parquet_Statistics = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow._parquet", "Statistics", sizeof(struct __pyx_obj_7pyarrow_8_parquet_Statistics), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_8_parquet_Statistics),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_8_parquet_Statistics) __PYX_ERR(5, 646, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_8_parquet_Statistics = (struct __pyx_vtabstruct_7pyarrow_8_parquet_Statistics*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_8_parquet_Statistics); if (unlikely(!__pyx_vtabptr_7pyarrow_8_parquet_Statistics)) __PYX_ERR(5, 646, __pyx_L1_error)
  __pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties = __Pyx_ImportType_3_0_11(__pyx_t_1, "pyarrow._parquet", "FileDecryptionProperties", sizeof(struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_7pyarrow_8_parquet_FileDecryptionProperties),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties) __PYX_ERR(5, 665, __pyx_L1_error)
  __pyx_vtabptr_7pyarrow_8_parquet_FileDecryptionProperties = (struct __pyx_vtabstruct_7pyarrow_8_parquet_FileDecryptionProperties*)__Pyx_GetVtable(__pyx_ptype_7pyarrow_8_parquet_FileDecryptionProperties); if (unlikely(!__pyx_vtabptr_7pyarrow_8_parquet_FileDecryptionProperties)) __PYX_ERR(5, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_jollyjack_cython(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_jollyjack_cython},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "jollyjack_cython",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initjollyjack_cython(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initjollyjack_cython(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_jollyjack_cython(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_jollyjack_cython(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_jollyjack_cython(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'jollyjack_cython' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("jollyjack_cython", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "jollyjack_cython" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_jollyjack_cython(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_jollyjack__jollyjack_cython) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "jollyjack.jollyjack_cython")) {
      if (unlikely((PyDict_SetItemString(modules, "jollyjack.jollyjack_cython", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "jollyjack/jollyjack_cython.pyx":4
 * 
 * import cython
 * import pyarrow as pa             # <<<<<<<<<<<<<<
 * import pyarrow.parquet as pq
 * import numpy as np
 */

#line 4 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_pyarrow, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)

#line 4 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 4 "jollyjack/jollyjack_cython.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pa, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)

#line 4 "jollyjack/jollyjack_cython.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jollyjack/jollyjack_cython.pyx":5
 * import cython
 * import pyarrow as pa
 * import pyarrow.parquet as pq             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as cnp
 */

#line 5 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_pyarrow_parquet, __pyx_tuple__6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)

#line 5 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 5 "jollyjack/jollyjack_cython.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pq, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)

#line 5 "jollyjack/jollyjack_cython.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jollyjack/jollyjack_cython.pyx":6
 * import pyarrow as pa
 * import pyarrow.parquet as pq
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as cnp
 * 
 */

#line 6 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 6 "jollyjack/jollyjack_cython.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)

#line 6 "jollyjack/jollyjack_cython.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jollyjack/jollyjack_cython.pyx":20
 * from cpython cimport PyCapsule_GetPointer, PyCapsule_Import
 * 
 * cpdef void read_into_torch (parquet_path, FileMetaData metadata, tensor, row_group_indices, column_indices, pre_buffer=False):             # <<<<<<<<<<<<<<
 * 
 *     import torch
 */

#line 20 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9jollyjack_16jollyjack_cython_1read_into_torch, 0, __pyx_n_s_read_into_torch, NULL, __pyx_n_s_jollyjack_jollyjack_cython, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__9);

#line 20 "jollyjack/jollyjack_cython.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_into_torch, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "jollyjack/jollyjack_cython.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jollyjack/jollyjack_cython.pyx":34
 *     return
 * 
 * cpdef void read_into_numpy (parquet_path, FileMetaData metadata, cnp.ndarray np_array, row_group_indices, column_indices, pre_buffer=False, use_threads=False):             # <<<<<<<<<<<<<<
 *     cdef string encoded_path = parquet_path.encode('utf8') if parquet_path is not None else "".encode('utf8')
 *     cdef vector[int] crow_group_indices = row_group_indices
 */

#line 34 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9jollyjack_16jollyjack_cython_3read_into_numpy, 0, __pyx_n_s_read_into_numpy, NULL, __pyx_n_s_jollyjack_jollyjack_cython, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__12);

#line 34 "jollyjack/jollyjack_cython.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_into_numpy, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)

#line 34 "jollyjack/jollyjack_cython.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "jollyjack/jollyjack_cython.pyx":1
 * # distutils: include_dirs = .             # <<<<<<<<<<<<<<
 * 
 * import cython
 */

#line 1 "jollyjack/jollyjack_cython.pyx"
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "jollyjack/jollyjack_cython.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1 "jollyjack/jollyjack_cython.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "jollyjack/jollyjack_cython.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1 "jollyjack/jollyjack_cython.pyx"


#line 1 "jollyjack/jollyjack_cython.pyx"
  /*--- Wrapped vars code ---*/

#line 1 "jollyjack/jollyjack_cython.pyx"


#line 1 "jollyjack/jollyjack_cython.pyx"
  goto __pyx_L0;

#line 1 "jollyjack/jollyjack_cython.pyx"
  __pyx_L1_error:;

#line 1 "jollyjack/jollyjack_cython.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1 "jollyjack/jollyjack_cython.pyx"
  if (__pyx_m) {

#line 1 "jollyjack/jollyjack_cython.pyx"
    if (__pyx_d && stringtab_initialized) {

#line 1 "jollyjack/jollyjack_cython.pyx"
      __Pyx_AddTraceback("init jollyjack.jollyjack_cython", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "jollyjack/jollyjack_cython.pyx"
    }

#line 1 "jollyjack/jollyjack_cython.pyx"
    #if !CYTHON_USE_MODULE_STATE

#line 1 "jollyjack/jollyjack_cython.pyx"
    Py_CLEAR(__pyx_m);

#line 1 "jollyjack/jollyjack_cython.pyx"
    #else

#line 1 "jollyjack/jollyjack_cython.pyx"
    Py_DECREF(__pyx_m);

#line 1 "jollyjack/jollyjack_cython.pyx"
    if (pystate_addmodule_run) {

#line 1 "jollyjack/jollyjack_cython.pyx"
      PyObject *tp, *value, *tb;

#line 1 "jollyjack/jollyjack_cython.pyx"
      PyErr_Fetch(&tp, &value, &tb);

#line 1 "jollyjack/jollyjack_cython.pyx"
      PyState_RemoveModule(&__pyx_moduledef);

#line 1 "jollyjack/jollyjack_cython.pyx"
      PyErr_Restore(tp, value, tb);

#line 1 "jollyjack/jollyjack_cython.pyx"
    }

#line 1 "jollyjack/jollyjack_cython.pyx"
    #endif

#line 1 "jollyjack/jollyjack_cython.pyx"
  } else if (!PyErr_Occurred()) {

#line 1 "jollyjack/jollyjack_cython.pyx"
    PyErr_SetString(PyExc_ImportError, "init jollyjack.jollyjack_cython");

#line 1 "jollyjack/jollyjack_cython.pyx"
  }

#line 1 "jollyjack/jollyjack_cython.pyx"
  __pyx_L0:;

#line 1 "jollyjack/jollyjack_cython.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "jollyjack/jollyjack_cython.pyx"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 1 "jollyjack/jollyjack_cython.pyx"
  return (__pyx_m != NULL) ? 0 : -1;

#line 1 "jollyjack/jollyjack_cython.pyx"
  #elif PY_MAJOR_VERSION >= 3

#line 1 "jollyjack/jollyjack_cython.pyx"
  return __pyx_m;

#line 1 "jollyjack/jollyjack_cython.pyx"
  #else

#line 1 "jollyjack/jollyjack_cython.pyx"
  return;

#line 1 "jollyjack/jollyjack_cython.pyx"
  #endif

#line 1 "jollyjack/jollyjack_cython.pyx"
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

#line 1 "cython_utility"

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__4;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_11
#define __PYX_HAVE_RT_ImportType_3_0_11
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_11 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_11 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return ::std::complex< long double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return x + y*(__pyx_t_long_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      __pyx_t_long_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsl(b.real) >= fabsl(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                long double r = b.imag / b.real;
                long double s = (long double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_long_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            long double r = b.real / b.imag;
            long double s = (long double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_long_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            long double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_long_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtl(z.real*z.real + z.imag*z.imag);
          #else
            return hypotl(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
            __pyx_t_long_double_complex z;
            long double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    long double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_long__double(a, a);
                    case 3:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, a);
                    case 4:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powl(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2l(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_long__double(a);
                theta = atan2l(a.imag, a.real);
            }
            lnr = logl(r);
            z_r = expl(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosl(z_theta);
            z.imag = z_r * sinl(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_intp(npy_intp value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_intp neg_one = (npy_intp) -1, const_zero = (npy_intp) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_intp) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_intp) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_intp) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_intp) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_intp) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(npy_intp),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(npy_intp));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__13);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
